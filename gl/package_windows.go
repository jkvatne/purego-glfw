// Code generated by glow (https://github.com/neclepsio/glow). DO NOT EDIT.

package gl

import (
	"math"
	"syscall"
	"unsafe"
)

var (
	gpAccum                                          uintptr
	gpActiveProgramEXT                               uintptr
	gpActiveShaderProgram                            uintptr
	gpActiveShaderProgramEXT                         uintptr
	gpActiveTexture                                  uintptr
	gpAlphaFunc                                      uintptr
	gpApplyFramebufferAttachmentCMAAINTEL            uintptr
	gpAreTexturesResident                            uintptr
	gpArrayElement                                   uintptr
	gpAttachShader                                   uintptr
	gpBegin                                          uintptr
	gpBeginConditionalRender                         uintptr
	gpBeginConditionalRenderNV                       uintptr
	gpBeginPerfMonitorAMD                            uintptr
	gpBeginPerfQueryINTEL                            uintptr
	gpBeginQuery                                     uintptr
	gpBeginQueryIndexed                              uintptr
	gpBeginTransformFeedback                         uintptr
	gpBindAttribLocation                             uintptr
	gpBindBuffer                                     uintptr
	gpBindBufferBase                                 uintptr
	gpBindBufferRange                                uintptr
	gpBindBuffersBase                                uintptr
	gpBindBuffersRange                               uintptr
	gpBindFragDataLocation                           uintptr
	gpBindFragDataLocationIndexed                    uintptr
	gpBindFramebuffer                                uintptr
	gpBindImageTexture                               uintptr
	gpBindImageTextures                              uintptr
	gpBindMultiTextureEXT                            uintptr
	gpBindProgramPipeline                            uintptr
	gpBindProgramPipelineEXT                         uintptr
	gpBindRenderbuffer                               uintptr
	gpBindSampler                                    uintptr
	gpBindSamplers                                   uintptr
	gpBindShadingRateImageNV                         uintptr
	gpBindTexture                                    uintptr
	gpBindTextureUnit                                uintptr
	gpBindTextures                                   uintptr
	gpBindTransformFeedback                          uintptr
	gpBindVertexArray                                uintptr
	gpBindVertexBuffer                               uintptr
	gpBindVertexBuffers                              uintptr
	gpBitmap                                         uintptr
	gpBlendBarrierKHR                                uintptr
	gpBlendBarrierNV                                 uintptr
	gpBlendColor                                     uintptr
	gpBlendEquation                                  uintptr
	gpBlendEquationSeparate                          uintptr
	gpBlendEquationSeparatei                         uintptr
	gpBlendEquationSeparateiARB                      uintptr
	gpBlendEquationi                                 uintptr
	gpBlendEquationiARB                              uintptr
	gpBlendFunc                                      uintptr
	gpBlendFuncSeparate                              uintptr
	gpBlendFuncSeparatei                             uintptr
	gpBlendFuncSeparateiARB                          uintptr
	gpBlendFunci                                     uintptr
	gpBlendFunciARB                                  uintptr
	gpBlendParameteriNV                              uintptr
	gpBlitFramebuffer                                uintptr
	gpBlitNamedFramebuffer                           uintptr
	gpBufferAddressRangeNV                           uintptr
	gpBufferAttachMemoryNV                           uintptr
	gpBufferData                                     uintptr
	gpBufferPageCommitmentARB                        uintptr
	gpBufferStorage                                  uintptr
	gpBufferSubData                                  uintptr
	gpCallCommandListNV                              uintptr
	gpCallList                                       uintptr
	gpCallLists                                      uintptr
	gpCheckFramebufferStatus                         uintptr
	gpCheckNamedFramebufferStatus                    uintptr
	gpCheckNamedFramebufferStatusEXT                 uintptr
	gpClampColor                                     uintptr
	gpClear                                          uintptr
	gpClearAccum                                     uintptr
	gpClearBufferData                                uintptr
	gpClearBufferSubData                             uintptr
	gpClearBufferfi                                  uintptr
	gpClearBufferfv                                  uintptr
	gpClearBufferiv                                  uintptr
	gpClearBufferuiv                                 uintptr
	gpClearColor                                     uintptr
	gpClearDepth                                     uintptr
	gpClearDepthf                                    uintptr
	gpClearIndex                                     uintptr
	gpClearNamedBufferData                           uintptr
	gpClearNamedBufferDataEXT                        uintptr
	gpClearNamedBufferSubData                        uintptr
	gpClearNamedBufferSubDataEXT                     uintptr
	gpClearNamedFramebufferfi                        uintptr
	gpClearNamedFramebufferfv                        uintptr
	gpClearNamedFramebufferiv                        uintptr
	gpClearNamedFramebufferuiv                       uintptr
	gpClearStencil                                   uintptr
	gpClearTexImage                                  uintptr
	gpClearTexSubImage                               uintptr
	gpClientActiveTexture                            uintptr
	gpClientAttribDefaultEXT                         uintptr
	gpClientWaitSync                                 uintptr
	gpClipControl                                    uintptr
	gpClipPlane                                      uintptr
	gpColor3b                                        uintptr
	gpColor3bv                                       uintptr
	gpColor3d                                        uintptr
	gpColor3dv                                       uintptr
	gpColor3f                                        uintptr
	gpColor3fv                                       uintptr
	gpColor3i                                        uintptr
	gpColor3iv                                       uintptr
	gpColor3s                                        uintptr
	gpColor3sv                                       uintptr
	gpColor3ub                                       uintptr
	gpColor3ubv                                      uintptr
	gpColor3ui                                       uintptr
	gpColor3uiv                                      uintptr
	gpColor3us                                       uintptr
	gpColor3usv                                      uintptr
	gpColor4b                                        uintptr
	gpColor4bv                                       uintptr
	gpColor4d                                        uintptr
	gpColor4dv                                       uintptr
	gpColor4f                                        uintptr
	gpColor4fv                                       uintptr
	gpColor4i                                        uintptr
	gpColor4iv                                       uintptr
	gpColor4s                                        uintptr
	gpColor4sv                                       uintptr
	gpColor4ub                                       uintptr
	gpColor4ubv                                      uintptr
	gpColor4ui                                       uintptr
	gpColor4uiv                                      uintptr
	gpColor4us                                       uintptr
	gpColor4usv                                      uintptr
	gpColorFormatNV                                  uintptr
	gpColorMask                                      uintptr
	gpColorMaski                                     uintptr
	gpColorMaterial                                  uintptr
	gpColorPointer                                   uintptr
	gpCommandListSegmentsNV                          uintptr
	gpCompileCommandListNV                           uintptr
	gpCompileShader                                  uintptr
	gpCompileShaderIncludeARB                        uintptr
	gpCompressedMultiTexImage1DEXT                   uintptr
	gpCompressedMultiTexImage2DEXT                   uintptr
	gpCompressedMultiTexImage3DEXT                   uintptr
	gpCompressedMultiTexSubImage1DEXT                uintptr
	gpCompressedMultiTexSubImage2DEXT                uintptr
	gpCompressedMultiTexSubImage3DEXT                uintptr
	gpCompressedTexImage1D                           uintptr
	gpCompressedTexImage2D                           uintptr
	gpCompressedTexImage3D                           uintptr
	gpCompressedTexSubImage1D                        uintptr
	gpCompressedTexSubImage2D                        uintptr
	gpCompressedTexSubImage3D                        uintptr
	gpCompressedTextureImage1DEXT                    uintptr
	gpCompressedTextureImage2DEXT                    uintptr
	gpCompressedTextureImage3DEXT                    uintptr
	gpCompressedTextureSubImage1D                    uintptr
	gpCompressedTextureSubImage1DEXT                 uintptr
	gpCompressedTextureSubImage2D                    uintptr
	gpCompressedTextureSubImage2DEXT                 uintptr
	gpCompressedTextureSubImage3D                    uintptr
	gpCompressedTextureSubImage3DEXT                 uintptr
	gpConservativeRasterParameterfNV                 uintptr
	gpConservativeRasterParameteriNV                 uintptr
	gpCopyBufferSubData                              uintptr
	gpCopyImageSubData                               uintptr
	gpCopyMultiTexImage1DEXT                         uintptr
	gpCopyMultiTexImage2DEXT                         uintptr
	gpCopyMultiTexSubImage1DEXT                      uintptr
	gpCopyMultiTexSubImage2DEXT                      uintptr
	gpCopyMultiTexSubImage3DEXT                      uintptr
	gpCopyNamedBufferSubData                         uintptr
	gpCopyPathNV                                     uintptr
	gpCopyPixels                                     uintptr
	gpCopyTexImage1D                                 uintptr
	gpCopyTexImage2D                                 uintptr
	gpCopyTexSubImage1D                              uintptr
	gpCopyTexSubImage2D                              uintptr
	gpCopyTexSubImage3D                              uintptr
	gpCopyTextureImage1DEXT                          uintptr
	gpCopyTextureImage2DEXT                          uintptr
	gpCopyTextureSubImage1D                          uintptr
	gpCopyTextureSubImage1DEXT                       uintptr
	gpCopyTextureSubImage2D                          uintptr
	gpCopyTextureSubImage2DEXT                       uintptr
	gpCopyTextureSubImage3D                          uintptr
	gpCopyTextureSubImage3DEXT                       uintptr
	gpCoverFillPathInstancedNV                       uintptr
	gpCoverFillPathNV                                uintptr
	gpCoverStrokePathInstancedNV                     uintptr
	gpCoverStrokePathNV                              uintptr
	gpCoverageModulationNV                           uintptr
	gpCoverageModulationTableNV                      uintptr
	gpCreateBuffers                                  uintptr
	gpCreateCommandListsNV                           uintptr
	gpCreateFramebuffers                             uintptr
	gpCreatePerfQueryINTEL                           uintptr
	gpCreateProgram                                  uintptr
	gpCreateProgramPipelines                         uintptr
	gpCreateQueries                                  uintptr
	gpCreateRenderbuffers                            uintptr
	gpCreateSamplers                                 uintptr
	gpCreateShader                                   uintptr
	gpCreateShaderProgramEXT                         uintptr
	gpCreateShaderProgramv                           uintptr
	gpCreateShaderProgramvEXT                        uintptr
	gpCreateStatesNV                                 uintptr
	gpCreateSyncFromCLeventARB                       uintptr
	gpCreateTextures                                 uintptr
	gpCreateTransformFeedbacks                       uintptr
	gpCreateVertexArrays                             uintptr
	gpCullFace                                       uintptr
	gpDebugMessageCallback                           uintptr
	gpDebugMessageCallbackARB                        uintptr
	gpDebugMessageCallbackKHR                        uintptr
	gpDebugMessageControl                            uintptr
	gpDebugMessageControlARB                         uintptr
	gpDebugMessageControlKHR                         uintptr
	gpDebugMessageInsert                             uintptr
	gpDebugMessageInsertARB                          uintptr
	gpDebugMessageInsertKHR                          uintptr
	gpDeleteBuffers                                  uintptr
	gpDeleteCommandListsNV                           uintptr
	gpDeleteFramebuffers                             uintptr
	gpDeleteLists                                    uintptr
	gpDeleteNamedStringARB                           uintptr
	gpDeletePathsNV                                  uintptr
	gpDeletePerfMonitorsAMD                          uintptr
	gpDeletePerfQueryINTEL                           uintptr
	gpDeleteProgram                                  uintptr
	gpDeleteProgramPipelines                         uintptr
	gpDeleteProgramPipelinesEXT                      uintptr
	gpDeleteQueries                                  uintptr
	gpDeleteRenderbuffers                            uintptr
	gpDeleteSamplers                                 uintptr
	gpDeleteShader                                   uintptr
	gpDeleteStatesNV                                 uintptr
	gpDeleteSync                                     uintptr
	gpDeleteTextures                                 uintptr
	gpDeleteTransformFeedbacks                       uintptr
	gpDeleteVertexArrays                             uintptr
	gpDepthFunc                                      uintptr
	gpDepthMask                                      uintptr
	gpDepthRange                                     uintptr
	gpDepthRangeArrayv                               uintptr
	gpDepthRangeIndexed                              uintptr
	gpDepthRangef                                    uintptr
	gpDetachShader                                   uintptr
	gpDisable                                        uintptr
	gpDisableClientState                             uintptr
	gpDisableClientStateIndexedEXT                   uintptr
	gpDisableClientStateiEXT                         uintptr
	gpDisableIndexedEXT                              uintptr
	gpDisableVertexArrayAttrib                       uintptr
	gpDisableVertexArrayAttribEXT                    uintptr
	gpDisableVertexArrayEXT                          uintptr
	gpDisableVertexAttribArray                       uintptr
	gpDisablei                                       uintptr
	gpDispatchCompute                                uintptr
	gpDispatchComputeGroupSizeARB                    uintptr
	gpDispatchComputeIndirect                        uintptr
	gpDrawArrays                                     uintptr
	gpDrawArraysIndirect                             uintptr
	gpDrawArraysInstanced                            uintptr
	gpDrawArraysInstancedARB                         uintptr
	gpDrawArraysInstancedBaseInstance                uintptr
	gpDrawArraysInstancedEXT                         uintptr
	gpDrawBuffer                                     uintptr
	gpDrawBuffers                                    uintptr
	gpDrawCommandsAddressNV                          uintptr
	gpDrawCommandsNV                                 uintptr
	gpDrawCommandsStatesAddressNV                    uintptr
	gpDrawCommandsStatesNV                           uintptr
	gpDrawElements                                   uintptr
	gpDrawElementsBaseVertex                         uintptr
	gpDrawElementsIndirect                           uintptr
	gpDrawElementsInstanced                          uintptr
	gpDrawElementsInstancedARB                       uintptr
	gpDrawElementsInstancedBaseInstance              uintptr
	gpDrawElementsInstancedBaseVertex                uintptr
	gpDrawElementsInstancedBaseVertexBaseInstance    uintptr
	gpDrawElementsInstancedEXT                       uintptr
	gpDrawMeshTasksIndirectNV                        uintptr
	gpDrawMeshTasksNV                                uintptr
	gpDrawPixels                                     uintptr
	gpDrawRangeElements                              uintptr
	gpDrawRangeElementsBaseVertex                    uintptr
	gpDrawTransformFeedback                          uintptr
	gpDrawTransformFeedbackInstanced                 uintptr
	gpDrawTransformFeedbackStream                    uintptr
	gpDrawTransformFeedbackStreamInstanced           uintptr
	gpDrawVkImageNV                                  uintptr
	gpEGLImageTargetTexStorageEXT                    uintptr
	gpEGLImageTargetTextureStorageEXT                uintptr
	gpEdgeFlag                                       uintptr
	gpEdgeFlagFormatNV                               uintptr
	gpEdgeFlagPointer                                uintptr
	gpEdgeFlagv                                      uintptr
	gpEnable                                         uintptr
	gpEnableClientState                              uintptr
	gpEnableClientStateIndexedEXT                    uintptr
	gpEnableClientStateiEXT                          uintptr
	gpEnableIndexedEXT                               uintptr
	gpEnableVertexArrayAttrib                        uintptr
	gpEnableVertexArrayAttribEXT                     uintptr
	gpEnableVertexArrayEXT                           uintptr
	gpEnableVertexAttribArray                        uintptr
	gpEnablei                                        uintptr
	gpEnd                                            uintptr
	gpEndConditionalRender                           uintptr
	gpEndConditionalRenderNV                         uintptr
	gpEndList                                        uintptr
	gpEndPerfMonitorAMD                              uintptr
	gpEndPerfQueryINTEL                              uintptr
	gpEndQuery                                       uintptr
	gpEndQueryIndexed                                uintptr
	gpEndTransformFeedback                           uintptr
	gpEvalCoord1d                                    uintptr
	gpEvalCoord1dv                                   uintptr
	gpEvalCoord1f                                    uintptr
	gpEvalCoord1fv                                   uintptr
	gpEvalCoord2d                                    uintptr
	gpEvalCoord2dv                                   uintptr
	gpEvalCoord2f                                    uintptr
	gpEvalCoord2fv                                   uintptr
	gpEvalMesh1                                      uintptr
	gpEvalMesh2                                      uintptr
	gpEvalPoint1                                     uintptr
	gpEvalPoint2                                     uintptr
	gpEvaluateDepthValuesARB                         uintptr
	gpFeedbackBuffer                                 uintptr
	gpFenceSync                                      uintptr
	gpFinish                                         uintptr
	gpFlush                                          uintptr
	gpFlushMappedBufferRange                         uintptr
	gpFlushMappedNamedBufferRange                    uintptr
	gpFlushMappedNamedBufferRangeEXT                 uintptr
	gpFogCoordFormatNV                               uintptr
	gpFogCoordPointer                                uintptr
	gpFogCoordd                                      uintptr
	gpFogCoorddv                                     uintptr
	gpFogCoordf                                      uintptr
	gpFogCoordfv                                     uintptr
	gpFogf                                           uintptr
	gpFogfv                                          uintptr
	gpFogi                                           uintptr
	gpFogiv                                          uintptr
	gpFragmentCoverageColorNV                        uintptr
	gpFramebufferDrawBufferEXT                       uintptr
	gpFramebufferDrawBuffersEXT                      uintptr
	gpFramebufferFetchBarrierEXT                     uintptr
	gpFramebufferParameteri                          uintptr
	gpFramebufferReadBufferEXT                       uintptr
	gpFramebufferRenderbuffer                        uintptr
	gpFramebufferSampleLocationsfvARB                uintptr
	gpFramebufferSampleLocationsfvNV                 uintptr
	gpFramebufferTexture                             uintptr
	gpFramebufferTexture1D                           uintptr
	gpFramebufferTexture2D                           uintptr
	gpFramebufferTexture3D                           uintptr
	gpFramebufferTextureARB                          uintptr
	gpFramebufferTextureFaceARB                      uintptr
	gpFramebufferTextureLayer                        uintptr
	gpFramebufferTextureLayerARB                     uintptr
	gpFramebufferTextureMultiviewOVR                 uintptr
	gpFrontFace                                      uintptr
	gpFrustum                                        uintptr
	gpGenBuffers                                     uintptr
	gpGenFramebuffers                                uintptr
	gpGenLists                                       uintptr
	gpGenPathsNV                                     uintptr
	gpGenPerfMonitorsAMD                             uintptr
	gpGenProgramPipelines                            uintptr
	gpGenProgramPipelinesEXT                         uintptr
	gpGenQueries                                     uintptr
	gpGenRenderbuffers                               uintptr
	gpGenSamplers                                    uintptr
	gpGenTextures                                    uintptr
	gpGenTransformFeedbacks                          uintptr
	gpGenVertexArrays                                uintptr
	gpGenerateMipmap                                 uintptr
	gpGenerateMultiTexMipmapEXT                      uintptr
	gpGenerateTextureMipmap                          uintptr
	gpGenerateTextureMipmapEXT                       uintptr
	gpGetActiveAtomicCounterBufferiv                 uintptr
	gpGetActiveAttrib                                uintptr
	gpGetActiveSubroutineName                        uintptr
	gpGetActiveSubroutineUniformName                 uintptr
	gpGetActiveSubroutineUniformiv                   uintptr
	gpGetActiveUniform                               uintptr
	gpGetActiveUniformBlockName                      uintptr
	gpGetActiveUniformBlockiv                        uintptr
	gpGetActiveUniformName                           uintptr
	gpGetActiveUniformsiv                            uintptr
	gpGetAttachedShaders                             uintptr
	gpGetAttribLocation                              uintptr
	gpGetBooleanIndexedvEXT                          uintptr
	gpGetBooleani_v                                  uintptr
	gpGetBooleanv                                    uintptr
	gpGetBufferParameteri64v                         uintptr
	gpGetBufferParameteriv                           uintptr
	gpGetBufferParameterui64vNV                      uintptr
	gpGetBufferPointerv                              uintptr
	gpGetBufferSubData                               uintptr
	gpGetClipPlane                                   uintptr
	gpGetCommandHeaderNV                             uintptr
	gpGetCompressedMultiTexImageEXT                  uintptr
	gpGetCompressedTexImage                          uintptr
	gpGetCompressedTextureImage                      uintptr
	gpGetCompressedTextureImageEXT                   uintptr
	gpGetCompressedTextureSubImage                   uintptr
	gpGetCoverageModulationTableNV                   uintptr
	gpGetDebugMessageLog                             uintptr
	gpGetDebugMessageLogARB                          uintptr
	gpGetDebugMessageLogKHR                          uintptr
	gpGetDoubleIndexedvEXT                           uintptr
	gpGetDoublei_v                                   uintptr
	gpGetDoublei_vEXT                                uintptr
	gpGetDoublev                                     uintptr
	gpGetError                                       uintptr
	gpGetFirstPerfQueryIdINTEL                       uintptr
	gpGetFloatIndexedvEXT                            uintptr
	gpGetFloati_v                                    uintptr
	gpGetFloati_vEXT                                 uintptr
	gpGetFloatv                                      uintptr
	gpGetFragDataIndex                               uintptr
	gpGetFragDataLocation                            uintptr
	gpGetFramebufferAttachmentParameteriv            uintptr
	gpGetFramebufferParameteriv                      uintptr
	gpGetFramebufferParameterivEXT                   uintptr
	gpGetGraphicsResetStatus                         uintptr
	gpGetGraphicsResetStatusARB                      uintptr
	gpGetGraphicsResetStatusKHR                      uintptr
	gpGetImageHandleARB                              uintptr
	gpGetImageHandleNV                               uintptr
	gpGetInteger64i_v                                uintptr
	gpGetInteger64v                                  uintptr
	gpGetIntegerIndexedvEXT                          uintptr
	gpGetIntegeri_v                                  uintptr
	gpGetIntegerui64i_vNV                            uintptr
	gpGetIntegerui64vNV                              uintptr
	gpGetIntegerv                                    uintptr
	gpGetInternalformatSampleivNV                    uintptr
	gpGetInternalformati64v                          uintptr
	gpGetInternalformativ                            uintptr
	gpGetLightfv                                     uintptr
	gpGetLightiv                                     uintptr
	gpGetMapdv                                       uintptr
	gpGetMapfv                                       uintptr
	gpGetMapiv                                       uintptr
	gpGetMaterialfv                                  uintptr
	gpGetMaterialiv                                  uintptr
	gpGetMemoryObjectDetachedResourcesuivNV          uintptr
	gpGetMultiTexEnvfvEXT                            uintptr
	gpGetMultiTexEnvivEXT                            uintptr
	gpGetMultiTexGendvEXT                            uintptr
	gpGetMultiTexGenfvEXT                            uintptr
	gpGetMultiTexGenivEXT                            uintptr
	gpGetMultiTexImageEXT                            uintptr
	gpGetMultiTexLevelParameterfvEXT                 uintptr
	gpGetMultiTexLevelParameterivEXT                 uintptr
	gpGetMultiTexParameterIivEXT                     uintptr
	gpGetMultiTexParameterIuivEXT                    uintptr
	gpGetMultiTexParameterfvEXT                      uintptr
	gpGetMultiTexParameterivEXT                      uintptr
	gpGetMultisamplefv                               uintptr
	gpGetNamedBufferParameteri64v                    uintptr
	gpGetNamedBufferParameteriv                      uintptr
	gpGetNamedBufferParameterivEXT                   uintptr
	gpGetNamedBufferParameterui64vNV                 uintptr
	gpGetNamedBufferPointerv                         uintptr
	gpGetNamedBufferPointervEXT                      uintptr
	gpGetNamedBufferSubData                          uintptr
	gpGetNamedBufferSubDataEXT                       uintptr
	gpGetNamedFramebufferAttachmentParameteriv       uintptr
	gpGetNamedFramebufferAttachmentParameterivEXT    uintptr
	gpGetNamedFramebufferParameteriv                 uintptr
	gpGetNamedFramebufferParameterivEXT              uintptr
	gpGetNamedProgramLocalParameterIivEXT            uintptr
	gpGetNamedProgramLocalParameterIuivEXT           uintptr
	gpGetNamedProgramLocalParameterdvEXT             uintptr
	gpGetNamedProgramLocalParameterfvEXT             uintptr
	gpGetNamedProgramStringEXT                       uintptr
	gpGetNamedProgramivEXT                           uintptr
	gpGetNamedRenderbufferParameteriv                uintptr
	gpGetNamedRenderbufferParameterivEXT             uintptr
	gpGetNamedStringARB                              uintptr
	gpGetNamedStringivARB                            uintptr
	gpGetNextPerfQueryIdINTEL                        uintptr
	gpGetObjectLabel                                 uintptr
	gpGetObjectLabelEXT                              uintptr
	gpGetObjectLabelKHR                              uintptr
	gpGetObjectPtrLabel                              uintptr
	gpGetObjectPtrLabelKHR                           uintptr
	gpGetPathCommandsNV                              uintptr
	gpGetPathCoordsNV                                uintptr
	gpGetPathDashArrayNV                             uintptr
	gpGetPathLengthNV                                uintptr
	gpGetPathMetricRangeNV                           uintptr
	gpGetPathMetricsNV                               uintptr
	gpGetPathParameterfvNV                           uintptr
	gpGetPathParameterivNV                           uintptr
	gpGetPathSpacingNV                               uintptr
	gpGetPerfCounterInfoINTEL                        uintptr
	gpGetPerfMonitorCounterDataAMD                   uintptr
	gpGetPerfMonitorCounterInfoAMD                   uintptr
	gpGetPerfMonitorCounterStringAMD                 uintptr
	gpGetPerfMonitorCountersAMD                      uintptr
	gpGetPerfMonitorGroupStringAMD                   uintptr
	gpGetPerfMonitorGroupsAMD                        uintptr
	gpGetPerfQueryDataINTEL                          uintptr
	gpGetPerfQueryIdByNameINTEL                      uintptr
	gpGetPerfQueryInfoINTEL                          uintptr
	gpGetPixelMapfv                                  uintptr
	gpGetPixelMapuiv                                 uintptr
	gpGetPixelMapusv                                 uintptr
	gpGetPointerIndexedvEXT                          uintptr
	gpGetPointeri_vEXT                               uintptr
	gpGetPointerv                                    uintptr
	gpGetPointervKHR                                 uintptr
	gpGetPolygonStipple                              uintptr
	gpGetProgramBinary                               uintptr
	gpGetProgramInfoLog                              uintptr
	gpGetProgramInterfaceiv                          uintptr
	gpGetProgramPipelineInfoLog                      uintptr
	gpGetProgramPipelineInfoLogEXT                   uintptr
	gpGetProgramPipelineiv                           uintptr
	gpGetProgramPipelineivEXT                        uintptr
	gpGetProgramResourceIndex                        uintptr
	gpGetProgramResourceLocation                     uintptr
	gpGetProgramResourceLocationIndex                uintptr
	gpGetProgramResourceName                         uintptr
	gpGetProgramResourcefvNV                         uintptr
	gpGetProgramResourceiv                           uintptr
	gpGetProgramStageiv                              uintptr
	gpGetProgramiv                                   uintptr
	gpGetQueryBufferObjecti64v                       uintptr
	gpGetQueryBufferObjectiv                         uintptr
	gpGetQueryBufferObjectui64v                      uintptr
	gpGetQueryBufferObjectuiv                        uintptr
	gpGetQueryIndexediv                              uintptr
	gpGetQueryObjecti64v                             uintptr
	gpGetQueryObjectiv                               uintptr
	gpGetQueryObjectui64v                            uintptr
	gpGetQueryObjectuiv                              uintptr
	gpGetQueryiv                                     uintptr
	gpGetRenderbufferParameteriv                     uintptr
	gpGetSamplerParameterIiv                         uintptr
	gpGetSamplerParameterIuiv                        uintptr
	gpGetSamplerParameterfv                          uintptr
	gpGetSamplerParameteriv                          uintptr
	gpGetShaderInfoLog                               uintptr
	gpGetShaderPrecisionFormat                       uintptr
	gpGetShaderSource                                uintptr
	gpGetShaderiv                                    uintptr
	gpGetShadingRateImagePaletteNV                   uintptr
	gpGetShadingRateSampleLocationivNV               uintptr
	gpGetStageIndexNV                                uintptr
	gpGetString                                      uintptr
	gpGetStringi                                     uintptr
	gpGetSubroutineIndex                             uintptr
	gpGetSubroutineUniformLocation                   uintptr
	gpGetSynciv                                      uintptr
	gpGetTexEnvfv                                    uintptr
	gpGetTexEnviv                                    uintptr
	gpGetTexGendv                                    uintptr
	gpGetTexGenfv                                    uintptr
	gpGetTexGeniv                                    uintptr
	gpGetTexImage                                    uintptr
	gpGetTexLevelParameterfv                         uintptr
	gpGetTexLevelParameteriv                         uintptr
	gpGetTexParameterIiv                             uintptr
	gpGetTexParameterIuiv                            uintptr
	gpGetTexParameterfv                              uintptr
	gpGetTexParameteriv                              uintptr
	gpGetTextureHandleARB                            uintptr
	gpGetTextureHandleNV                             uintptr
	gpGetTextureImage                                uintptr
	gpGetTextureImageEXT                             uintptr
	gpGetTextureLevelParameterfv                     uintptr
	gpGetTextureLevelParameterfvEXT                  uintptr
	gpGetTextureLevelParameteriv                     uintptr
	gpGetTextureLevelParameterivEXT                  uintptr
	gpGetTextureParameterIiv                         uintptr
	gpGetTextureParameterIivEXT                      uintptr
	gpGetTextureParameterIuiv                        uintptr
	gpGetTextureParameterIuivEXT                     uintptr
	gpGetTextureParameterfv                          uintptr
	gpGetTextureParameterfvEXT                       uintptr
	gpGetTextureParameteriv                          uintptr
	gpGetTextureParameterivEXT                       uintptr
	gpGetTextureSamplerHandleARB                     uintptr
	gpGetTextureSamplerHandleNV                      uintptr
	gpGetTextureSubImage                             uintptr
	gpGetTransformFeedbackVarying                    uintptr
	gpGetTransformFeedbacki64_v                      uintptr
	gpGetTransformFeedbacki_v                        uintptr
	gpGetTransformFeedbackiv                         uintptr
	gpGetUniformBlockIndex                           uintptr
	gpGetUniformIndices                              uintptr
	gpGetUniformLocation                             uintptr
	gpGetUniformSubroutineuiv                        uintptr
	gpGetUniformdv                                   uintptr
	gpGetUniformfv                                   uintptr
	gpGetUniformi64vARB                              uintptr
	gpGetUniformi64vNV                               uintptr
	gpGetUniformiv                                   uintptr
	gpGetUniformui64vARB                             uintptr
	gpGetUniformui64vNV                              uintptr
	gpGetUniformuiv                                  uintptr
	gpGetVertexArrayIndexed64iv                      uintptr
	gpGetVertexArrayIndexediv                        uintptr
	gpGetVertexArrayIntegeri_vEXT                    uintptr
	gpGetVertexArrayIntegervEXT                      uintptr
	gpGetVertexArrayPointeri_vEXT                    uintptr
	gpGetVertexArrayPointervEXT                      uintptr
	gpGetVertexArrayiv                               uintptr
	gpGetVertexAttribIiv                             uintptr
	gpGetVertexAttribIuiv                            uintptr
	gpGetVertexAttribLdv                             uintptr
	gpGetVertexAttribLi64vNV                         uintptr
	gpGetVertexAttribLui64vARB                       uintptr
	gpGetVertexAttribLui64vNV                        uintptr
	gpGetVertexAttribPointerv                        uintptr
	gpGetVertexAttribdv                              uintptr
	gpGetVertexAttribfv                              uintptr
	gpGetVertexAttribiv                              uintptr
	gpGetVkProcAddrNV                                uintptr
	gpGetnCompressedTexImage                         uintptr
	gpGetnCompressedTexImageARB                      uintptr
	gpGetnTexImage                                   uintptr
	gpGetnTexImageARB                                uintptr
	gpGetnUniformdv                                  uintptr
	gpGetnUniformdvARB                               uintptr
	gpGetnUniformfv                                  uintptr
	gpGetnUniformfvARB                               uintptr
	gpGetnUniformfvKHR                               uintptr
	gpGetnUniformi64vARB                             uintptr
	gpGetnUniformiv                                  uintptr
	gpGetnUniformivARB                               uintptr
	gpGetnUniformivKHR                               uintptr
	gpGetnUniformui64vARB                            uintptr
	gpGetnUniformuiv                                 uintptr
	gpGetnUniformuivARB                              uintptr
	gpGetnUniformuivKHR                              uintptr
	gpHint                                           uintptr
	gpIndexFormatNV                                  uintptr
	gpIndexMask                                      uintptr
	gpIndexPointer                                   uintptr
	gpIndexd                                         uintptr
	gpIndexdv                                        uintptr
	gpIndexf                                         uintptr
	gpIndexfv                                        uintptr
	gpIndexi                                         uintptr
	gpIndexiv                                        uintptr
	gpIndexs                                         uintptr
	gpIndexsv                                        uintptr
	gpIndexub                                        uintptr
	gpIndexubv                                       uintptr
	gpInitNames                                      uintptr
	gpInsertEventMarkerEXT                           uintptr
	gpInterleavedArrays                              uintptr
	gpInterpolatePathsNV                             uintptr
	gpInvalidateBufferData                           uintptr
	gpInvalidateBufferSubData                        uintptr
	gpInvalidateFramebuffer                          uintptr
	gpInvalidateNamedFramebufferData                 uintptr
	gpInvalidateNamedFramebufferSubData              uintptr
	gpInvalidateSubFramebuffer                       uintptr
	gpInvalidateTexImage                             uintptr
	gpInvalidateTexSubImage                          uintptr
	gpIsBuffer                                       uintptr
	gpIsBufferResidentNV                             uintptr
	gpIsCommandListNV                                uintptr
	gpIsEnabled                                      uintptr
	gpIsEnabledIndexedEXT                            uintptr
	gpIsEnabledi                                     uintptr
	gpIsFramebuffer                                  uintptr
	gpIsImageHandleResidentARB                       uintptr
	gpIsImageHandleResidentNV                        uintptr
	gpIsList                                         uintptr
	gpIsNamedBufferResidentNV                        uintptr
	gpIsNamedStringARB                               uintptr
	gpIsPathNV                                       uintptr
	gpIsPointInFillPathNV                            uintptr
	gpIsPointInStrokePathNV                          uintptr
	gpIsProgram                                      uintptr
	gpIsProgramPipeline                              uintptr
	gpIsProgramPipelineEXT                           uintptr
	gpIsQuery                                        uintptr
	gpIsRenderbuffer                                 uintptr
	gpIsSampler                                      uintptr
	gpIsShader                                       uintptr
	gpIsStateNV                                      uintptr
	gpIsSync                                         uintptr
	gpIsTexture                                      uintptr
	gpIsTextureHandleResidentARB                     uintptr
	gpIsTextureHandleResidentNV                      uintptr
	gpIsTransformFeedback                            uintptr
	gpIsVertexArray                                  uintptr
	gpLabelObjectEXT                                 uintptr
	gpLightModelf                                    uintptr
	gpLightModelfv                                   uintptr
	gpLightModeli                                    uintptr
	gpLightModeliv                                   uintptr
	gpLightf                                         uintptr
	gpLightfv                                        uintptr
	gpLighti                                         uintptr
	gpLightiv                                        uintptr
	gpLineStipple                                    uintptr
	gpLineWidth                                      uintptr
	gpLinkProgram                                    uintptr
	gpListBase                                       uintptr
	gpListDrawCommandsStatesClientNV                 uintptr
	gpLoadIdentity                                   uintptr
	gpLoadMatrixd                                    uintptr
	gpLoadMatrixf                                    uintptr
	gpLoadName                                       uintptr
	gpLoadTransposeMatrixd                           uintptr
	gpLoadTransposeMatrixf                           uintptr
	gpLogicOp                                        uintptr
	gpMakeBufferNonResidentNV                        uintptr
	gpMakeBufferResidentNV                           uintptr
	gpMakeImageHandleNonResidentARB                  uintptr
	gpMakeImageHandleNonResidentNV                   uintptr
	gpMakeImageHandleResidentARB                     uintptr
	gpMakeImageHandleResidentNV                      uintptr
	gpMakeNamedBufferNonResidentNV                   uintptr
	gpMakeNamedBufferResidentNV                      uintptr
	gpMakeTextureHandleNonResidentARB                uintptr
	gpMakeTextureHandleNonResidentNV                 uintptr
	gpMakeTextureHandleResidentARB                   uintptr
	gpMakeTextureHandleResidentNV                    uintptr
	gpMap1d                                          uintptr
	gpMap1f                                          uintptr
	gpMap2d                                          uintptr
	gpMap2f                                          uintptr
	gpMapBuffer                                      uintptr
	gpMapBufferRange                                 uintptr
	gpMapGrid1d                                      uintptr
	gpMapGrid1f                                      uintptr
	gpMapGrid2d                                      uintptr
	gpMapGrid2f                                      uintptr
	gpMapNamedBuffer                                 uintptr
	gpMapNamedBufferEXT                              uintptr
	gpMapNamedBufferRange                            uintptr
	gpMapNamedBufferRangeEXT                         uintptr
	gpMaterialf                                      uintptr
	gpMaterialfv                                     uintptr
	gpMateriali                                      uintptr
	gpMaterialiv                                     uintptr
	gpMatrixFrustumEXT                               uintptr
	gpMatrixLoad3x2fNV                               uintptr
	gpMatrixLoad3x3fNV                               uintptr
	gpMatrixLoadIdentityEXT                          uintptr
	gpMatrixLoadTranspose3x3fNV                      uintptr
	gpMatrixLoadTransposedEXT                        uintptr
	gpMatrixLoadTransposefEXT                        uintptr
	gpMatrixLoaddEXT                                 uintptr
	gpMatrixLoadfEXT                                 uintptr
	gpMatrixMode                                     uintptr
	gpMatrixMult3x2fNV                               uintptr
	gpMatrixMult3x3fNV                               uintptr
	gpMatrixMultTranspose3x3fNV                      uintptr
	gpMatrixMultTransposedEXT                        uintptr
	gpMatrixMultTransposefEXT                        uintptr
	gpMatrixMultdEXT                                 uintptr
	gpMatrixMultfEXT                                 uintptr
	gpMatrixOrthoEXT                                 uintptr
	gpMatrixPopEXT                                   uintptr
	gpMatrixPushEXT                                  uintptr
	gpMatrixRotatedEXT                               uintptr
	gpMatrixRotatefEXT                               uintptr
	gpMatrixScaledEXT                                uintptr
	gpMatrixScalefEXT                                uintptr
	gpMatrixTranslatedEXT                            uintptr
	gpMatrixTranslatefEXT                            uintptr
	gpMaxShaderCompilerThreadsARB                    uintptr
	gpMaxShaderCompilerThreadsKHR                    uintptr
	gpMemoryBarrier                                  uintptr
	gpMemoryBarrierByRegion                          uintptr
	gpMinSampleShading                               uintptr
	gpMinSampleShadingARB                            uintptr
	gpMultMatrixd                                    uintptr
	gpMultMatrixf                                    uintptr
	gpMultTransposeMatrixd                           uintptr
	gpMultTransposeMatrixf                           uintptr
	gpMultiDrawArrays                                uintptr
	gpMultiDrawArraysIndirect                        uintptr
	gpMultiDrawArraysIndirectBindlessCountNV         uintptr
	gpMultiDrawArraysIndirectBindlessNV              uintptr
	gpMultiDrawArraysIndirectCount                   uintptr
	gpMultiDrawArraysIndirectCountARB                uintptr
	gpMultiDrawElements                              uintptr
	gpMultiDrawElementsBaseVertex                    uintptr
	gpMultiDrawElementsIndirect                      uintptr
	gpMultiDrawElementsIndirectBindlessCountNV       uintptr
	gpMultiDrawElementsIndirectBindlessNV            uintptr
	gpMultiDrawElementsIndirectCount                 uintptr
	gpMultiDrawElementsIndirectCountARB              uintptr
	gpMultiDrawMeshTasksIndirectCountNV              uintptr
	gpMultiDrawMeshTasksIndirectNV                   uintptr
	gpMultiTexBufferEXT                              uintptr
	gpMultiTexCoord1d                                uintptr
	gpMultiTexCoord1dv                               uintptr
	gpMultiTexCoord1f                                uintptr
	gpMultiTexCoord1fv                               uintptr
	gpMultiTexCoord1i                                uintptr
	gpMultiTexCoord1iv                               uintptr
	gpMultiTexCoord1s                                uintptr
	gpMultiTexCoord1sv                               uintptr
	gpMultiTexCoord2d                                uintptr
	gpMultiTexCoord2dv                               uintptr
	gpMultiTexCoord2f                                uintptr
	gpMultiTexCoord2fv                               uintptr
	gpMultiTexCoord2i                                uintptr
	gpMultiTexCoord2iv                               uintptr
	gpMultiTexCoord2s                                uintptr
	gpMultiTexCoord2sv                               uintptr
	gpMultiTexCoord3d                                uintptr
	gpMultiTexCoord3dv                               uintptr
	gpMultiTexCoord3f                                uintptr
	gpMultiTexCoord3fv                               uintptr
	gpMultiTexCoord3i                                uintptr
	gpMultiTexCoord3iv                               uintptr
	gpMultiTexCoord3s                                uintptr
	gpMultiTexCoord3sv                               uintptr
	gpMultiTexCoord4d                                uintptr
	gpMultiTexCoord4dv                               uintptr
	gpMultiTexCoord4f                                uintptr
	gpMultiTexCoord4fv                               uintptr
	gpMultiTexCoord4i                                uintptr
	gpMultiTexCoord4iv                               uintptr
	gpMultiTexCoord4s                                uintptr
	gpMultiTexCoord4sv                               uintptr
	gpMultiTexCoordPointerEXT                        uintptr
	gpMultiTexEnvfEXT                                uintptr
	gpMultiTexEnvfvEXT                               uintptr
	gpMultiTexEnviEXT                                uintptr
	gpMultiTexEnvivEXT                               uintptr
	gpMultiTexGendEXT                                uintptr
	gpMultiTexGendvEXT                               uintptr
	gpMultiTexGenfEXT                                uintptr
	gpMultiTexGenfvEXT                               uintptr
	gpMultiTexGeniEXT                                uintptr
	gpMultiTexGenivEXT                               uintptr
	gpMultiTexImage1DEXT                             uintptr
	gpMultiTexImage2DEXT                             uintptr
	gpMultiTexImage3DEXT                             uintptr
	gpMultiTexParameterIivEXT                        uintptr
	gpMultiTexParameterIuivEXT                       uintptr
	gpMultiTexParameterfEXT                          uintptr
	gpMultiTexParameterfvEXT                         uintptr
	gpMultiTexParameteriEXT                          uintptr
	gpMultiTexParameterivEXT                         uintptr
	gpMultiTexRenderbufferEXT                        uintptr
	gpMultiTexSubImage1DEXT                          uintptr
	gpMultiTexSubImage2DEXT                          uintptr
	gpMultiTexSubImage3DEXT                          uintptr
	gpNamedBufferAttachMemoryNV                      uintptr
	gpNamedBufferData                                uintptr
	gpNamedBufferDataEXT                             uintptr
	gpNamedBufferPageCommitmentARB                   uintptr
	gpNamedBufferPageCommitmentEXT                   uintptr
	gpNamedBufferStorage                             uintptr
	gpNamedBufferStorageEXT                          uintptr
	gpNamedBufferSubData                             uintptr
	gpNamedBufferSubDataEXT                          uintptr
	gpNamedCopyBufferSubDataEXT                      uintptr
	gpNamedFramebufferDrawBuffer                     uintptr
	gpNamedFramebufferDrawBuffers                    uintptr
	gpNamedFramebufferParameteri                     uintptr
	gpNamedFramebufferParameteriEXT                  uintptr
	gpNamedFramebufferReadBuffer                     uintptr
	gpNamedFramebufferRenderbuffer                   uintptr
	gpNamedFramebufferRenderbufferEXT                uintptr
	gpNamedFramebufferSampleLocationsfvARB           uintptr
	gpNamedFramebufferSampleLocationsfvNV            uintptr
	gpNamedFramebufferTexture                        uintptr
	gpNamedFramebufferTexture1DEXT                   uintptr
	gpNamedFramebufferTexture2DEXT                   uintptr
	gpNamedFramebufferTexture3DEXT                   uintptr
	gpNamedFramebufferTextureEXT                     uintptr
	gpNamedFramebufferTextureFaceEXT                 uintptr
	gpNamedFramebufferTextureLayer                   uintptr
	gpNamedFramebufferTextureLayerEXT                uintptr
	gpNamedProgramLocalParameter4dEXT                uintptr
	gpNamedProgramLocalParameter4dvEXT               uintptr
	gpNamedProgramLocalParameter4fEXT                uintptr
	gpNamedProgramLocalParameter4fvEXT               uintptr
	gpNamedProgramLocalParameterI4iEXT               uintptr
	gpNamedProgramLocalParameterI4ivEXT              uintptr
	gpNamedProgramLocalParameterI4uiEXT              uintptr
	gpNamedProgramLocalParameterI4uivEXT             uintptr
	gpNamedProgramLocalParameters4fvEXT              uintptr
	gpNamedProgramLocalParametersI4ivEXT             uintptr
	gpNamedProgramLocalParametersI4uivEXT            uintptr
	gpNamedProgramStringEXT                          uintptr
	gpNamedRenderbufferStorage                       uintptr
	gpNamedRenderbufferStorageEXT                    uintptr
	gpNamedRenderbufferStorageMultisample            uintptr
	gpNamedRenderbufferStorageMultisampleAdvancedAMD uintptr
	gpNamedRenderbufferStorageMultisampleCoverageEXT uintptr
	gpNamedRenderbufferStorageMultisampleEXT         uintptr
	gpNamedStringARB                                 uintptr
	gpNewList                                        uintptr
	gpNormal3b                                       uintptr
	gpNormal3bv                                      uintptr
	gpNormal3d                                       uintptr
	gpNormal3dv                                      uintptr
	gpNormal3f                                       uintptr
	gpNormal3fv                                      uintptr
	gpNormal3i                                       uintptr
	gpNormal3iv                                      uintptr
	gpNormal3s                                       uintptr
	gpNormal3sv                                      uintptr
	gpNormalFormatNV                                 uintptr
	gpNormalPointer                                  uintptr
	gpObjectLabel                                    uintptr
	gpObjectLabelKHR                                 uintptr
	gpObjectPtrLabel                                 uintptr
	gpObjectPtrLabelKHR                              uintptr
	gpOrtho                                          uintptr
	gpPassThrough                                    uintptr
	gpPatchParameterfv                               uintptr
	gpPatchParameteri                                uintptr
	gpPathCommandsNV                                 uintptr
	gpPathCoordsNV                                   uintptr
	gpPathCoverDepthFuncNV                           uintptr
	gpPathDashArrayNV                                uintptr
	gpPathGlyphIndexArrayNV                          uintptr
	gpPathGlyphIndexRangeNV                          uintptr
	gpPathGlyphRangeNV                               uintptr
	gpPathGlyphsNV                                   uintptr
	gpPathMemoryGlyphIndexArrayNV                    uintptr
	gpPathParameterfNV                               uintptr
	gpPathParameterfvNV                              uintptr
	gpPathParameteriNV                               uintptr
	gpPathParameterivNV                              uintptr
	gpPathStencilDepthOffsetNV                       uintptr
	gpPathStencilFuncNV                              uintptr
	gpPathStringNV                                   uintptr
	gpPathSubCommandsNV                              uintptr
	gpPathSubCoordsNV                                uintptr
	gpPauseTransformFeedback                         uintptr
	gpPixelMapfv                                     uintptr
	gpPixelMapuiv                                    uintptr
	gpPixelMapusv                                    uintptr
	gpPixelStoref                                    uintptr
	gpPixelStorei                                    uintptr
	gpPixelTransferf                                 uintptr
	gpPixelTransferi                                 uintptr
	gpPixelZoom                                      uintptr
	gpPointAlongPathNV                               uintptr
	gpPointParameterf                                uintptr
	gpPointParameterfv                               uintptr
	gpPointParameteri                                uintptr
	gpPointParameteriv                               uintptr
	gpPointSize                                      uintptr
	gpPolygonMode                                    uintptr
	gpPolygonOffset                                  uintptr
	gpPolygonOffsetClamp                             uintptr
	gpPolygonOffsetClampEXT                          uintptr
	gpPolygonStipple                                 uintptr
	gpPopAttrib                                      uintptr
	gpPopClientAttrib                                uintptr
	gpPopDebugGroup                                  uintptr
	gpPopDebugGroupKHR                               uintptr
	gpPopGroupMarkerEXT                              uintptr
	gpPopMatrix                                      uintptr
	gpPopName                                        uintptr
	gpPrimitiveBoundingBoxARB                        uintptr
	gpPrimitiveRestartIndex                          uintptr
	gpPrioritizeTextures                             uintptr
	gpProgramBinary                                  uintptr
	gpProgramParameteri                              uintptr
	gpProgramParameteriARB                           uintptr
	gpProgramParameteriEXT                           uintptr
	gpProgramPathFragmentInputGenNV                  uintptr
	gpProgramUniform1d                               uintptr
	gpProgramUniform1dEXT                            uintptr
	gpProgramUniform1dv                              uintptr
	gpProgramUniform1dvEXT                           uintptr
	gpProgramUniform1f                               uintptr
	gpProgramUniform1fEXT                            uintptr
	gpProgramUniform1fv                              uintptr
	gpProgramUniform1fvEXT                           uintptr
	gpProgramUniform1i                               uintptr
	gpProgramUniform1i64ARB                          uintptr
	gpProgramUniform1i64NV                           uintptr
	gpProgramUniform1i64vARB                         uintptr
	gpProgramUniform1i64vNV                          uintptr
	gpProgramUniform1iEXT                            uintptr
	gpProgramUniform1iv                              uintptr
	gpProgramUniform1ivEXT                           uintptr
	gpProgramUniform1ui                              uintptr
	gpProgramUniform1ui64ARB                         uintptr
	gpProgramUniform1ui64NV                          uintptr
	gpProgramUniform1ui64vARB                        uintptr
	gpProgramUniform1ui64vNV                         uintptr
	gpProgramUniform1uiEXT                           uintptr
	gpProgramUniform1uiv                             uintptr
	gpProgramUniform1uivEXT                          uintptr
	gpProgramUniform2d                               uintptr
	gpProgramUniform2dEXT                            uintptr
	gpProgramUniform2dv                              uintptr
	gpProgramUniform2dvEXT                           uintptr
	gpProgramUniform2f                               uintptr
	gpProgramUniform2fEXT                            uintptr
	gpProgramUniform2fv                              uintptr
	gpProgramUniform2fvEXT                           uintptr
	gpProgramUniform2i                               uintptr
	gpProgramUniform2i64ARB                          uintptr
	gpProgramUniform2i64NV                           uintptr
	gpProgramUniform2i64vARB                         uintptr
	gpProgramUniform2i64vNV                          uintptr
	gpProgramUniform2iEXT                            uintptr
	gpProgramUniform2iv                              uintptr
	gpProgramUniform2ivEXT                           uintptr
	gpProgramUniform2ui                              uintptr
	gpProgramUniform2ui64ARB                         uintptr
	gpProgramUniform2ui64NV                          uintptr
	gpProgramUniform2ui64vARB                        uintptr
	gpProgramUniform2ui64vNV                         uintptr
	gpProgramUniform2uiEXT                           uintptr
	gpProgramUniform2uiv                             uintptr
	gpProgramUniform2uivEXT                          uintptr
	gpProgramUniform3d                               uintptr
	gpProgramUniform3dEXT                            uintptr
	gpProgramUniform3dv                              uintptr
	gpProgramUniform3dvEXT                           uintptr
	gpProgramUniform3f                               uintptr
	gpProgramUniform3fEXT                            uintptr
	gpProgramUniform3fv                              uintptr
	gpProgramUniform3fvEXT                           uintptr
	gpProgramUniform3i                               uintptr
	gpProgramUniform3i64ARB                          uintptr
	gpProgramUniform3i64NV                           uintptr
	gpProgramUniform3i64vARB                         uintptr
	gpProgramUniform3i64vNV                          uintptr
	gpProgramUniform3iEXT                            uintptr
	gpProgramUniform3iv                              uintptr
	gpProgramUniform3ivEXT                           uintptr
	gpProgramUniform3ui                              uintptr
	gpProgramUniform3ui64ARB                         uintptr
	gpProgramUniform3ui64NV                          uintptr
	gpProgramUniform3ui64vARB                        uintptr
	gpProgramUniform3ui64vNV                         uintptr
	gpProgramUniform3uiEXT                           uintptr
	gpProgramUniform3uiv                             uintptr
	gpProgramUniform3uivEXT                          uintptr
	gpProgramUniform4d                               uintptr
	gpProgramUniform4dEXT                            uintptr
	gpProgramUniform4dv                              uintptr
	gpProgramUniform4dvEXT                           uintptr
	gpProgramUniform4f                               uintptr
	gpProgramUniform4fEXT                            uintptr
	gpProgramUniform4fv                              uintptr
	gpProgramUniform4fvEXT                           uintptr
	gpProgramUniform4i                               uintptr
	gpProgramUniform4i64ARB                          uintptr
	gpProgramUniform4i64NV                           uintptr
	gpProgramUniform4i64vARB                         uintptr
	gpProgramUniform4i64vNV                          uintptr
	gpProgramUniform4iEXT                            uintptr
	gpProgramUniform4iv                              uintptr
	gpProgramUniform4ivEXT                           uintptr
	gpProgramUniform4ui                              uintptr
	gpProgramUniform4ui64ARB                         uintptr
	gpProgramUniform4ui64NV                          uintptr
	gpProgramUniform4ui64vARB                        uintptr
	gpProgramUniform4ui64vNV                         uintptr
	gpProgramUniform4uiEXT                           uintptr
	gpProgramUniform4uiv                             uintptr
	gpProgramUniform4uivEXT                          uintptr
	gpProgramUniformHandleui64ARB                    uintptr
	gpProgramUniformHandleui64NV                     uintptr
	gpProgramUniformHandleui64vARB                   uintptr
	gpProgramUniformHandleui64vNV                    uintptr
	gpProgramUniformMatrix2dv                        uintptr
	gpProgramUniformMatrix2dvEXT                     uintptr
	gpProgramUniformMatrix2fv                        uintptr
	gpProgramUniformMatrix2fvEXT                     uintptr
	gpProgramUniformMatrix2x3dv                      uintptr
	gpProgramUniformMatrix2x3dvEXT                   uintptr
	gpProgramUniformMatrix2x3fv                      uintptr
	gpProgramUniformMatrix2x3fvEXT                   uintptr
	gpProgramUniformMatrix2x4dv                      uintptr
	gpProgramUniformMatrix2x4dvEXT                   uintptr
	gpProgramUniformMatrix2x4fv                      uintptr
	gpProgramUniformMatrix2x4fvEXT                   uintptr
	gpProgramUniformMatrix3dv                        uintptr
	gpProgramUniformMatrix3dvEXT                     uintptr
	gpProgramUniformMatrix3fv                        uintptr
	gpProgramUniformMatrix3fvEXT                     uintptr
	gpProgramUniformMatrix3x2dv                      uintptr
	gpProgramUniformMatrix3x2dvEXT                   uintptr
	gpProgramUniformMatrix3x2fv                      uintptr
	gpProgramUniformMatrix3x2fvEXT                   uintptr
	gpProgramUniformMatrix3x4dv                      uintptr
	gpProgramUniformMatrix3x4dvEXT                   uintptr
	gpProgramUniformMatrix3x4fv                      uintptr
	gpProgramUniformMatrix3x4fvEXT                   uintptr
	gpProgramUniformMatrix4dv                        uintptr
	gpProgramUniformMatrix4dvEXT                     uintptr
	gpProgramUniformMatrix4fv                        uintptr
	gpProgramUniformMatrix4fvEXT                     uintptr
	gpProgramUniformMatrix4x2dv                      uintptr
	gpProgramUniformMatrix4x2dvEXT                   uintptr
	gpProgramUniformMatrix4x2fv                      uintptr
	gpProgramUniformMatrix4x2fvEXT                   uintptr
	gpProgramUniformMatrix4x3dv                      uintptr
	gpProgramUniformMatrix4x3dvEXT                   uintptr
	gpProgramUniformMatrix4x3fv                      uintptr
	gpProgramUniformMatrix4x3fvEXT                   uintptr
	gpProgramUniformui64NV                           uintptr
	gpProgramUniformui64vNV                          uintptr
	gpProvokingVertex                                uintptr
	gpPushAttrib                                     uintptr
	gpPushClientAttrib                               uintptr
	gpPushClientAttribDefaultEXT                     uintptr
	gpPushDebugGroup                                 uintptr
	gpPushDebugGroupKHR                              uintptr
	gpPushGroupMarkerEXT                             uintptr
	gpPushMatrix                                     uintptr
	gpPushName                                       uintptr
	gpQueryCounter                                   uintptr
	gpRasterPos2d                                    uintptr
	gpRasterPos2dv                                   uintptr
	gpRasterPos2f                                    uintptr
	gpRasterPos2fv                                   uintptr
	gpRasterPos2i                                    uintptr
	gpRasterPos2iv                                   uintptr
	gpRasterPos2s                                    uintptr
	gpRasterPos2sv                                   uintptr
	gpRasterPos3d                                    uintptr
	gpRasterPos3dv                                   uintptr
	gpRasterPos3f                                    uintptr
	gpRasterPos3fv                                   uintptr
	gpRasterPos3i                                    uintptr
	gpRasterPos3iv                                   uintptr
	gpRasterPos3s                                    uintptr
	gpRasterPos3sv                                   uintptr
	gpRasterPos4d                                    uintptr
	gpRasterPos4dv                                   uintptr
	gpRasterPos4f                                    uintptr
	gpRasterPos4fv                                   uintptr
	gpRasterPos4i                                    uintptr
	gpRasterPos4iv                                   uintptr
	gpRasterPos4s                                    uintptr
	gpRasterPos4sv                                   uintptr
	gpRasterSamplesEXT                               uintptr
	gpReadBuffer                                     uintptr
	gpReadPixels                                     uintptr
	gpReadnPixels                                    uintptr
	gpReadnPixelsARB                                 uintptr
	gpReadnPixelsKHR                                 uintptr
	gpRectd                                          uintptr
	gpRectdv                                         uintptr
	gpRectf                                          uintptr
	gpRectfv                                         uintptr
	gpRecti                                          uintptr
	gpRectiv                                         uintptr
	gpRects                                          uintptr
	gpRectsv                                         uintptr
	gpReleaseShaderCompiler                          uintptr
	gpRenderMode                                     uintptr
	gpRenderbufferStorage                            uintptr
	gpRenderbufferStorageMultisample                 uintptr
	gpRenderbufferStorageMultisampleAdvancedAMD      uintptr
	gpRenderbufferStorageMultisampleCoverageNV       uintptr
	gpResetMemoryObjectParameterNV                   uintptr
	gpResolveDepthValuesNV                           uintptr
	gpResumeTransformFeedback                        uintptr
	gpRotated                                        uintptr
	gpRotatef                                        uintptr
	gpSampleCoverage                                 uintptr
	gpSampleMaski                                    uintptr
	gpSamplerParameterIiv                            uintptr
	gpSamplerParameterIuiv                           uintptr
	gpSamplerParameterf                              uintptr
	gpSamplerParameterfv                             uintptr
	gpSamplerParameteri                              uintptr
	gpSamplerParameteriv                             uintptr
	gpScaled                                         uintptr
	gpScalef                                         uintptr
	gpScissor                                        uintptr
	gpScissorArrayv                                  uintptr
	gpScissorExclusiveArrayvNV                       uintptr
	gpScissorExclusiveNV                             uintptr
	gpScissorIndexed                                 uintptr
	gpScissorIndexedv                                uintptr
	gpSecondaryColor3b                               uintptr
	gpSecondaryColor3bv                              uintptr
	gpSecondaryColor3d                               uintptr
	gpSecondaryColor3dv                              uintptr
	gpSecondaryColor3f                               uintptr
	gpSecondaryColor3fv                              uintptr
	gpSecondaryColor3i                               uintptr
	gpSecondaryColor3iv                              uintptr
	gpSecondaryColor3s                               uintptr
	gpSecondaryColor3sv                              uintptr
	gpSecondaryColor3ub                              uintptr
	gpSecondaryColor3ubv                             uintptr
	gpSecondaryColor3ui                              uintptr
	gpSecondaryColor3uiv                             uintptr
	gpSecondaryColor3us                              uintptr
	gpSecondaryColor3usv                             uintptr
	gpSecondaryColorFormatNV                         uintptr
	gpSecondaryColorPointer                          uintptr
	gpSelectBuffer                                   uintptr
	gpSelectPerfMonitorCountersAMD                   uintptr
	gpShadeModel                                     uintptr
	gpShaderBinary                                   uintptr
	gpShaderSource                                   uintptr
	gpShaderStorageBlockBinding                      uintptr
	gpShadingRateImageBarrierNV                      uintptr
	gpShadingRateImagePaletteNV                      uintptr
	gpShadingRateSampleOrderCustomNV                 uintptr
	gpShadingRateSampleOrderNV                       uintptr
	gpSignalVkFenceNV                                uintptr
	gpSignalVkSemaphoreNV                            uintptr
	gpSpecializeShader                               uintptr
	gpSpecializeShaderARB                            uintptr
	gpStateCaptureNV                                 uintptr
	gpStencilFillPathInstancedNV                     uintptr
	gpStencilFillPathNV                              uintptr
	gpStencilFunc                                    uintptr
	gpStencilFuncSeparate                            uintptr
	gpStencilMask                                    uintptr
	gpStencilMaskSeparate                            uintptr
	gpStencilOp                                      uintptr
	gpStencilOpSeparate                              uintptr
	gpStencilStrokePathInstancedNV                   uintptr
	gpStencilStrokePathNV                            uintptr
	gpStencilThenCoverFillPathInstancedNV            uintptr
	gpStencilThenCoverFillPathNV                     uintptr
	gpStencilThenCoverStrokePathInstancedNV          uintptr
	gpStencilThenCoverStrokePathNV                   uintptr
	gpSubpixelPrecisionBiasNV                        uintptr
	gpTexAttachMemoryNV                              uintptr
	gpTexBuffer                                      uintptr
	gpTexBufferARB                                   uintptr
	gpTexBufferRange                                 uintptr
	gpTexCoord1d                                     uintptr
	gpTexCoord1dv                                    uintptr
	gpTexCoord1f                                     uintptr
	gpTexCoord1fv                                    uintptr
	gpTexCoord1i                                     uintptr
	gpTexCoord1iv                                    uintptr
	gpTexCoord1s                                     uintptr
	gpTexCoord1sv                                    uintptr
	gpTexCoord2d                                     uintptr
	gpTexCoord2dv                                    uintptr
	gpTexCoord2f                                     uintptr
	gpTexCoord2fv                                    uintptr
	gpTexCoord2i                                     uintptr
	gpTexCoord2iv                                    uintptr
	gpTexCoord2s                                     uintptr
	gpTexCoord2sv                                    uintptr
	gpTexCoord3d                                     uintptr
	gpTexCoord3dv                                    uintptr
	gpTexCoord3f                                     uintptr
	gpTexCoord3fv                                    uintptr
	gpTexCoord3i                                     uintptr
	gpTexCoord3iv                                    uintptr
	gpTexCoord3s                                     uintptr
	gpTexCoord3sv                                    uintptr
	gpTexCoord4d                                     uintptr
	gpTexCoord4dv                                    uintptr
	gpTexCoord4f                                     uintptr
	gpTexCoord4fv                                    uintptr
	gpTexCoord4i                                     uintptr
	gpTexCoord4iv                                    uintptr
	gpTexCoord4s                                     uintptr
	gpTexCoord4sv                                    uintptr
	gpTexCoordFormatNV                               uintptr
	gpTexCoordPointer                                uintptr
	gpTexEnvf                                        uintptr
	gpTexEnvfv                                       uintptr
	gpTexEnvi                                        uintptr
	gpTexEnviv                                       uintptr
	gpTexGend                                        uintptr
	gpTexGendv                                       uintptr
	gpTexGenf                                        uintptr
	gpTexGenfv                                       uintptr
	gpTexGeni                                        uintptr
	gpTexGeniv                                       uintptr
	gpTexImage1D                                     uintptr
	gpTexImage2D                                     uintptr
	gpTexImage2DMultisample                          uintptr
	gpTexImage3D                                     uintptr
	gpTexImage3DMultisample                          uintptr
	gpTexPageCommitmentARB                           uintptr
	gpTexParameterIiv                                uintptr
	gpTexParameterIuiv                               uintptr
	gpTexParameterf                                  uintptr
	gpTexParameterfv                                 uintptr
	gpTexParameteri                                  uintptr
	gpTexParameteriv                                 uintptr
	gpTexStorage1D                                   uintptr
	gpTexStorage2D                                   uintptr
	gpTexStorage2DMultisample                        uintptr
	gpTexStorage3D                                   uintptr
	gpTexStorage3DMultisample                        uintptr
	gpTexSubImage1D                                  uintptr
	gpTexSubImage2D                                  uintptr
	gpTexSubImage3D                                  uintptr
	gpTextureAttachMemoryNV                          uintptr
	gpTextureBarrier                                 uintptr
	gpTextureBarrierNV                               uintptr
	gpTextureBuffer                                  uintptr
	gpTextureBufferEXT                               uintptr
	gpTextureBufferRange                             uintptr
	gpTextureBufferRangeEXT                          uintptr
	gpTextureImage1DEXT                              uintptr
	gpTextureImage2DEXT                              uintptr
	gpTextureImage3DEXT                              uintptr
	gpTexturePageCommitmentEXT                       uintptr
	gpTextureParameterIiv                            uintptr
	gpTextureParameterIivEXT                         uintptr
	gpTextureParameterIuiv                           uintptr
	gpTextureParameterIuivEXT                        uintptr
	gpTextureParameterf                              uintptr
	gpTextureParameterfEXT                           uintptr
	gpTextureParameterfv                             uintptr
	gpTextureParameterfvEXT                          uintptr
	gpTextureParameteri                              uintptr
	gpTextureParameteriEXT                           uintptr
	gpTextureParameteriv                             uintptr
	gpTextureParameterivEXT                          uintptr
	gpTextureRenderbufferEXT                         uintptr
	gpTextureStorage1D                               uintptr
	gpTextureStorage1DEXT                            uintptr
	gpTextureStorage2D                               uintptr
	gpTextureStorage2DEXT                            uintptr
	gpTextureStorage2DMultisample                    uintptr
	gpTextureStorage2DMultisampleEXT                 uintptr
	gpTextureStorage3D                               uintptr
	gpTextureStorage3DEXT                            uintptr
	gpTextureStorage3DMultisample                    uintptr
	gpTextureStorage3DMultisampleEXT                 uintptr
	gpTextureSubImage1D                              uintptr
	gpTextureSubImage1DEXT                           uintptr
	gpTextureSubImage2D                              uintptr
	gpTextureSubImage2DEXT                           uintptr
	gpTextureSubImage3D                              uintptr
	gpTextureSubImage3DEXT                           uintptr
	gpTextureView                                    uintptr
	gpTransformFeedbackBufferBase                    uintptr
	gpTransformFeedbackBufferRange                   uintptr
	gpTransformFeedbackVaryings                      uintptr
	gpTransformPathNV                                uintptr
	gpTranslated                                     uintptr
	gpTranslatef                                     uintptr
	gpUniform1d                                      uintptr
	gpUniform1dv                                     uintptr
	gpUniform1f                                      uintptr
	gpUniform1fv                                     uintptr
	gpUniform1i                                      uintptr
	gpUniform1i64ARB                                 uintptr
	gpUniform1i64NV                                  uintptr
	gpUniform1i64vARB                                uintptr
	gpUniform1i64vNV                                 uintptr
	gpUniform1iv                                     uintptr
	gpUniform1ui                                     uintptr
	gpUniform1ui64ARB                                uintptr
	gpUniform1ui64NV                                 uintptr
	gpUniform1ui64vARB                               uintptr
	gpUniform1ui64vNV                                uintptr
	gpUniform1uiv                                    uintptr
	gpUniform2d                                      uintptr
	gpUniform2dv                                     uintptr
	gpUniform2f                                      uintptr
	gpUniform2fv                                     uintptr
	gpUniform2i                                      uintptr
	gpUniform2i64ARB                                 uintptr
	gpUniform2i64NV                                  uintptr
	gpUniform2i64vARB                                uintptr
	gpUniform2i64vNV                                 uintptr
	gpUniform2iv                                     uintptr
	gpUniform2ui                                     uintptr
	gpUniform2ui64ARB                                uintptr
	gpUniform2ui64NV                                 uintptr
	gpUniform2ui64vARB                               uintptr
	gpUniform2ui64vNV                                uintptr
	gpUniform2uiv                                    uintptr
	gpUniform3d                                      uintptr
	gpUniform3dv                                     uintptr
	gpUniform3f                                      uintptr
	gpUniform3fv                                     uintptr
	gpUniform3i                                      uintptr
	gpUniform3i64ARB                                 uintptr
	gpUniform3i64NV                                  uintptr
	gpUniform3i64vARB                                uintptr
	gpUniform3i64vNV                                 uintptr
	gpUniform3iv                                     uintptr
	gpUniform3ui                                     uintptr
	gpUniform3ui64ARB                                uintptr
	gpUniform3ui64NV                                 uintptr
	gpUniform3ui64vARB                               uintptr
	gpUniform3ui64vNV                                uintptr
	gpUniform3uiv                                    uintptr
	gpUniform4d                                      uintptr
	gpUniform4dv                                     uintptr
	gpUniform4f                                      uintptr
	gpUniform4fv                                     uintptr
	gpUniform4i                                      uintptr
	gpUniform4i64ARB                                 uintptr
	gpUniform4i64NV                                  uintptr
	gpUniform4i64vARB                                uintptr
	gpUniform4i64vNV                                 uintptr
	gpUniform4iv                                     uintptr
	gpUniform4ui                                     uintptr
	gpUniform4ui64ARB                                uintptr
	gpUniform4ui64NV                                 uintptr
	gpUniform4ui64vARB                               uintptr
	gpUniform4ui64vNV                                uintptr
	gpUniform4uiv                                    uintptr
	gpUniformBlockBinding                            uintptr
	gpUniformHandleui64ARB                           uintptr
	gpUniformHandleui64NV                            uintptr
	gpUniformHandleui64vARB                          uintptr
	gpUniformHandleui64vNV                           uintptr
	gpUniformMatrix2dv                               uintptr
	gpUniformMatrix2fv                               uintptr
	gpUniformMatrix2x3dv                             uintptr
	gpUniformMatrix2x3fv                             uintptr
	gpUniformMatrix2x4dv                             uintptr
	gpUniformMatrix2x4fv                             uintptr
	gpUniformMatrix3dv                               uintptr
	gpUniformMatrix3fv                               uintptr
	gpUniformMatrix3x2dv                             uintptr
	gpUniformMatrix3x2fv                             uintptr
	gpUniformMatrix3x4dv                             uintptr
	gpUniformMatrix3x4fv                             uintptr
	gpUniformMatrix4dv                               uintptr
	gpUniformMatrix4fv                               uintptr
	gpUniformMatrix4x2dv                             uintptr
	gpUniformMatrix4x2fv                             uintptr
	gpUniformMatrix4x3dv                             uintptr
	gpUniformMatrix4x3fv                             uintptr
	gpUniformSubroutinesuiv                          uintptr
	gpUniformui64NV                                  uintptr
	gpUniformui64vNV                                 uintptr
	gpUnmapBuffer                                    uintptr
	gpUnmapNamedBuffer                               uintptr
	gpUnmapNamedBufferEXT                            uintptr
	gpUseProgram                                     uintptr
	gpUseProgramStages                               uintptr
	gpUseProgramStagesEXT                            uintptr
	gpUseShaderProgramEXT                            uintptr
	gpValidateProgram                                uintptr
	gpValidateProgramPipeline                        uintptr
	gpValidateProgramPipelineEXT                     uintptr
	gpVertex2d                                       uintptr
	gpVertex2dv                                      uintptr
	gpVertex2f                                       uintptr
	gpVertex2fv                                      uintptr
	gpVertex2i                                       uintptr
	gpVertex2iv                                      uintptr
	gpVertex2s                                       uintptr
	gpVertex2sv                                      uintptr
	gpVertex3d                                       uintptr
	gpVertex3dv                                      uintptr
	gpVertex3f                                       uintptr
	gpVertex3fv                                      uintptr
	gpVertex3i                                       uintptr
	gpVertex3iv                                      uintptr
	gpVertex3s                                       uintptr
	gpVertex3sv                                      uintptr
	gpVertex4d                                       uintptr
	gpVertex4dv                                      uintptr
	gpVertex4f                                       uintptr
	gpVertex4fv                                      uintptr
	gpVertex4i                                       uintptr
	gpVertex4iv                                      uintptr
	gpVertex4s                                       uintptr
	gpVertex4sv                                      uintptr
	gpVertexArrayAttribBinding                       uintptr
	gpVertexArrayAttribFormat                        uintptr
	gpVertexArrayAttribIFormat                       uintptr
	gpVertexArrayAttribLFormat                       uintptr
	gpVertexArrayBindVertexBufferEXT                 uintptr
	gpVertexArrayBindingDivisor                      uintptr
	gpVertexArrayColorOffsetEXT                      uintptr
	gpVertexArrayEdgeFlagOffsetEXT                   uintptr
	gpVertexArrayElementBuffer                       uintptr
	gpVertexArrayFogCoordOffsetEXT                   uintptr
	gpVertexArrayIndexOffsetEXT                      uintptr
	gpVertexArrayMultiTexCoordOffsetEXT              uintptr
	gpVertexArrayNormalOffsetEXT                     uintptr
	gpVertexArraySecondaryColorOffsetEXT             uintptr
	gpVertexArrayTexCoordOffsetEXT                   uintptr
	gpVertexArrayVertexAttribBindingEXT              uintptr
	gpVertexArrayVertexAttribDivisorEXT              uintptr
	gpVertexArrayVertexAttribFormatEXT               uintptr
	gpVertexArrayVertexAttribIFormatEXT              uintptr
	gpVertexArrayVertexAttribIOffsetEXT              uintptr
	gpVertexArrayVertexAttribLFormatEXT              uintptr
	gpVertexArrayVertexAttribLOffsetEXT              uintptr
	gpVertexArrayVertexAttribOffsetEXT               uintptr
	gpVertexArrayVertexBindingDivisorEXT             uintptr
	gpVertexArrayVertexBuffer                        uintptr
	gpVertexArrayVertexBuffers                       uintptr
	gpVertexArrayVertexOffsetEXT                     uintptr
	gpVertexAttrib1d                                 uintptr
	gpVertexAttrib1dv                                uintptr
	gpVertexAttrib1f                                 uintptr
	gpVertexAttrib1fv                                uintptr
	gpVertexAttrib1s                                 uintptr
	gpVertexAttrib1sv                                uintptr
	gpVertexAttrib2d                                 uintptr
	gpVertexAttrib2dv                                uintptr
	gpVertexAttrib2f                                 uintptr
	gpVertexAttrib2fv                                uintptr
	gpVertexAttrib2s                                 uintptr
	gpVertexAttrib2sv                                uintptr
	gpVertexAttrib3d                                 uintptr
	gpVertexAttrib3dv                                uintptr
	gpVertexAttrib3f                                 uintptr
	gpVertexAttrib3fv                                uintptr
	gpVertexAttrib3s                                 uintptr
	gpVertexAttrib3sv                                uintptr
	gpVertexAttrib4Nbv                               uintptr
	gpVertexAttrib4Niv                               uintptr
	gpVertexAttrib4Nsv                               uintptr
	gpVertexAttrib4Nub                               uintptr
	gpVertexAttrib4Nubv                              uintptr
	gpVertexAttrib4Nuiv                              uintptr
	gpVertexAttrib4Nusv                              uintptr
	gpVertexAttrib4bv                                uintptr
	gpVertexAttrib4d                                 uintptr
	gpVertexAttrib4dv                                uintptr
	gpVertexAttrib4f                                 uintptr
	gpVertexAttrib4fv                                uintptr
	gpVertexAttrib4iv                                uintptr
	gpVertexAttrib4s                                 uintptr
	gpVertexAttrib4sv                                uintptr
	gpVertexAttrib4ubv                               uintptr
	gpVertexAttrib4uiv                               uintptr
	gpVertexAttrib4usv                               uintptr
	gpVertexAttribBinding                            uintptr
	gpVertexAttribDivisor                            uintptr
	gpVertexAttribDivisorARB                         uintptr
	gpVertexAttribFormat                             uintptr
	gpVertexAttribFormatNV                           uintptr
	gpVertexAttribI1i                                uintptr
	gpVertexAttribI1iv                               uintptr
	gpVertexAttribI1ui                               uintptr
	gpVertexAttribI1uiv                              uintptr
	gpVertexAttribI2i                                uintptr
	gpVertexAttribI2iv                               uintptr
	gpVertexAttribI2ui                               uintptr
	gpVertexAttribI2uiv                              uintptr
	gpVertexAttribI3i                                uintptr
	gpVertexAttribI3iv                               uintptr
	gpVertexAttribI3ui                               uintptr
	gpVertexAttribI3uiv                              uintptr
	gpVertexAttribI4bv                               uintptr
	gpVertexAttribI4i                                uintptr
	gpVertexAttribI4iv                               uintptr
	gpVertexAttribI4sv                               uintptr
	gpVertexAttribI4ubv                              uintptr
	gpVertexAttribI4ui                               uintptr
	gpVertexAttribI4uiv                              uintptr
	gpVertexAttribI4usv                              uintptr
	gpVertexAttribIFormat                            uintptr
	gpVertexAttribIFormatNV                          uintptr
	gpVertexAttribIPointer                           uintptr
	gpVertexAttribL1d                                uintptr
	gpVertexAttribL1dv                               uintptr
	gpVertexAttribL1i64NV                            uintptr
	gpVertexAttribL1i64vNV                           uintptr
	gpVertexAttribL1ui64ARB                          uintptr
	gpVertexAttribL1ui64NV                           uintptr
	gpVertexAttribL1ui64vARB                         uintptr
	gpVertexAttribL1ui64vNV                          uintptr
	gpVertexAttribL2d                                uintptr
	gpVertexAttribL2dv                               uintptr
	gpVertexAttribL2i64NV                            uintptr
	gpVertexAttribL2i64vNV                           uintptr
	gpVertexAttribL2ui64NV                           uintptr
	gpVertexAttribL2ui64vNV                          uintptr
	gpVertexAttribL3d                                uintptr
	gpVertexAttribL3dv                               uintptr
	gpVertexAttribL3i64NV                            uintptr
	gpVertexAttribL3i64vNV                           uintptr
	gpVertexAttribL3ui64NV                           uintptr
	gpVertexAttribL3ui64vNV                          uintptr
	gpVertexAttribL4d                                uintptr
	gpVertexAttribL4dv                               uintptr
	gpVertexAttribL4i64NV                            uintptr
	gpVertexAttribL4i64vNV                           uintptr
	gpVertexAttribL4ui64NV                           uintptr
	gpVertexAttribL4ui64vNV                          uintptr
	gpVertexAttribLFormat                            uintptr
	gpVertexAttribLFormatNV                          uintptr
	gpVertexAttribLPointer                           uintptr
	gpVertexAttribP1ui                               uintptr
	gpVertexAttribP1uiv                              uintptr
	gpVertexAttribP2ui                               uintptr
	gpVertexAttribP2uiv                              uintptr
	gpVertexAttribP3ui                               uintptr
	gpVertexAttribP3uiv                              uintptr
	gpVertexAttribP4ui                               uintptr
	gpVertexAttribP4uiv                              uintptr
	gpVertexAttribPointer                            uintptr
	gpVertexBindingDivisor                           uintptr
	gpVertexFormatNV                                 uintptr
	gpVertexPointer                                  uintptr
	gpViewport                                       uintptr
	gpViewportArrayv                                 uintptr
	gpViewportIndexedf                               uintptr
	gpViewportIndexedfv                              uintptr
	gpViewportPositionWScaleNV                       uintptr
	gpViewportSwizzleNV                              uintptr
	gpWaitSync                                       uintptr
	gpWaitVkSemaphoreNV                              uintptr
	gpWeightPathsNV                                  uintptr
	gpWindowPos2d                                    uintptr
	gpWindowPos2dv                                   uintptr
	gpWindowPos2f                                    uintptr
	gpWindowPos2fv                                   uintptr
	gpWindowPos2i                                    uintptr
	gpWindowPos2iv                                   uintptr
	gpWindowPos2s                                    uintptr
	gpWindowPos2sv                                   uintptr
	gpWindowPos3d                                    uintptr
	gpWindowPos3dv                                   uintptr
	gpWindowPos3f                                    uintptr
	gpWindowPos3fv                                   uintptr
	gpWindowPos3i                                    uintptr
	gpWindowPos3iv                                   uintptr
	gpWindowPos3s                                    uintptr
	gpWindowPos3sv                                   uintptr
	gpWindowRectanglesEXT                            uintptr
)

func boolToUintptr(b bool) uintptr {
	if b {
		return 1
	}
	return 0
}

// operate on the accumulation buffer
func Accum(op uint32, value float32) {
	syscall.Syscall(gpAccum, 2, uintptr(op), uintptr(math.Float32bits(value)), 0)
}
func ActiveProgramEXT(program uint32) {
	syscall.Syscall(gpActiveProgramEXT, 1, uintptr(program), 0, 0)
}

// set the active program object for a program pipeline object
func ActiveShaderProgram(pipeline uint32, program uint32) {
	syscall.Syscall(gpActiveShaderProgram, 2, uintptr(pipeline), uintptr(program), 0)
}
func ActiveShaderProgramEXT(pipeline uint32, program uint32) {
	syscall.Syscall(gpActiveShaderProgramEXT, 2, uintptr(pipeline), uintptr(program), 0)
}

// select active texture unit
func ActiveTexture(texture uint32) {
	syscall.Syscall(gpActiveTexture, 1, uintptr(texture), 0, 0)
}

// specify the alpha test function
func AlphaFunc(xfunc uint32, ref float32) {
	syscall.Syscall(gpAlphaFunc, 2, uintptr(xfunc), uintptr(math.Float32bits(ref)), 0)
}
func ApplyFramebufferAttachmentCMAAINTEL() {
	syscall.Syscall(gpApplyFramebufferAttachmentCMAAINTEL, 0, 0, 0, 0)
}

// determine if textures are loaded in texture memory
func AreTexturesResident(n int32, textures *uint32, residences *bool) bool {
	ret, _, _ := syscall.Syscall(gpAreTexturesResident, 3, uintptr(n), uintptr(unsafe.Pointer(textures)), uintptr(unsafe.Pointer(residences)))
	return ret != 0
}

// render a vertex using the specified vertex array element
func ArrayElement(i int32) {
	syscall.Syscall(gpArrayElement, 1, uintptr(i), 0, 0)
}

// Attaches a shader object to a program object
func AttachShader(program uint32, shader uint32) {
	syscall.Syscall(gpAttachShader, 2, uintptr(program), uintptr(shader), 0)
}

// delimit the vertices of a primitive or a group of like primitives
func Begin(mode uint32) {
	syscall.Syscall(gpBegin, 1, uintptr(mode), 0, 0)
}

// start conditional rendering
func BeginConditionalRender(id uint32, mode uint32) {
	syscall.Syscall(gpBeginConditionalRender, 2, uintptr(id), uintptr(mode), 0)
}
func BeginConditionalRenderNV(id uint32, mode uint32) {
	syscall.Syscall(gpBeginConditionalRenderNV, 2, uintptr(id), uintptr(mode), 0)
}
func BeginPerfMonitorAMD(monitor uint32) {
	syscall.Syscall(gpBeginPerfMonitorAMD, 1, uintptr(monitor), 0, 0)
}
func BeginPerfQueryINTEL(queryHandle uint32) {
	syscall.Syscall(gpBeginPerfQueryINTEL, 1, uintptr(queryHandle), 0, 0)
}

// delimit the boundaries of a query object
func BeginQuery(target uint32, id uint32) {
	syscall.Syscall(gpBeginQuery, 2, uintptr(target), uintptr(id), 0)
}
func BeginQueryIndexed(target uint32, index uint32, id uint32) {
	syscall.Syscall(gpBeginQueryIndexed, 3, uintptr(target), uintptr(index), uintptr(id))
}

// start transform feedback operation
func BeginTransformFeedback(primitiveMode uint32) {
	syscall.Syscall(gpBeginTransformFeedback, 1, uintptr(primitiveMode), 0, 0)
}

// Associates a generic vertex attribute index with a named attribute variable
func BindAttribLocation(program uint32, index uint32, name *uint8) {
	syscall.Syscall(gpBindAttribLocation, 3, uintptr(program), uintptr(index), uintptr(unsafe.Pointer(name)))
}

// bind a named buffer object
func BindBuffer(target uint32, buffer uint32) {
	syscall.Syscall(gpBindBuffer, 2, uintptr(target), uintptr(buffer), 0)
}

// bind a buffer object to an indexed buffer target
func BindBufferBase(target uint32, index uint32, buffer uint32) {
	syscall.Syscall(gpBindBufferBase, 3, uintptr(target), uintptr(index), uintptr(buffer))
}

// bind a range within a buffer object to an indexed buffer target
func BindBufferRange(target uint32, index uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpBindBufferRange, 5, uintptr(target), uintptr(index), uintptr(buffer), uintptr(offset), uintptr(size), 0)
}

// bind one or more buffer objects to a sequence of indexed buffer targets
func BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32) {
	syscall.Syscall6(gpBindBuffersBase, 4, uintptr(target), uintptr(first), uintptr(count), uintptr(unsafe.Pointer(buffers)), 0, 0)
}

// bind ranges of one or more buffer objects to a sequence of indexed buffer targets
func BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *int, sizes *int) {
	syscall.Syscall6(gpBindBuffersRange, 6, uintptr(target), uintptr(first), uintptr(count), uintptr(unsafe.Pointer(buffers)), uintptr(unsafe.Pointer(offsets)), uintptr(unsafe.Pointer(sizes)))
}

// bind a user-defined varying out variable to a fragment shader color number
func BindFragDataLocation(program uint32, color uint32, name *uint8) {
	syscall.Syscall(gpBindFragDataLocation, 3, uintptr(program), uintptr(color), uintptr(unsafe.Pointer(name)))
}

// bind a user-defined varying out variable to a fragment shader color number and index
func BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *uint8) {
	syscall.Syscall6(gpBindFragDataLocationIndexed, 4, uintptr(program), uintptr(colorNumber), uintptr(index), uintptr(unsafe.Pointer(name)), 0, 0)
}

// bind a framebuffer to a framebuffer target
func BindFramebuffer(target uint32, framebuffer uint32) {
	syscall.Syscall(gpBindFramebuffer, 2, uintptr(target), uintptr(framebuffer), 0)
}

// bind a level of a texture to an image unit
func BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32) {
	syscall.Syscall9(gpBindImageTexture, 7, uintptr(unit), uintptr(texture), uintptr(level), boolToUintptr(layered), uintptr(layer), uintptr(access), uintptr(format), 0, 0)
}

// bind one or more named texture images to a sequence of consecutive image units
func BindImageTextures(first uint32, count int32, textures *uint32) {
	syscall.Syscall(gpBindImageTextures, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(textures)))
}
func BindMultiTextureEXT(texunit uint32, target uint32, texture uint32) {
	syscall.Syscall(gpBindMultiTextureEXT, 3, uintptr(texunit), uintptr(target), uintptr(texture))
}

// bind a program pipeline to the current context
func BindProgramPipeline(pipeline uint32) {
	syscall.Syscall(gpBindProgramPipeline, 1, uintptr(pipeline), 0, 0)
}
func BindProgramPipelineEXT(pipeline uint32) {
	syscall.Syscall(gpBindProgramPipelineEXT, 1, uintptr(pipeline), 0, 0)
}

// bind a renderbuffer to a renderbuffer target
func BindRenderbuffer(target uint32, renderbuffer uint32) {
	syscall.Syscall(gpBindRenderbuffer, 2, uintptr(target), uintptr(renderbuffer), 0)
}

// bind a named sampler to a texturing target
func BindSampler(unit uint32, sampler uint32) {
	syscall.Syscall(gpBindSampler, 2, uintptr(unit), uintptr(sampler), 0)
}

// bind one or more named sampler objects to a sequence of consecutive sampler units
func BindSamplers(first uint32, count int32, samplers *uint32) {
	syscall.Syscall(gpBindSamplers, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(samplers)))
}
func BindShadingRateImageNV(texture uint32) {
	syscall.Syscall(gpBindShadingRateImageNV, 1, uintptr(texture), 0, 0)
}

// bind a named texture to a texturing target
func BindTexture(target uint32, texture uint32) {
	syscall.Syscall(gpBindTexture, 2, uintptr(target), uintptr(texture), 0)
}

// bind an existing texture object to the specified texture unit
func BindTextureUnit(unit uint32, texture uint32) {
	syscall.Syscall(gpBindTextureUnit, 2, uintptr(unit), uintptr(texture), 0)
}

// bind one or more named textures to a sequence of consecutive texture units
func BindTextures(first uint32, count int32, textures *uint32) {
	syscall.Syscall(gpBindTextures, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(textures)))
}

// bind a transform feedback object
func BindTransformFeedback(target uint32, id uint32) {
	syscall.Syscall(gpBindTransformFeedback, 2, uintptr(target), uintptr(id), 0)
}

// bind a vertex array object
func BindVertexArray(array uint32) {
	syscall.Syscall(gpBindVertexArray, 1, uintptr(array), 0, 0)
}

// bind a buffer to a vertex buffer bind point
func BindVertexBuffer(bindingindex uint32, buffer uint32, offset int, stride int32) {
	syscall.Syscall6(gpBindVertexBuffer, 4, uintptr(bindingindex), uintptr(buffer), uintptr(offset), uintptr(stride), 0, 0)
}

// attach multiple buffer objects to a vertex array object
func BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *int, strides *int32) {
	syscall.Syscall6(gpBindVertexBuffers, 5, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(buffers)), uintptr(unsafe.Pointer(offsets)), uintptr(unsafe.Pointer(strides)), 0)
}

// draw a bitmap
func Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8) {
	syscall.Syscall9(gpBitmap, 7, uintptr(width), uintptr(height), uintptr(math.Float32bits(xorig)), uintptr(math.Float32bits(yorig)), uintptr(math.Float32bits(xmove)), uintptr(math.Float32bits(ymove)), uintptr(unsafe.Pointer(bitmap)), 0, 0)
}
func BlendBarrierKHR() {
	syscall.Syscall(gpBlendBarrierKHR, 0, 0, 0, 0)
}
func BlendBarrierNV() {
	syscall.Syscall(gpBlendBarrierNV, 0, 0, 0, 0)
}

// set the blend color
func BlendColor(red float32, green float32, blue float32, alpha float32) {
	syscall.Syscall6(gpBlendColor, 4, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)), uintptr(math.Float32bits(alpha)), 0, 0)
}

// specify the equation used for both the RGB blend equation and the Alpha blend equation
func BlendEquation(mode uint32) {
	syscall.Syscall(gpBlendEquation, 1, uintptr(mode), 0, 0)
}

// set the RGB blend equation and the alpha blend equation separately
func BlendEquationSeparate(modeRGB uint32, modeAlpha uint32) {
	syscall.Syscall(gpBlendEquationSeparate, 2, uintptr(modeRGB), uintptr(modeAlpha), 0)
}
func BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32) {
	syscall.Syscall(gpBlendEquationSeparatei, 3, uintptr(buf), uintptr(modeRGB), uintptr(modeAlpha))
}
func BlendEquationSeparateiARB(buf uint32, modeRGB uint32, modeAlpha uint32) {
	syscall.Syscall(gpBlendEquationSeparateiARB, 3, uintptr(buf), uintptr(modeRGB), uintptr(modeAlpha))
}
func BlendEquationi(buf uint32, mode uint32) {
	syscall.Syscall(gpBlendEquationi, 2, uintptr(buf), uintptr(mode), 0)
}
func BlendEquationiARB(buf uint32, mode uint32) {
	syscall.Syscall(gpBlendEquationiARB, 2, uintptr(buf), uintptr(mode), 0)
}

// specify pixel arithmetic
func BlendFunc(sfactor uint32, dfactor uint32) {
	syscall.Syscall(gpBlendFunc, 2, uintptr(sfactor), uintptr(dfactor), 0)
}

// specify pixel arithmetic for RGB and alpha components separately
func BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
	syscall.Syscall6(gpBlendFuncSeparate, 4, uintptr(sfactorRGB), uintptr(dfactorRGB), uintptr(sfactorAlpha), uintptr(dfactorAlpha), 0, 0)
}
func BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	syscall.Syscall6(gpBlendFuncSeparatei, 5, uintptr(buf), uintptr(srcRGB), uintptr(dstRGB), uintptr(srcAlpha), uintptr(dstAlpha), 0)
}
func BlendFuncSeparateiARB(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
	syscall.Syscall6(gpBlendFuncSeparateiARB, 5, uintptr(buf), uintptr(srcRGB), uintptr(dstRGB), uintptr(srcAlpha), uintptr(dstAlpha), 0)
}
func BlendFunci(buf uint32, src uint32, dst uint32) {
	syscall.Syscall(gpBlendFunci, 3, uintptr(buf), uintptr(src), uintptr(dst))
}
func BlendFunciARB(buf uint32, src uint32, dst uint32) {
	syscall.Syscall(gpBlendFunciARB, 3, uintptr(buf), uintptr(src), uintptr(dst))
}
func BlendParameteriNV(pname uint32, value int32) {
	syscall.Syscall(gpBlendParameteriNV, 2, uintptr(pname), uintptr(value), 0)
}

// copy a block of pixels from one framebuffer object to another
func BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	syscall.Syscall12(gpBlitFramebuffer, 10, uintptr(srcX0), uintptr(srcY0), uintptr(srcX1), uintptr(srcY1), uintptr(dstX0), uintptr(dstY0), uintptr(dstX1), uintptr(dstY1), uintptr(mask), uintptr(filter), 0, 0)
}

// copy a block of pixels from one framebuffer object to another
func BlitNamedFramebuffer(readFramebuffer uint32, drawFramebuffer uint32, srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
	syscall.Syscall12(gpBlitNamedFramebuffer, 12, uintptr(readFramebuffer), uintptr(drawFramebuffer), uintptr(srcX0), uintptr(srcY0), uintptr(srcX1), uintptr(srcY1), uintptr(dstX0), uintptr(dstY0), uintptr(dstX1), uintptr(dstY1), uintptr(mask), uintptr(filter))
}
func BufferAddressRangeNV(pname uint32, index uint32, address uint64, length int) {
	syscall.Syscall6(gpBufferAddressRangeNV, 4, uintptr(pname), uintptr(index), uintptr(address), uintptr(length), 0, 0)
}
func BufferAttachMemoryNV(target uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpBufferAttachMemoryNV, 3, uintptr(target), uintptr(memory), uintptr(offset))
}

// creates and initializes a buffer object's data     store
func BufferData(target uint32, size int, data unsafe.Pointer, usage uint32) {
	syscall.Syscall6(gpBufferData, 4, uintptr(target), uintptr(size), uintptr(data), uintptr(usage), 0, 0)
}
func BufferPageCommitmentARB(target uint32, offset int, size int, commit bool) {
	syscall.Syscall6(gpBufferPageCommitmentARB, 4, uintptr(target), uintptr(offset), uintptr(size), boolToUintptr(commit), 0, 0)
}

// creates and initializes a buffer object's immutable data     store
func BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32) {
	syscall.Syscall6(gpBufferStorage, 4, uintptr(target), uintptr(size), uintptr(data), uintptr(flags), 0, 0)
}

// updates a subset of a buffer object's data store
func BufferSubData(target uint32, offset int, size int, data unsafe.Pointer) {
	syscall.Syscall6(gpBufferSubData, 4, uintptr(target), uintptr(offset), uintptr(size), uintptr(data), 0, 0)
}
func CallCommandListNV(list uint32) {
	syscall.Syscall(gpCallCommandListNV, 1, uintptr(list), 0, 0)
}

// execute a display list
func CallList(list uint32) {
	syscall.Syscall(gpCallList, 1, uintptr(list), 0, 0)
}

// execute a list of display lists
func CallLists(n int32, xtype uint32, lists unsafe.Pointer) {
	syscall.Syscall(gpCallLists, 3, uintptr(n), uintptr(xtype), uintptr(lists))
}

// check the completeness status of a framebuffer
func CheckFramebufferStatus(target uint32) uint32 {
	ret, _, _ := syscall.Syscall(gpCheckFramebufferStatus, 1, uintptr(target), 0, 0)
	return (uint32)(ret)
}

// check the completeness status of a framebuffer
func CheckNamedFramebufferStatus(framebuffer uint32, target uint32) uint32 {
	ret, _, _ := syscall.Syscall(gpCheckNamedFramebufferStatus, 2, uintptr(framebuffer), uintptr(target), 0)
	return (uint32)(ret)
}
func CheckNamedFramebufferStatusEXT(framebuffer uint32, target uint32) uint32 {
	ret, _, _ := syscall.Syscall(gpCheckNamedFramebufferStatusEXT, 2, uintptr(framebuffer), uintptr(target), 0)
	return (uint32)(ret)
}

// specify whether data read via  should be clamped
func ClampColor(target uint32, clamp uint32) {
	syscall.Syscall(gpClampColor, 2, uintptr(target), uintptr(clamp), 0)
}

// clear buffers to preset values
func Clear(mask uint32) {
	syscall.Syscall(gpClear, 1, uintptr(mask), 0, 0)
}

// specify clear values for the accumulation buffer
func ClearAccum(red float32, green float32, blue float32, alpha float32) {
	syscall.Syscall6(gpClearAccum, 4, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)), uintptr(math.Float32bits(alpha)), 0, 0)
}

// fill a buffer object's data store with a fixed value
func ClearBufferData(target uint32, internalformat uint32, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall6(gpClearBufferData, 5, uintptr(target), uintptr(internalformat), uintptr(format), uintptr(xtype), uintptr(data), 0)
}

// fill all or part of buffer object's data store with a fixed value
func ClearBufferSubData(target uint32, internalformat uint32, offset int, size int, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall9(gpClearBufferSubData, 7, uintptr(target), uintptr(internalformat), uintptr(offset), uintptr(size), uintptr(format), uintptr(xtype), uintptr(data), 0, 0)
}
func ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32) {
	syscall.Syscall6(gpClearBufferfi, 4, uintptr(buffer), uintptr(drawbuffer), uintptr(math.Float32bits(depth)), uintptr(stencil), 0, 0)
}
func ClearBufferfv(buffer uint32, drawbuffer int32, value *float32) {
	syscall.Syscall(gpClearBufferfv, 3, uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)))
}
func ClearBufferiv(buffer uint32, drawbuffer int32, value *int32) {
	syscall.Syscall(gpClearBufferiv, 3, uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)))
}
func ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32) {
	syscall.Syscall(gpClearBufferuiv, 3, uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)))
}

// specify clear values for the color buffers
func ClearColor(red float32, green float32, blue float32, alpha float32) {
	syscall.Syscall6(gpClearColor, 4, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)), uintptr(math.Float32bits(alpha)), 0, 0)
}

// specify the clear value for the depth buffer
func ClearDepth(depth float64) {
	syscall.Syscall(gpClearDepth, 1, uintptr(math.Float64bits(depth)), 0, 0)
}

// specify the clear value for the depth buffer
func ClearDepthf(d float32) {
	syscall.Syscall(gpClearDepthf, 1, uintptr(math.Float32bits(d)), 0, 0)
}

// specify the clear value for the color index buffers
func ClearIndex(c float32) {
	syscall.Syscall(gpClearIndex, 1, uintptr(math.Float32bits(c)), 0, 0)
}

// fill a buffer object's data store with a fixed value
func ClearNamedBufferData(buffer uint32, internalformat uint32, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall6(gpClearNamedBufferData, 5, uintptr(buffer), uintptr(internalformat), uintptr(format), uintptr(xtype), uintptr(data), 0)
}
func ClearNamedBufferDataEXT(buffer uint32, internalformat uint32, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall6(gpClearNamedBufferDataEXT, 5, uintptr(buffer), uintptr(internalformat), uintptr(format), uintptr(xtype), uintptr(data), 0)
}

// fill all or part of buffer object's data store with a fixed value
func ClearNamedBufferSubData(buffer uint32, internalformat uint32, offset int, size int, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall9(gpClearNamedBufferSubData, 7, uintptr(buffer), uintptr(internalformat), uintptr(offset), uintptr(size), uintptr(format), uintptr(xtype), uintptr(data), 0, 0)
}
func ClearNamedBufferSubDataEXT(buffer uint32, internalformat uint32, offset int, size int, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall9(gpClearNamedBufferSubDataEXT, 7, uintptr(buffer), uintptr(internalformat), uintptr(offset), uintptr(size), uintptr(format), uintptr(xtype), uintptr(data), 0, 0)
}
func ClearNamedFramebufferfi(framebuffer uint32, buffer uint32, drawbuffer int32, depth float32, stencil int32) {
	syscall.Syscall6(gpClearNamedFramebufferfi, 5, uintptr(framebuffer), uintptr(buffer), uintptr(drawbuffer), uintptr(math.Float32bits(depth)), uintptr(stencil), 0)
}
func ClearNamedFramebufferfv(framebuffer uint32, buffer uint32, drawbuffer int32, value *float32) {
	syscall.Syscall6(gpClearNamedFramebufferfv, 4, uintptr(framebuffer), uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ClearNamedFramebufferiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *int32) {
	syscall.Syscall6(gpClearNamedFramebufferiv, 4, uintptr(framebuffer), uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ClearNamedFramebufferuiv(framebuffer uint32, buffer uint32, drawbuffer int32, value *uint32) {
	syscall.Syscall6(gpClearNamedFramebufferuiv, 4, uintptr(framebuffer), uintptr(buffer), uintptr(drawbuffer), uintptr(unsafe.Pointer(value)), 0, 0)
}

// specify the clear value for the stencil buffer
func ClearStencil(s int32) {
	syscall.Syscall(gpClearStencil, 1, uintptr(s), 0, 0)
}

// fills all a texture image with a constant value
func ClearTexImage(texture uint32, level int32, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall6(gpClearTexImage, 5, uintptr(texture), uintptr(level), uintptr(format), uintptr(xtype), uintptr(data), 0)
}

// fills all or part of a texture image with a constant value
func ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, data unsafe.Pointer) {
	syscall.Syscall12(gpClearTexSubImage, 11, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(data), 0)
}

// select active texture unit
func ClientActiveTexture(texture uint32) {
	syscall.Syscall(gpClientActiveTexture, 1, uintptr(texture), 0, 0)
}
func ClientAttribDefaultEXT(mask uint32) {
	syscall.Syscall(gpClientAttribDefaultEXT, 1, uintptr(mask), 0, 0)
}

// block and wait for a sync object to become signaled
func ClientWaitSync(sync uintptr, flags uint32, timeout uint64) uint32 {
	ret, _, _ := syscall.Syscall(gpClientWaitSync, 3, uintptr(sync), uintptr(flags), uintptr(timeout))
	return (uint32)(ret)
}

// control clip coordinate to window coordinate behavior
func ClipControl(origin uint32, depth uint32) {
	syscall.Syscall(gpClipControl, 2, uintptr(origin), uintptr(depth), 0)
}

// specify a plane against which all geometry is clipped
func ClipPlane(plane uint32, equation *float64) {
	syscall.Syscall(gpClipPlane, 2, uintptr(plane), uintptr(unsafe.Pointer(equation)), 0)
}
func Color3b(red int8, green int8, blue int8) {
	syscall.Syscall(gpColor3b, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func Color3bv(v *int8) {
	syscall.Syscall(gpColor3bv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color3d(red float64, green float64, blue float64) {
	syscall.Syscall(gpColor3d, 3, uintptr(math.Float64bits(red)), uintptr(math.Float64bits(green)), uintptr(math.Float64bits(blue)))
}
func Color3dv(v *float64) {
	syscall.Syscall(gpColor3dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color3f(red float32, green float32, blue float32) {
	syscall.Syscall(gpColor3f, 3, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)))
}
func Color3fv(v *float32) {
	syscall.Syscall(gpColor3fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color3i(red int32, green int32, blue int32) {
	syscall.Syscall(gpColor3i, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func Color3iv(v *int32) {
	syscall.Syscall(gpColor3iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color3s(red int16, green int16, blue int16) {
	syscall.Syscall(gpColor3s, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func Color3sv(v *int16) {
	syscall.Syscall(gpColor3sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color3ub(red uint8, green uint8, blue uint8) {
	syscall.Syscall(gpColor3ub, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func Color3ubv(v *uint8) {
	syscall.Syscall(gpColor3ubv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color3ui(red uint32, green uint32, blue uint32) {
	syscall.Syscall(gpColor3ui, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func Color3uiv(v *uint32) {
	syscall.Syscall(gpColor3uiv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color3us(red uint16, green uint16, blue uint16) {
	syscall.Syscall(gpColor3us, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func Color3usv(v *uint16) {
	syscall.Syscall(gpColor3usv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4b(red int8, green int8, blue int8, alpha int8) {
	syscall.Syscall6(gpColor4b, 4, uintptr(red), uintptr(green), uintptr(blue), uintptr(alpha), 0, 0)
}
func Color4bv(v *int8) {
	syscall.Syscall(gpColor4bv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4d(red float64, green float64, blue float64, alpha float64) {
	syscall.Syscall6(gpColor4d, 4, uintptr(math.Float64bits(red)), uintptr(math.Float64bits(green)), uintptr(math.Float64bits(blue)), uintptr(math.Float64bits(alpha)), 0, 0)
}
func Color4dv(v *float64) {
	syscall.Syscall(gpColor4dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4f(red float32, green float32, blue float32, alpha float32) {
	syscall.Syscall6(gpColor4f, 4, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)), uintptr(math.Float32bits(alpha)), 0, 0)
}
func Color4fv(v *float32) {
	syscall.Syscall(gpColor4fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4i(red int32, green int32, blue int32, alpha int32) {
	syscall.Syscall6(gpColor4i, 4, uintptr(red), uintptr(green), uintptr(blue), uintptr(alpha), 0, 0)
}
func Color4iv(v *int32) {
	syscall.Syscall(gpColor4iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4s(red int16, green int16, blue int16, alpha int16) {
	syscall.Syscall6(gpColor4s, 4, uintptr(red), uintptr(green), uintptr(blue), uintptr(alpha), 0, 0)
}
func Color4sv(v *int16) {
	syscall.Syscall(gpColor4sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4ub(red uint8, green uint8, blue uint8, alpha uint8) {
	syscall.Syscall6(gpColor4ub, 4, uintptr(red), uintptr(green), uintptr(blue), uintptr(alpha), 0, 0)
}
func Color4ubv(v *uint8) {
	syscall.Syscall(gpColor4ubv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4ui(red uint32, green uint32, blue uint32, alpha uint32) {
	syscall.Syscall6(gpColor4ui, 4, uintptr(red), uintptr(green), uintptr(blue), uintptr(alpha), 0, 0)
}
func Color4uiv(v *uint32) {
	syscall.Syscall(gpColor4uiv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Color4us(red uint16, green uint16, blue uint16, alpha uint16) {
	syscall.Syscall6(gpColor4us, 4, uintptr(red), uintptr(green), uintptr(blue), uintptr(alpha), 0, 0)
}
func Color4usv(v *uint16) {
	syscall.Syscall(gpColor4usv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func ColorFormatNV(size int32, xtype uint32, stride int32) {
	syscall.Syscall(gpColorFormatNV, 3, uintptr(size), uintptr(xtype), uintptr(stride))
}
func ColorMask(red bool, green bool, blue bool, alpha bool) {
	syscall.Syscall6(gpColorMask, 4, boolToUintptr(red), boolToUintptr(green), boolToUintptr(blue), boolToUintptr(alpha), 0, 0)
}
func ColorMaski(index uint32, r bool, g bool, b bool, a bool) {
	syscall.Syscall6(gpColorMaski, 5, uintptr(index), boolToUintptr(r), boolToUintptr(g), boolToUintptr(b), boolToUintptr(a), 0)
}

// cause a material color to track the current color
func ColorMaterial(face uint32, mode uint32) {
	syscall.Syscall(gpColorMaterial, 2, uintptr(face), uintptr(mode), 0)
}

// define an array of colors
func ColorPointer(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpColorPointer, 4, uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0, 0)
}
func CommandListSegmentsNV(list uint32, segments uint32) {
	syscall.Syscall(gpCommandListSegmentsNV, 2, uintptr(list), uintptr(segments), 0)
}
func CompileCommandListNV(list uint32) {
	syscall.Syscall(gpCompileCommandListNV, 1, uintptr(list), 0, 0)
}

// Compiles a shader object
func CompileShader(shader uint32) {
	syscall.Syscall(gpCompileShader, 1, uintptr(shader), 0, 0)
}
func CompileShaderIncludeARB(shader uint32, count int32, path **uint8, length *int32) {
	syscall.Syscall6(gpCompileShaderIncludeARB, 4, uintptr(shader), uintptr(count), uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(length)), 0, 0)
}
func CompressedMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall9(gpCompressedMultiTexImage1DEXT, 8, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(border), uintptr(imageSize), uintptr(bits), 0)
}
func CompressedMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall9(gpCompressedMultiTexImage2DEXT, 9, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(imageSize), uintptr(bits))
}
func CompressedMultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall12(gpCompressedMultiTexImage3DEXT, 10, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(imageSize), uintptr(bits), 0, 0)
}
func CompressedMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall9(gpCompressedMultiTexSubImage1DEXT, 8, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(imageSize), uintptr(bits), 0)
}
func CompressedMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall12(gpCompressedMultiTexSubImage2DEXT, 10, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(imageSize), uintptr(bits), 0, 0)
}
func CompressedMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall12(gpCompressedMultiTexSubImage3DEXT, 12, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(imageSize), uintptr(bits))
}

// specify a one-dimensional texture image in a compressed format
func CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexImage1D, 7, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(border), uintptr(imageSize), uintptr(data), 0, 0)
}

// specify a two-dimensional texture image in a compressed format
func CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexImage2D, 8, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(imageSize), uintptr(data), 0)
}

// specify a three-dimensional texture image in a compressed format
func CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexImage3D, 9, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(imageSize), uintptr(data))
}

// specify a one-dimensional texture subimage in a compressed     format
func CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexSubImage1D, 7, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(imageSize), uintptr(data), 0, 0)
}

// specify a two-dimensional texture subimage in a compressed format
func CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTexSubImage2D, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(imageSize), uintptr(data))
}

// specify a three-dimensional texture subimage in a compressed format
func CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall12(gpCompressedTexSubImage3D, 11, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(imageSize), uintptr(data), 0)
}
func CompressedTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTextureImage1DEXT, 8, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(border), uintptr(imageSize), uintptr(bits), 0)
}
func CompressedTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTextureImage2DEXT, 9, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(imageSize), uintptr(bits))
}
func CompressedTextureImage3DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall12(gpCompressedTextureImage3DEXT, 10, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(imageSize), uintptr(bits), 0, 0)
}

// specify a one-dimensional texture subimage in a compressed     format
func CompressedTextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTextureSubImage1D, 7, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(imageSize), uintptr(data), 0, 0)
}
func CompressedTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTextureSubImage1DEXT, 8, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(imageSize), uintptr(bits), 0)
}

// specify a two-dimensional texture subimage in a compressed format
func CompressedTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpCompressedTextureSubImage2D, 9, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(imageSize), uintptr(data))
}
func CompressedTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall12(gpCompressedTextureSubImage2DEXT, 10, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(imageSize), uintptr(bits), 0, 0)
}

// specify a three-dimensional texture subimage in a compressed format
func CompressedTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
	syscall.Syscall12(gpCompressedTextureSubImage3D, 11, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(imageSize), uintptr(data), 0)
}
func CompressedTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
	syscall.Syscall12(gpCompressedTextureSubImage3DEXT, 12, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(imageSize), uintptr(bits))
}
func ConservativeRasterParameterfNV(pname uint32, value float32) {
	syscall.Syscall(gpConservativeRasterParameterfNV, 2, uintptr(pname), uintptr(math.Float32bits(value)), 0)
}
func ConservativeRasterParameteriNV(pname uint32, param int32) {
	syscall.Syscall(gpConservativeRasterParameteriNV, 2, uintptr(pname), uintptr(param), 0)
}

// copy all or part of the data store of a buffer object to the data store of another buffer object
func CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset int, writeOffset int, size int) {
	syscall.Syscall6(gpCopyBufferSubData, 5, uintptr(readTarget), uintptr(writeTarget), uintptr(readOffset), uintptr(writeOffset), uintptr(size), 0)
}

// perform a raw data copy between two images
func CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
	syscall.Syscall15(gpCopyImageSubData, 15, uintptr(srcName), uintptr(srcTarget), uintptr(srcLevel), uintptr(srcX), uintptr(srcY), uintptr(srcZ), uintptr(dstName), uintptr(dstTarget), uintptr(dstLevel), uintptr(dstX), uintptr(dstY), uintptr(dstZ), uintptr(srcWidth), uintptr(srcHeight), uintptr(srcDepth))
}
func CopyMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
	syscall.Syscall9(gpCopyMultiTexImage1DEXT, 8, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(x), uintptr(y), uintptr(width), uintptr(border), 0)
}
func CopyMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	syscall.Syscall9(gpCopyMultiTexImage2DEXT, 9, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(border))
}
func CopyMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	syscall.Syscall9(gpCopyMultiTexSubImage1DEXT, 7, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(x), uintptr(y), uintptr(width), 0, 0)
}
func CopyMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyMultiTexSubImage2DEXT, 9, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
}
func CopyMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall12(gpCopyMultiTexSubImage3DEXT, 10, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}

// copy all or part of the data store of a buffer object to the data store of another buffer object
func CopyNamedBufferSubData(readBuffer uint32, writeBuffer uint32, readOffset int, writeOffset int, size int) {
	syscall.Syscall6(gpCopyNamedBufferSubData, 5, uintptr(readBuffer), uintptr(writeBuffer), uintptr(readOffset), uintptr(writeOffset), uintptr(size), 0)
}
func CopyPathNV(resultPath uint32, srcPath uint32) {
	syscall.Syscall(gpCopyPathNV, 2, uintptr(resultPath), uintptr(srcPath), 0)
}

// copy pixels in the frame buffer
func CopyPixels(x int32, y int32, width int32, height int32, xtype uint32) {
	syscall.Syscall6(gpCopyPixels, 5, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(xtype), 0)
}

// copy pixels into a 1D texture image
func CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
	syscall.Syscall9(gpCopyTexImage1D, 7, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(x), uintptr(y), uintptr(width), uintptr(border), 0, 0)
}

// copy pixels into a 2D texture image
func CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	syscall.Syscall9(gpCopyTexImage2D, 8, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(border), 0)
}

// copy a one-dimensional texture subimage
func CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	syscall.Syscall6(gpCopyTexSubImage1D, 6, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(x), uintptr(y), uintptr(width))
}

// copy a two-dimensional texture subimage
func CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTexSubImage2D, 8, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0)
}

// copy a three-dimensional texture subimage
func CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTexSubImage3D, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
}
func CopyTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
	syscall.Syscall9(gpCopyTextureImage1DEXT, 8, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(x), uintptr(y), uintptr(width), uintptr(border), 0)
}
func CopyTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
	syscall.Syscall9(gpCopyTextureImage2DEXT, 9, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(border))
}

// copy a one-dimensional texture subimage
func CopyTextureSubImage1D(texture uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	syscall.Syscall6(gpCopyTextureSubImage1D, 6, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(x), uintptr(y), uintptr(width))
}
func CopyTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
	syscall.Syscall9(gpCopyTextureSubImage1DEXT, 7, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(x), uintptr(y), uintptr(width), 0, 0)
}

// copy a two-dimensional texture subimage
func CopyTextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTextureSubImage2D, 8, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0)
}
func CopyTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTextureSubImage2DEXT, 9, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
}

// copy a three-dimensional texture subimage
func CopyTextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpCopyTextureSubImage3D, 9, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height))
}
func CopyTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
	syscall.Syscall12(gpCopyTextureSubImage3DEXT, 10, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}
func CoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpCoverFillPathInstancedNV, 7, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0, 0)
}
func CoverFillPathNV(path uint32, coverMode uint32) {
	syscall.Syscall(gpCoverFillPathNV, 2, uintptr(path), uintptr(coverMode), 0)
}
func CoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpCoverStrokePathInstancedNV, 7, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0, 0)
}
func CoverStrokePathNV(path uint32, coverMode uint32) {
	syscall.Syscall(gpCoverStrokePathNV, 2, uintptr(path), uintptr(coverMode), 0)
}
func CoverageModulationNV(components uint32) {
	syscall.Syscall(gpCoverageModulationNV, 1, uintptr(components), 0, 0)
}
func CoverageModulationTableNV(n int32, v *float32) {
	syscall.Syscall(gpCoverageModulationTableNV, 2, uintptr(n), uintptr(unsafe.Pointer(v)), 0)
}

// create buffer objects
func CreateBuffers(n int32, buffers *uint32) {
	syscall.Syscall(gpCreateBuffers, 2, uintptr(n), uintptr(unsafe.Pointer(buffers)), 0)
}
func CreateCommandListsNV(n int32, lists *uint32) {
	syscall.Syscall(gpCreateCommandListsNV, 2, uintptr(n), uintptr(unsafe.Pointer(lists)), 0)
}

// create framebuffer objects
func CreateFramebuffers(n int32, framebuffers *uint32) {
	syscall.Syscall(gpCreateFramebuffers, 2, uintptr(n), uintptr(unsafe.Pointer(framebuffers)), 0)
}
func CreatePerfQueryINTEL(queryId uint32, queryHandle *uint32) {
	syscall.Syscall(gpCreatePerfQueryINTEL, 2, uintptr(queryId), uintptr(unsafe.Pointer(queryHandle)), 0)
}

// Creates a program object
func CreateProgram() uint32 {
	ret, _, _ := syscall.Syscall(gpCreateProgram, 0, 0, 0, 0)
	return (uint32)(ret)
}

// create program pipeline objects
func CreateProgramPipelines(n int32, pipelines *uint32) {
	syscall.Syscall(gpCreateProgramPipelines, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}

// create query objects
func CreateQueries(target uint32, n int32, ids *uint32) {
	syscall.Syscall(gpCreateQueries, 3, uintptr(target), uintptr(n), uintptr(unsafe.Pointer(ids)))
}

// create renderbuffer objects
func CreateRenderbuffers(n int32, renderbuffers *uint32) {
	syscall.Syscall(gpCreateRenderbuffers, 2, uintptr(n), uintptr(unsafe.Pointer(renderbuffers)), 0)
}

// create sampler objects
func CreateSamplers(n int32, samplers *uint32) {
	syscall.Syscall(gpCreateSamplers, 2, uintptr(n), uintptr(unsafe.Pointer(samplers)), 0)
}

// Creates a shader object
func CreateShader(xtype uint32) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShader, 1, uintptr(xtype), 0, 0)
	return (uint32)(ret)
}
func CreateShaderProgramEXT(xtype uint32, xstring *uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShaderProgramEXT, 2, uintptr(xtype), uintptr(unsafe.Pointer(xstring)), 0)
	return (uint32)(ret)
}

// create a stand-alone program from an array of null-terminated source code strings
func CreateShaderProgramv(xtype uint32, count int32, strings **uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShaderProgramv, 3, uintptr(xtype), uintptr(count), uintptr(unsafe.Pointer(strings)))
	return (uint32)(ret)
}
func CreateShaderProgramvEXT(xtype uint32, count int32, strings **uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpCreateShaderProgramvEXT, 3, uintptr(xtype), uintptr(count), uintptr(unsafe.Pointer(strings)))
	return (uint32)(ret)
}
func CreateStatesNV(n int32, states *uint32) {
	syscall.Syscall(gpCreateStatesNV, 2, uintptr(n), uintptr(unsafe.Pointer(states)), 0)
}

// Parameter context has type *C.struct__cl_context.
// Parameter event has type *C.struct__cl_event.
func CreateSyncFromCLeventARB(context unsafe.Pointer, event unsafe.Pointer, flags uint32) uintptr {
	ret, _, _ := syscall.Syscall(gpCreateSyncFromCLeventARB, 3, uintptr(context), uintptr(event), uintptr(flags))
	return (uintptr)(ret)
}

// create texture objects
func CreateTextures(target uint32, n int32, textures *uint32) {
	syscall.Syscall(gpCreateTextures, 3, uintptr(target), uintptr(n), uintptr(unsafe.Pointer(textures)))
}

// create transform feedback objects
func CreateTransformFeedbacks(n int32, ids *uint32) {
	syscall.Syscall(gpCreateTransformFeedbacks, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// create vertex array objects
func CreateVertexArrays(n int32, arrays *uint32) {
	syscall.Syscall(gpCreateVertexArrays, 2, uintptr(n), uintptr(unsafe.Pointer(arrays)), 0)
}

// specify whether front- or back-facing facets can be culled
func CullFace(mode uint32) {
	syscall.Syscall(gpCullFace, 1, uintptr(mode), 0, 0)
}

// specify a callback to receive debugging messages from the GL
func DebugMessageCallback(callback DebugProc, userParam unsafe.Pointer) {
	syscall.Syscall(gpDebugMessageCallback, 2, newDebugProcCallback(callback), uintptr(userParam), 0)
}
func DebugMessageCallbackARB(callback DebugProc, userParam unsafe.Pointer) {
	syscall.Syscall(gpDebugMessageCallbackARB, 2, newDebugProcCallback(callback), uintptr(userParam), 0)
}
func DebugMessageCallbackKHR(callback DebugProc, userParam unsafe.Pointer) {
	syscall.Syscall(gpDebugMessageCallbackKHR, 2, newDebugProcCallback(callback), uintptr(userParam), 0)
}

// control the reporting of debug messages in a debug context
func DebugMessageControl(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	syscall.Syscall6(gpDebugMessageControl, 6, uintptr(source), uintptr(xtype), uintptr(severity), uintptr(count), uintptr(unsafe.Pointer(ids)), boolToUintptr(enabled))
}
func DebugMessageControlARB(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	syscall.Syscall6(gpDebugMessageControlARB, 6, uintptr(source), uintptr(xtype), uintptr(severity), uintptr(count), uintptr(unsafe.Pointer(ids)), boolToUintptr(enabled))
}
func DebugMessageControlKHR(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
	syscall.Syscall6(gpDebugMessageControlKHR, 6, uintptr(source), uintptr(xtype), uintptr(severity), uintptr(count), uintptr(unsafe.Pointer(ids)), boolToUintptr(enabled))
}

// inject an application-supplied message into the debug message queue
func DebugMessageInsert(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *uint8) {
	syscall.Syscall6(gpDebugMessageInsert, 6, uintptr(source), uintptr(xtype), uintptr(id), uintptr(severity), uintptr(length), uintptr(unsafe.Pointer(buf)))
}
func DebugMessageInsertARB(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *uint8) {
	syscall.Syscall6(gpDebugMessageInsertARB, 6, uintptr(source), uintptr(xtype), uintptr(id), uintptr(severity), uintptr(length), uintptr(unsafe.Pointer(buf)))
}
func DebugMessageInsertKHR(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *uint8) {
	syscall.Syscall6(gpDebugMessageInsertKHR, 6, uintptr(source), uintptr(xtype), uintptr(id), uintptr(severity), uintptr(length), uintptr(unsafe.Pointer(buf)))
}

// delete named buffer objects
func DeleteBuffers(n int32, buffers *uint32) {
	syscall.Syscall(gpDeleteBuffers, 2, uintptr(n), uintptr(unsafe.Pointer(buffers)), 0)
}
func DeleteCommandListsNV(n int32, lists *uint32) {
	syscall.Syscall(gpDeleteCommandListsNV, 2, uintptr(n), uintptr(unsafe.Pointer(lists)), 0)
}

// delete framebuffer objects
func DeleteFramebuffers(n int32, framebuffers *uint32) {
	syscall.Syscall(gpDeleteFramebuffers, 2, uintptr(n), uintptr(unsafe.Pointer(framebuffers)), 0)
}

// delete a contiguous group of display lists
func DeleteLists(list uint32, xrange int32) {
	syscall.Syscall(gpDeleteLists, 2, uintptr(list), uintptr(xrange), 0)
}
func DeleteNamedStringARB(namelen int32, name *uint8) {
	syscall.Syscall(gpDeleteNamedStringARB, 2, uintptr(namelen), uintptr(unsafe.Pointer(name)), 0)
}
func DeletePathsNV(path uint32, xrange int32) {
	syscall.Syscall(gpDeletePathsNV, 2, uintptr(path), uintptr(xrange), 0)
}
func DeletePerfMonitorsAMD(n int32, monitors *uint32) {
	syscall.Syscall(gpDeletePerfMonitorsAMD, 2, uintptr(n), uintptr(unsafe.Pointer(monitors)), 0)
}
func DeletePerfQueryINTEL(queryHandle uint32) {
	syscall.Syscall(gpDeletePerfQueryINTEL, 1, uintptr(queryHandle), 0, 0)
}

// Deletes a program object
func DeleteProgram(program uint32) {
	syscall.Syscall(gpDeleteProgram, 1, uintptr(program), 0, 0)
}

// delete program pipeline objects
func DeleteProgramPipelines(n int32, pipelines *uint32) {
	syscall.Syscall(gpDeleteProgramPipelines, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}
func DeleteProgramPipelinesEXT(n int32, pipelines *uint32) {
	syscall.Syscall(gpDeleteProgramPipelinesEXT, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}

// delete named query objects
func DeleteQueries(n int32, ids *uint32) {
	syscall.Syscall(gpDeleteQueries, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// delete renderbuffer objects
func DeleteRenderbuffers(n int32, renderbuffers *uint32) {
	syscall.Syscall(gpDeleteRenderbuffers, 2, uintptr(n), uintptr(unsafe.Pointer(renderbuffers)), 0)
}

// delete named sampler objects
func DeleteSamplers(count int32, samplers *uint32) {
	syscall.Syscall(gpDeleteSamplers, 2, uintptr(count), uintptr(unsafe.Pointer(samplers)), 0)
}

// Deletes a shader object
func DeleteShader(shader uint32) {
	syscall.Syscall(gpDeleteShader, 1, uintptr(shader), 0, 0)
}
func DeleteStatesNV(n int32, states *uint32) {
	syscall.Syscall(gpDeleteStatesNV, 2, uintptr(n), uintptr(unsafe.Pointer(states)), 0)
}

// delete a sync object
func DeleteSync(sync uintptr) {
	syscall.Syscall(gpDeleteSync, 1, uintptr(sync), 0, 0)
}

// delete named textures
func DeleteTextures(n int32, textures *uint32) {
	syscall.Syscall(gpDeleteTextures, 2, uintptr(n), uintptr(unsafe.Pointer(textures)), 0)
}

// delete transform feedback objects
func DeleteTransformFeedbacks(n int32, ids *uint32) {
	syscall.Syscall(gpDeleteTransformFeedbacks, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// delete vertex array objects
func DeleteVertexArrays(n int32, arrays *uint32) {
	syscall.Syscall(gpDeleteVertexArrays, 2, uintptr(n), uintptr(unsafe.Pointer(arrays)), 0)
}

// specify the value used for depth buffer comparisons
func DepthFunc(xfunc uint32) {
	syscall.Syscall(gpDepthFunc, 1, uintptr(xfunc), 0, 0)
}

// enable or disable writing into the depth buffer
func DepthMask(flag bool) {
	syscall.Syscall(gpDepthMask, 1, boolToUintptr(flag), 0, 0)
}

// specify mapping of depth values from normalized device coordinates to window coordinates
func DepthRange(n float64, f float64) {
	syscall.Syscall(gpDepthRange, 2, uintptr(math.Float64bits(n)), uintptr(math.Float64bits(f)), 0)
}
func DepthRangeArrayv(first uint32, count int32, v *float64) {
	syscall.Syscall(gpDepthRangeArrayv, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}

// specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
func DepthRangeIndexed(index uint32, n float64, f float64) {
	syscall.Syscall(gpDepthRangeIndexed, 3, uintptr(index), uintptr(math.Float64bits(n)), uintptr(math.Float64bits(f)))
}

// specify mapping of depth values from normalized device coordinates to window coordinates
func DepthRangef(n float32, f float32) {
	syscall.Syscall(gpDepthRangef, 2, uintptr(math.Float32bits(n)), uintptr(math.Float32bits(f)), 0)
}

// Detaches a shader object from a program object to which it is attached
func DetachShader(program uint32, shader uint32) {
	syscall.Syscall(gpDetachShader, 2, uintptr(program), uintptr(shader), 0)
}
func Disable(cap uint32) {
	syscall.Syscall(gpDisable, 1, uintptr(cap), 0, 0)
}
func DisableClientState(array uint32) {
	syscall.Syscall(gpDisableClientState, 1, uintptr(array), 0, 0)
}
func DisableClientStateIndexedEXT(array uint32, index uint32) {
	syscall.Syscall(gpDisableClientStateIndexedEXT, 2, uintptr(array), uintptr(index), 0)
}
func DisableClientStateiEXT(array uint32, index uint32) {
	syscall.Syscall(gpDisableClientStateiEXT, 2, uintptr(array), uintptr(index), 0)
}
func DisableIndexedEXT(target uint32, index uint32) {
	syscall.Syscall(gpDisableIndexedEXT, 2, uintptr(target), uintptr(index), 0)
}

// Enable or disable a generic vertex attribute     array
func DisableVertexArrayAttrib(vaobj uint32, index uint32) {
	syscall.Syscall(gpDisableVertexArrayAttrib, 2, uintptr(vaobj), uintptr(index), 0)
}
func DisableVertexArrayAttribEXT(vaobj uint32, index uint32) {
	syscall.Syscall(gpDisableVertexArrayAttribEXT, 2, uintptr(vaobj), uintptr(index), 0)
}
func DisableVertexArrayEXT(vaobj uint32, array uint32) {
	syscall.Syscall(gpDisableVertexArrayEXT, 2, uintptr(vaobj), uintptr(array), 0)
}

// Enable or disable a generic vertex attribute     array
func DisableVertexAttribArray(index uint32) {
	syscall.Syscall(gpDisableVertexAttribArray, 1, uintptr(index), 0, 0)
}
func Disablei(target uint32, index uint32) {
	syscall.Syscall(gpDisablei, 2, uintptr(target), uintptr(index), 0)
}

// launch one or more compute work groups
func DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32) {
	syscall.Syscall(gpDispatchCompute, 3, uintptr(num_groups_x), uintptr(num_groups_y), uintptr(num_groups_z))
}
func DispatchComputeGroupSizeARB(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32, group_size_x uint32, group_size_y uint32, group_size_z uint32) {
	syscall.Syscall6(gpDispatchComputeGroupSizeARB, 6, uintptr(num_groups_x), uintptr(num_groups_y), uintptr(num_groups_z), uintptr(group_size_x), uintptr(group_size_y), uintptr(group_size_z))
}

// launch one or more compute work groups using parameters stored in a buffer
func DispatchComputeIndirect(indirect int) {
	syscall.Syscall(gpDispatchComputeIndirect, 1, uintptr(indirect), 0, 0)
}

// render primitives from array data
func DrawArrays(mode uint32, first int32, count int32) {
	syscall.Syscall(gpDrawArrays, 3, uintptr(mode), uintptr(first), uintptr(count))
}

// render primitives from array data, taking parameters from memory
func DrawArraysIndirect(mode uint32, indirect unsafe.Pointer) {
	syscall.Syscall(gpDrawArraysIndirect, 2, uintptr(mode), uintptr(indirect), 0)
}

// draw multiple instances of a range of elements
func DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32) {
	syscall.Syscall6(gpDrawArraysInstanced, 4, uintptr(mode), uintptr(first), uintptr(count), uintptr(instancecount), 0, 0)
}
func DrawArraysInstancedARB(mode uint32, first int32, count int32, primcount int32) {
	syscall.Syscall6(gpDrawArraysInstancedARB, 4, uintptr(mode), uintptr(first), uintptr(count), uintptr(primcount), 0, 0)
}

// draw multiple instances of a range of elements with offset applied to instanced attributes
func DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32) {
	syscall.Syscall6(gpDrawArraysInstancedBaseInstance, 5, uintptr(mode), uintptr(first), uintptr(count), uintptr(instancecount), uintptr(baseinstance), 0)
}
func DrawArraysInstancedEXT(mode uint32, start int32, count int32, primcount int32) {
	syscall.Syscall6(gpDrawArraysInstancedEXT, 4, uintptr(mode), uintptr(start), uintptr(count), uintptr(primcount), 0, 0)
}

// specify which color buffers are to be drawn into
func DrawBuffer(buf uint32) {
	syscall.Syscall(gpDrawBuffer, 1, uintptr(buf), 0, 0)
}

// Specifies a list of color buffers to be drawn     into
func DrawBuffers(n int32, bufs *uint32) {
	syscall.Syscall(gpDrawBuffers, 2, uintptr(n), uintptr(unsafe.Pointer(bufs)), 0)
}
func DrawCommandsAddressNV(primitiveMode uint32, indirects *uint64, sizes *int32, count uint32) {
	syscall.Syscall6(gpDrawCommandsAddressNV, 4, uintptr(primitiveMode), uintptr(unsafe.Pointer(indirects)), uintptr(unsafe.Pointer(sizes)), uintptr(count), 0, 0)
}
func DrawCommandsNV(primitiveMode uint32, buffer uint32, indirects *int, sizes *int32, count uint32) {
	syscall.Syscall6(gpDrawCommandsNV, 5, uintptr(primitiveMode), uintptr(buffer), uintptr(unsafe.Pointer(indirects)), uintptr(unsafe.Pointer(sizes)), uintptr(count), 0)
}
func DrawCommandsStatesAddressNV(indirects *uint64, sizes *int32, states *uint32, fbos *uint32, count uint32) {
	syscall.Syscall6(gpDrawCommandsStatesAddressNV, 5, uintptr(unsafe.Pointer(indirects)), uintptr(unsafe.Pointer(sizes)), uintptr(unsafe.Pointer(states)), uintptr(unsafe.Pointer(fbos)), uintptr(count), 0)
}
func DrawCommandsStatesNV(buffer uint32, indirects *int, sizes *int32, states *uint32, fbos *uint32, count uint32) {
	syscall.Syscall6(gpDrawCommandsStatesNV, 6, uintptr(buffer), uintptr(unsafe.Pointer(indirects)), uintptr(unsafe.Pointer(sizes)), uintptr(unsafe.Pointer(states)), uintptr(unsafe.Pointer(fbos)), uintptr(count))
}

// render primitives from array data
func DrawElements(mode uint32, count int32, xtype uint32, indices unsafe.Pointer) {
	syscall.Syscall6(gpDrawElements, 4, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), 0, 0)
}
func DrawElementsWithOffset(mode uint32, count int32, xtype uint32, indices uintptr) {
	syscall.Syscall6(gpDrawElements, 4, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), 0, 0)
}

// render primitives from array data with a per-element offset
func DrawElementsBaseVertex(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
	syscall.Syscall6(gpDrawElementsBaseVertex, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(basevertex), 0)
}

// render indexed primitives from array data, taking parameters from memory
func DrawElementsIndirect(mode uint32, xtype uint32, indirect unsafe.Pointer) {
	syscall.Syscall(gpDrawElementsIndirect, 3, uintptr(mode), uintptr(xtype), uintptr(indirect))
}

// draw multiple instances of a set of elements
func DrawElementsInstanced(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32) {
	syscall.Syscall6(gpDrawElementsInstanced, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), 0)
}
func DrawElementsInstancedARB(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
	syscall.Syscall6(gpDrawElementsInstancedARB, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(primcount), 0)
}

// draw multiple instances of a set of elements with offset applied to instanced attributes
func DrawElementsInstancedBaseInstance(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32) {
	syscall.Syscall6(gpDrawElementsInstancedBaseInstance, 6, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), uintptr(baseinstance))
}

// render multiple instances of a set of primitives from array data with a per-element offset
func DrawElementsInstancedBaseVertex(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
	syscall.Syscall6(gpDrawElementsInstancedBaseVertex, 6, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), uintptr(basevertex))
}

// render multiple instances of a set of primitives from array data with a per-element offset
func DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32) {
	syscall.Syscall9(gpDrawElementsInstancedBaseVertexBaseInstance, 7, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(instancecount), uintptr(basevertex), uintptr(baseinstance), 0, 0)
}
func DrawElementsInstancedEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
	syscall.Syscall6(gpDrawElementsInstancedEXT, 5, uintptr(mode), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(primcount), 0)
}
func DrawMeshTasksIndirectNV(indirect int) {
	syscall.Syscall(gpDrawMeshTasksIndirectNV, 1, uintptr(indirect), 0, 0)
}
func DrawMeshTasksNV(first uint32, count uint32) {
	syscall.Syscall(gpDrawMeshTasksNV, 2, uintptr(first), uintptr(count), 0)
}

// write a block of pixels to the frame buffer
func DrawPixels(width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpDrawPixels, 5, uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}

// render primitives from array data
func DrawRangeElements(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer) {
	syscall.Syscall6(gpDrawRangeElements, 6, uintptr(mode), uintptr(start), uintptr(end), uintptr(count), uintptr(xtype), uintptr(indices))
}

// render primitives from array data with a per-element offset
func DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
	syscall.Syscall9(gpDrawRangeElementsBaseVertex, 7, uintptr(mode), uintptr(start), uintptr(end), uintptr(count), uintptr(xtype), uintptr(indices), uintptr(basevertex), 0, 0)
}

// render primitives using a count derived from a transform feedback object
func DrawTransformFeedback(mode uint32, id uint32) {
	syscall.Syscall(gpDrawTransformFeedback, 2, uintptr(mode), uintptr(id), 0)
}

// render multiple instances of primitives using a count derived from a transform feedback object
func DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32) {
	syscall.Syscall(gpDrawTransformFeedbackInstanced, 3, uintptr(mode), uintptr(id), uintptr(instancecount))
}

// render primitives using a count derived from a specifed stream of a transform feedback object
func DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32) {
	syscall.Syscall(gpDrawTransformFeedbackStream, 3, uintptr(mode), uintptr(id), uintptr(stream))
}

// render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
func DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32) {
	syscall.Syscall6(gpDrawTransformFeedbackStreamInstanced, 4, uintptr(mode), uintptr(id), uintptr(stream), uintptr(instancecount), 0, 0)
}
func DrawVkImageNV(vkImage uint64, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32) {
	syscall.Syscall12(gpDrawVkImageNV, 11, uintptr(vkImage), uintptr(sampler), uintptr(math.Float32bits(x0)), uintptr(math.Float32bits(y0)), uintptr(math.Float32bits(x1)), uintptr(math.Float32bits(y1)), uintptr(math.Float32bits(z)), uintptr(math.Float32bits(s0)), uintptr(math.Float32bits(t0)), uintptr(math.Float32bits(s1)), uintptr(math.Float32bits(t1)), 0)
}

// Parameter image has type C.GLeglImageOES.
func EGLImageTargetTexStorageEXT(target uint32, image unsafe.Pointer, attrib_list *int32) {
	syscall.Syscall(gpEGLImageTargetTexStorageEXT, 3, uintptr(target), uintptr(image), uintptr(unsafe.Pointer(attrib_list)))
}

// Parameter image has type C.GLeglImageOES.
func EGLImageTargetTextureStorageEXT(texture uint32, image unsafe.Pointer, attrib_list *int32) {
	syscall.Syscall(gpEGLImageTargetTextureStorageEXT, 3, uintptr(texture), uintptr(image), uintptr(unsafe.Pointer(attrib_list)))
}

// flag edges as either boundary or nonboundary
func EdgeFlag(flag bool) {
	syscall.Syscall(gpEdgeFlag, 1, boolToUintptr(flag), 0, 0)
}
func EdgeFlagFormatNV(stride int32) {
	syscall.Syscall(gpEdgeFlagFormatNV, 1, uintptr(stride), 0, 0)
}

// define an array of edge flags
func EdgeFlagPointer(stride int32, pointer unsafe.Pointer) {
	syscall.Syscall(gpEdgeFlagPointer, 2, uintptr(stride), uintptr(pointer), 0)
}
func EdgeFlagv(flag *bool) {
	syscall.Syscall(gpEdgeFlagv, 1, uintptr(unsafe.Pointer(flag)), 0, 0)
}

// enable or disable server-side GL capabilities
func Enable(cap uint32) {
	syscall.Syscall(gpEnable, 1, uintptr(cap), 0, 0)
}

// enable or disable client-side capability
func EnableClientState(array uint32) {
	syscall.Syscall(gpEnableClientState, 1, uintptr(array), 0, 0)
}
func EnableClientStateIndexedEXT(array uint32, index uint32) {
	syscall.Syscall(gpEnableClientStateIndexedEXT, 2, uintptr(array), uintptr(index), 0)
}
func EnableClientStateiEXT(array uint32, index uint32) {
	syscall.Syscall(gpEnableClientStateiEXT, 2, uintptr(array), uintptr(index), 0)
}
func EnableIndexedEXT(target uint32, index uint32) {
	syscall.Syscall(gpEnableIndexedEXT, 2, uintptr(target), uintptr(index), 0)
}

// Enable or disable a generic vertex attribute     array
func EnableVertexArrayAttrib(vaobj uint32, index uint32) {
	syscall.Syscall(gpEnableVertexArrayAttrib, 2, uintptr(vaobj), uintptr(index), 0)
}
func EnableVertexArrayAttribEXT(vaobj uint32, index uint32) {
	syscall.Syscall(gpEnableVertexArrayAttribEXT, 2, uintptr(vaobj), uintptr(index), 0)
}
func EnableVertexArrayEXT(vaobj uint32, array uint32) {
	syscall.Syscall(gpEnableVertexArrayEXT, 2, uintptr(vaobj), uintptr(array), 0)
}

// Enable or disable a generic vertex attribute     array
func EnableVertexAttribArray(index uint32) {
	syscall.Syscall(gpEnableVertexAttribArray, 1, uintptr(index), 0, 0)
}
func Enablei(target uint32, index uint32) {
	syscall.Syscall(gpEnablei, 2, uintptr(target), uintptr(index), 0)
}
func End() {
	syscall.Syscall(gpEnd, 0, 0, 0, 0)
}
func EndConditionalRender() {
	syscall.Syscall(gpEndConditionalRender, 0, 0, 0, 0)
}
func EndConditionalRenderNV() {
	syscall.Syscall(gpEndConditionalRenderNV, 0, 0, 0, 0)
}
func EndList() {
	syscall.Syscall(gpEndList, 0, 0, 0, 0)
}
func EndPerfMonitorAMD(monitor uint32) {
	syscall.Syscall(gpEndPerfMonitorAMD, 1, uintptr(monitor), 0, 0)
}
func EndPerfQueryINTEL(queryHandle uint32) {
	syscall.Syscall(gpEndPerfQueryINTEL, 1, uintptr(queryHandle), 0, 0)
}
func EndQuery(target uint32) {
	syscall.Syscall(gpEndQuery, 1, uintptr(target), 0, 0)
}
func EndQueryIndexed(target uint32, index uint32) {
	syscall.Syscall(gpEndQueryIndexed, 2, uintptr(target), uintptr(index), 0)
}
func EndTransformFeedback() {
	syscall.Syscall(gpEndTransformFeedback, 0, 0, 0, 0)
}
func EvalCoord1d(u float64) {
	syscall.Syscall(gpEvalCoord1d, 1, uintptr(math.Float64bits(u)), 0, 0)
}
func EvalCoord1dv(u *float64) {
	syscall.Syscall(gpEvalCoord1dv, 1, uintptr(unsafe.Pointer(u)), 0, 0)
}
func EvalCoord1f(u float32) {
	syscall.Syscall(gpEvalCoord1f, 1, uintptr(math.Float32bits(u)), 0, 0)
}
func EvalCoord1fv(u *float32) {
	syscall.Syscall(gpEvalCoord1fv, 1, uintptr(unsafe.Pointer(u)), 0, 0)
}
func EvalCoord2d(u float64, v float64) {
	syscall.Syscall(gpEvalCoord2d, 2, uintptr(math.Float64bits(u)), uintptr(math.Float64bits(v)), 0)
}
func EvalCoord2dv(u *float64) {
	syscall.Syscall(gpEvalCoord2dv, 1, uintptr(unsafe.Pointer(u)), 0, 0)
}
func EvalCoord2f(u float32, v float32) {
	syscall.Syscall(gpEvalCoord2f, 2, uintptr(math.Float32bits(u)), uintptr(math.Float32bits(v)), 0)
}
func EvalCoord2fv(u *float32) {
	syscall.Syscall(gpEvalCoord2fv, 1, uintptr(unsafe.Pointer(u)), 0, 0)
}
func EvalMesh1(mode uint32, i1 int32, i2 int32) {
	syscall.Syscall(gpEvalMesh1, 3, uintptr(mode), uintptr(i1), uintptr(i2))
}
func EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32) {
	syscall.Syscall6(gpEvalMesh2, 5, uintptr(mode), uintptr(i1), uintptr(i2), uintptr(j1), uintptr(j2), 0)
}
func EvalPoint1(i int32) {
	syscall.Syscall(gpEvalPoint1, 1, uintptr(i), 0, 0)
}
func EvalPoint2(i int32, j int32) {
	syscall.Syscall(gpEvalPoint2, 2, uintptr(i), uintptr(j), 0)
}
func EvaluateDepthValuesARB() {
	syscall.Syscall(gpEvaluateDepthValuesARB, 0, 0, 0, 0)
}

// controls feedback mode
func FeedbackBuffer(size int32, xtype uint32, buffer *float32) {
	syscall.Syscall(gpFeedbackBuffer, 3, uintptr(size), uintptr(xtype), uintptr(unsafe.Pointer(buffer)))
}

// create a new sync object and insert it into the GL command stream
func FenceSync(condition uint32, flags uint32) uintptr {
	ret, _, _ := syscall.Syscall(gpFenceSync, 2, uintptr(condition), uintptr(flags), 0)
	return (uintptr)(ret)
}

// block until all GL execution is complete
func Finish() {
	syscall.Syscall(gpFinish, 0, 0, 0, 0)
}

// force execution of GL commands in finite time
func Flush() {
	syscall.Syscall(gpFlush, 0, 0, 0, 0)
}

// indicate modifications to a range of a mapped buffer
func FlushMappedBufferRange(target uint32, offset int, length int) {
	syscall.Syscall(gpFlushMappedBufferRange, 3, uintptr(target), uintptr(offset), uintptr(length))
}

// indicate modifications to a range of a mapped buffer
func FlushMappedNamedBufferRange(buffer uint32, offset int, length int) {
	syscall.Syscall(gpFlushMappedNamedBufferRange, 3, uintptr(buffer), uintptr(offset), uintptr(length))
}
func FlushMappedNamedBufferRangeEXT(buffer uint32, offset int, length int) {
	syscall.Syscall(gpFlushMappedNamedBufferRangeEXT, 3, uintptr(buffer), uintptr(offset), uintptr(length))
}
func FogCoordFormatNV(xtype uint32, stride int32) {
	syscall.Syscall(gpFogCoordFormatNV, 2, uintptr(xtype), uintptr(stride), 0)
}

// define an array of fog coordinates
func FogCoordPointer(xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall(gpFogCoordPointer, 3, uintptr(xtype), uintptr(stride), uintptr(pointer))
}
func FogCoordd(coord float64) {
	syscall.Syscall(gpFogCoordd, 1, uintptr(math.Float64bits(coord)), 0, 0)
}
func FogCoorddv(coord *float64) {
	syscall.Syscall(gpFogCoorddv, 1, uintptr(unsafe.Pointer(coord)), 0, 0)
}
func FogCoordf(coord float32) {
	syscall.Syscall(gpFogCoordf, 1, uintptr(math.Float32bits(coord)), 0, 0)
}
func FogCoordfv(coord *float32) {
	syscall.Syscall(gpFogCoordfv, 1, uintptr(unsafe.Pointer(coord)), 0, 0)
}
func Fogf(pname uint32, param float32) {
	syscall.Syscall(gpFogf, 2, uintptr(pname), uintptr(math.Float32bits(param)), 0)
}
func Fogfv(pname uint32, params *float32) {
	syscall.Syscall(gpFogfv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func Fogi(pname uint32, param int32) {
	syscall.Syscall(gpFogi, 2, uintptr(pname), uintptr(param), 0)
}
func Fogiv(pname uint32, params *int32) {
	syscall.Syscall(gpFogiv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func FragmentCoverageColorNV(color uint32) {
	syscall.Syscall(gpFragmentCoverageColorNV, 1, uintptr(color), 0, 0)
}
func FramebufferDrawBufferEXT(framebuffer uint32, mode uint32) {
	syscall.Syscall(gpFramebufferDrawBufferEXT, 2, uintptr(framebuffer), uintptr(mode), 0)
}
func FramebufferDrawBuffersEXT(framebuffer uint32, n int32, bufs *uint32) {
	syscall.Syscall(gpFramebufferDrawBuffersEXT, 3, uintptr(framebuffer), uintptr(n), uintptr(unsafe.Pointer(bufs)))
}
func FramebufferFetchBarrierEXT() {
	syscall.Syscall(gpFramebufferFetchBarrierEXT, 0, 0, 0, 0)
}

// set a named parameter of a framebuffer object
func FramebufferParameteri(target uint32, pname uint32, param int32) {
	syscall.Syscall(gpFramebufferParameteri, 3, uintptr(target), uintptr(pname), uintptr(param))
}
func FramebufferReadBufferEXT(framebuffer uint32, mode uint32) {
	syscall.Syscall(gpFramebufferReadBufferEXT, 2, uintptr(framebuffer), uintptr(mode), 0)
}

// attach a renderbuffer as a logical buffer of a framebuffer object
func FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	syscall.Syscall6(gpFramebufferRenderbuffer, 4, uintptr(target), uintptr(attachment), uintptr(renderbuffertarget), uintptr(renderbuffer), 0, 0)
}
func FramebufferSampleLocationsfvARB(target uint32, start uint32, count int32, v *float32) {
	syscall.Syscall6(gpFramebufferSampleLocationsfvARB, 4, uintptr(target), uintptr(start), uintptr(count), uintptr(unsafe.Pointer(v)), 0, 0)
}
func FramebufferSampleLocationsfvNV(target uint32, start uint32, count int32, v *float32) {
	syscall.Syscall6(gpFramebufferSampleLocationsfvNV, 4, uintptr(target), uintptr(start), uintptr(count), uintptr(unsafe.Pointer(v)), 0, 0)
}

// attach a level of a texture object as a logical buffer of a framebuffer object
func FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32) {
	syscall.Syscall6(gpFramebufferTexture, 4, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), 0, 0)
}
func FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	syscall.Syscall6(gpFramebufferTexture1D, 5, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), 0)
}

// attach a level of a texture object as a logical buffer to the currently bound framebuffer object
func FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	syscall.Syscall6(gpFramebufferTexture2D, 5, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), 0)
}
func FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
	syscall.Syscall6(gpFramebufferTexture3D, 6, uintptr(target), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), uintptr(zoffset))
}
func FramebufferTextureARB(target uint32, attachment uint32, texture uint32, level int32) {
	syscall.Syscall6(gpFramebufferTextureARB, 4, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), 0, 0)
}
func FramebufferTextureFaceARB(target uint32, attachment uint32, texture uint32, level int32, face uint32) {
	syscall.Syscall6(gpFramebufferTextureFaceARB, 5, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(face), 0)
}

// attach a single layer of a texture object as a logical buffer of a framebuffer object
func FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
	syscall.Syscall6(gpFramebufferTextureLayer, 5, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(layer), 0)
}
func FramebufferTextureLayerARB(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
	syscall.Syscall6(gpFramebufferTextureLayerARB, 5, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(layer), 0)
}
func FramebufferTextureMultiviewOVR(target uint32, attachment uint32, texture uint32, level int32, baseViewIndex int32, numViews int32) {
	syscall.Syscall6(gpFramebufferTextureMultiviewOVR, 6, uintptr(target), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(baseViewIndex), uintptr(numViews))
}

// define front- and back-facing polygons
func FrontFace(mode uint32) {
	syscall.Syscall(gpFrontFace, 1, uintptr(mode), 0, 0)
}

// multiply the current matrix by a perspective matrix
func Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	syscall.Syscall6(gpFrustum, 6, uintptr(math.Float64bits(left)), uintptr(math.Float64bits(right)), uintptr(math.Float64bits(bottom)), uintptr(math.Float64bits(top)), uintptr(math.Float64bits(zNear)), uintptr(math.Float64bits(zFar)))
}

// generate buffer object names
func GenBuffers(n int32, buffers *uint32) {
	syscall.Syscall(gpGenBuffers, 2, uintptr(n), uintptr(unsafe.Pointer(buffers)), 0)
}

// generate framebuffer object names
func GenFramebuffers(n int32, framebuffers *uint32) {
	syscall.Syscall(gpGenFramebuffers, 2, uintptr(n), uintptr(unsafe.Pointer(framebuffers)), 0)
}

// generate a contiguous set of empty display lists
func GenLists(xrange int32) uint32 {
	ret, _, _ := syscall.Syscall(gpGenLists, 1, uintptr(xrange), 0, 0)
	return (uint32)(ret)
}
func GenPathsNV(xrange int32) uint32 {
	ret, _, _ := syscall.Syscall(gpGenPathsNV, 1, uintptr(xrange), 0, 0)
	return (uint32)(ret)
}
func GenPerfMonitorsAMD(n int32, monitors *uint32) {
	syscall.Syscall(gpGenPerfMonitorsAMD, 2, uintptr(n), uintptr(unsafe.Pointer(monitors)), 0)
}

// reserve program pipeline object names
func GenProgramPipelines(n int32, pipelines *uint32) {
	syscall.Syscall(gpGenProgramPipelines, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}
func GenProgramPipelinesEXT(n int32, pipelines *uint32) {
	syscall.Syscall(gpGenProgramPipelinesEXT, 2, uintptr(n), uintptr(unsafe.Pointer(pipelines)), 0)
}

// generate query object names
func GenQueries(n int32, ids *uint32) {
	syscall.Syscall(gpGenQueries, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// generate renderbuffer object names
func GenRenderbuffers(n int32, renderbuffers *uint32) {
	syscall.Syscall(gpGenRenderbuffers, 2, uintptr(n), uintptr(unsafe.Pointer(renderbuffers)), 0)
}

// generate sampler object names
func GenSamplers(count int32, samplers *uint32) {
	syscall.Syscall(gpGenSamplers, 2, uintptr(count), uintptr(unsafe.Pointer(samplers)), 0)
}

// generate texture names
func GenTextures(n int32, textures *uint32) {
	syscall.Syscall(gpGenTextures, 2, uintptr(n), uintptr(unsafe.Pointer(textures)), 0)
}

// reserve transform feedback object names
func GenTransformFeedbacks(n int32, ids *uint32) {
	syscall.Syscall(gpGenTransformFeedbacks, 2, uintptr(n), uintptr(unsafe.Pointer(ids)), 0)
}

// generate vertex array object names
func GenVertexArrays(n int32, arrays *uint32) {
	syscall.Syscall(gpGenVertexArrays, 2, uintptr(n), uintptr(unsafe.Pointer(arrays)), 0)
}

// generate mipmaps for a specified texture object
func GenerateMipmap(target uint32) {
	syscall.Syscall(gpGenerateMipmap, 1, uintptr(target), 0, 0)
}
func GenerateMultiTexMipmapEXT(texunit uint32, target uint32) {
	syscall.Syscall(gpGenerateMultiTexMipmapEXT, 2, uintptr(texunit), uintptr(target), 0)
}

// generate mipmaps for a specified texture object
func GenerateTextureMipmap(texture uint32) {
	syscall.Syscall(gpGenerateTextureMipmap, 1, uintptr(texture), 0, 0)
}
func GenerateTextureMipmapEXT(texture uint32, target uint32) {
	syscall.Syscall(gpGenerateTextureMipmapEXT, 2, uintptr(texture), uintptr(target), 0)
}

// retrieve information about the set of active atomic counter buffers for a program
func GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetActiveAtomicCounterBufferiv, 4, uintptr(program), uintptr(bufferIndex), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// Returns information about an active attribute variable for the specified program object
func GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *uint8) {
	syscall.Syscall9(gpGetActiveAttrib, 7, uintptr(program), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(size)), uintptr(unsafe.Pointer(xtype)), uintptr(unsafe.Pointer(name)), 0, 0)
}

// query the name of an active shader subroutine
func GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufsize int32, length *int32, name *uint8) {
	syscall.Syscall6(gpGetActiveSubroutineName, 6, uintptr(program), uintptr(shadertype), uintptr(index), uintptr(bufsize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(name)))
}

// query the name of an active shader subroutine uniform
func GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufsize int32, length *int32, name *uint8) {
	syscall.Syscall6(gpGetActiveSubroutineUniformName, 6, uintptr(program), uintptr(shadertype), uintptr(index), uintptr(bufsize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(name)))
}
func GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32) {
	syscall.Syscall6(gpGetActiveSubroutineUniformiv, 5, uintptr(program), uintptr(shadertype), uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(values)), 0)
}

// Returns information about an active uniform variable for the specified program object
func GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *uint8) {
	syscall.Syscall9(gpGetActiveUniform, 7, uintptr(program), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(size)), uintptr(unsafe.Pointer(xtype)), uintptr(unsafe.Pointer(name)), 0, 0)
}

// retrieve the name of an active uniform block
func GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *uint8) {
	syscall.Syscall6(gpGetActiveUniformBlockName, 5, uintptr(program), uintptr(uniformBlockIndex), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(uniformBlockName)), 0)
}

// query information about an active uniform block
func GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetActiveUniformBlockiv, 4, uintptr(program), uintptr(uniformBlockIndex), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// query the name of an active uniform
func GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *uint8) {
	syscall.Syscall6(gpGetActiveUniformName, 5, uintptr(program), uintptr(uniformIndex), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(uniformName)), 0)
}

// Returns information about several active uniform variables for the specified program object
func GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetActiveUniformsiv, 5, uintptr(program), uintptr(uniformCount), uintptr(unsafe.Pointer(uniformIndices)), uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}

// Returns the handles of the shader objects attached to a program object
func GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32) {
	syscall.Syscall6(gpGetAttachedShaders, 4, uintptr(program), uintptr(maxCount), uintptr(unsafe.Pointer(count)), uintptr(unsafe.Pointer(shaders)), 0, 0)
}

// Returns the location of an attribute variable
func GetAttribLocation(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetAttribLocation, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}
func GetBooleanIndexedvEXT(target uint32, index uint32, data *bool) {
	syscall.Syscall(gpGetBooleanIndexedvEXT, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetBooleani_v(target uint32, index uint32, data *bool) {
	syscall.Syscall(gpGetBooleani_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetBooleanv(pname uint32, data *bool) {
	syscall.Syscall(gpGetBooleanv, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}

// return parameters of a buffer object
func GetBufferParameteri64v(target uint32, pname uint32, params *int64) {
	syscall.Syscall(gpGetBufferParameteri64v, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return parameters of a buffer object
func GetBufferParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetBufferParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetBufferParameterui64vNV(target uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpGetBufferParameterui64vNV, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return the pointer to a mapped buffer object's data store
func GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetBufferPointerv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// returns a subset of a buffer object's data store
func GetBufferSubData(target uint32, offset int, size int, data unsafe.Pointer) {
	syscall.Syscall6(gpGetBufferSubData, 4, uintptr(target), uintptr(offset), uintptr(size), uintptr(data), 0, 0)
}

// return the coefficients of the specified clipping plane
func GetClipPlane(plane uint32, equation *float64) {
	syscall.Syscall(gpGetClipPlane, 2, uintptr(plane), uintptr(unsafe.Pointer(equation)), 0)
}
func GetCommandHeaderNV(tokenID uint32, size uint32) uint32 {
	ret, _, _ := syscall.Syscall(gpGetCommandHeaderNV, 2, uintptr(tokenID), uintptr(size), 0)
	return (uint32)(ret)
}
func GetCompressedMultiTexImageEXT(texunit uint32, target uint32, lod int32, img unsafe.Pointer) {
	syscall.Syscall6(gpGetCompressedMultiTexImageEXT, 4, uintptr(texunit), uintptr(target), uintptr(lod), uintptr(img), 0, 0)
}

// return a compressed texture image
func GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer) {
	syscall.Syscall(gpGetCompressedTexImage, 3, uintptr(target), uintptr(level), uintptr(img))
}

// return a compressed texture image
func GetCompressedTextureImage(texture uint32, level int32, bufSize int32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpGetCompressedTextureImage, 4, uintptr(texture), uintptr(level), uintptr(bufSize), uintptr(pixels), 0, 0)
}
func GetCompressedTextureImageEXT(texture uint32, target uint32, lod int32, img unsafe.Pointer) {
	syscall.Syscall6(gpGetCompressedTextureImageEXT, 4, uintptr(texture), uintptr(target), uintptr(lod), uintptr(img), 0, 0)
}

// retrieve a sub-region of a compressed texture image from a     compressed texture object
func GetCompressedTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, bufSize int32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpGetCompressedTextureSubImage, 10, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(bufSize), uintptr(pixels), 0, 0)
}
func GetCoverageModulationTableNV(bufsize int32, v *float32) {
	syscall.Syscall(gpGetCoverageModulationTableNV, 2, uintptr(bufsize), uintptr(unsafe.Pointer(v)), 0)
}

// retrieve messages from the debug message log
func GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	ret, _, _ := syscall.Syscall9(gpGetDebugMessageLog, 8, uintptr(count), uintptr(bufSize), uintptr(unsafe.Pointer(sources)), uintptr(unsafe.Pointer(types)), uintptr(unsafe.Pointer(ids)), uintptr(unsafe.Pointer(severities)), uintptr(unsafe.Pointer(lengths)), uintptr(unsafe.Pointer(messageLog)), 0)
	return (uint32)(ret)
}
func GetDebugMessageLogARB(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	ret, _, _ := syscall.Syscall9(gpGetDebugMessageLogARB, 8, uintptr(count), uintptr(bufSize), uintptr(unsafe.Pointer(sources)), uintptr(unsafe.Pointer(types)), uintptr(unsafe.Pointer(ids)), uintptr(unsafe.Pointer(severities)), uintptr(unsafe.Pointer(lengths)), uintptr(unsafe.Pointer(messageLog)), 0)
	return (uint32)(ret)
}
func GetDebugMessageLogKHR(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *uint8) uint32 {
	ret, _, _ := syscall.Syscall9(gpGetDebugMessageLogKHR, 8, uintptr(count), uintptr(bufSize), uintptr(unsafe.Pointer(sources)), uintptr(unsafe.Pointer(types)), uintptr(unsafe.Pointer(ids)), uintptr(unsafe.Pointer(severities)), uintptr(unsafe.Pointer(lengths)), uintptr(unsafe.Pointer(messageLog)), 0)
	return (uint32)(ret)
}
func GetDoubleIndexedvEXT(target uint32, index uint32, data *float64) {
	syscall.Syscall(gpGetDoubleIndexedvEXT, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetDoublei_v(target uint32, index uint32, data *float64) {
	syscall.Syscall(gpGetDoublei_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetDoublei_vEXT(pname uint32, index uint32, params *float64) {
	syscall.Syscall(gpGetDoublei_vEXT, 3, uintptr(pname), uintptr(index), uintptr(unsafe.Pointer(params)))
}
func GetDoublev(pname uint32, data *float64) {
	syscall.Syscall(gpGetDoublev, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}

// return error information
func GetError() uint32 {
	ret, _, _ := syscall.Syscall(gpGetError, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetFirstPerfQueryIdINTEL(queryId *uint32) {
	syscall.Syscall(gpGetFirstPerfQueryIdINTEL, 1, uintptr(unsafe.Pointer(queryId)), 0, 0)
}
func GetFloatIndexedvEXT(target uint32, index uint32, data *float32) {
	syscall.Syscall(gpGetFloatIndexedvEXT, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetFloati_v(target uint32, index uint32, data *float32) {
	syscall.Syscall(gpGetFloati_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetFloati_vEXT(pname uint32, index uint32, params *float32) {
	syscall.Syscall(gpGetFloati_vEXT, 3, uintptr(pname), uintptr(index), uintptr(unsafe.Pointer(params)))
}
func GetFloatv(pname uint32, data *float32) {
	syscall.Syscall(gpGetFloatv, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}

// query the bindings of color indices to user-defined varying out variables
func GetFragDataIndex(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetFragDataIndex, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}

// query the bindings of color numbers to user-defined varying out variables
func GetFragDataLocation(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetFragDataLocation, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}

// retrieve information about attachments of a bound framebuffer object
func GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetFramebufferAttachmentParameteriv, 4, uintptr(target), uintptr(attachment), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// retrieve a named parameter from a framebuffer
func GetFramebufferParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetFramebufferParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetFramebufferParameterivEXT, 3, uintptr(framebuffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// check if the rendering context has not been lost due to software or hardware issues
func GetGraphicsResetStatus() uint32 {
	ret, _, _ := syscall.Syscall(gpGetGraphicsResetStatus, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetGraphicsResetStatusARB() uint32 {
	ret, _, _ := syscall.Syscall(gpGetGraphicsResetStatusARB, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetGraphicsResetStatusKHR() uint32 {
	ret, _, _ := syscall.Syscall(gpGetGraphicsResetStatusKHR, 0, 0, 0, 0)
	return (uint32)(ret)
}
func GetImageHandleARB(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
	ret, _, _ := syscall.Syscall6(gpGetImageHandleARB, 5, uintptr(texture), uintptr(level), boolToUintptr(layered), uintptr(layer), uintptr(format), 0)
	return (uint64)(ret)
}
func GetImageHandleNV(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
	ret, _, _ := syscall.Syscall6(gpGetImageHandleNV, 5, uintptr(texture), uintptr(level), boolToUintptr(layered), uintptr(layer), uintptr(format), 0)
	return (uint64)(ret)
}
func GetInteger64i_v(target uint32, index uint32, data *int64) {
	syscall.Syscall(gpGetInteger64i_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetInteger64v(pname uint32, data *int64) {
	syscall.Syscall(gpGetInteger64v, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}
func GetIntegerIndexedvEXT(target uint32, index uint32, data *int32) {
	syscall.Syscall(gpGetIntegerIndexedvEXT, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetIntegeri_v(target uint32, index uint32, data *int32) {
	syscall.Syscall(gpGetIntegeri_v, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetIntegerui64i_vNV(value uint32, index uint32, result *uint64) {
	syscall.Syscall(gpGetIntegerui64i_vNV, 3, uintptr(value), uintptr(index), uintptr(unsafe.Pointer(result)))
}
func GetIntegerui64vNV(value uint32, result *uint64) {
	syscall.Syscall(gpGetIntegerui64vNV, 2, uintptr(value), uintptr(unsafe.Pointer(result)), 0)
}
func GetIntegerv(pname uint32, data *int32) {
	syscall.Syscall(gpGetIntegerv, 2, uintptr(pname), uintptr(unsafe.Pointer(data)), 0)
}
func GetInternalformatSampleivNV(target uint32, internalformat uint32, samples int32, pname uint32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetInternalformatSampleivNV, 6, uintptr(target), uintptr(internalformat), uintptr(samples), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(params)))
}
func GetInternalformati64v(target uint32, internalformat uint32, pname uint32, bufSize int32, params *int64) {
	syscall.Syscall6(gpGetInternalformati64v, 5, uintptr(target), uintptr(internalformat), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0)
}

// retrieve information about implementation-dependent support for internal formats
func GetInternalformativ(target uint32, internalformat uint32, pname uint32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetInternalformativ, 5, uintptr(target), uintptr(internalformat), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0)
}
func GetLightfv(light uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetLightfv, 3, uintptr(light), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetLightiv(light uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetLightiv, 3, uintptr(light), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetMapdv(target uint32, query uint32, v *float64) {
	syscall.Syscall(gpGetMapdv, 3, uintptr(target), uintptr(query), uintptr(unsafe.Pointer(v)))
}
func GetMapfv(target uint32, query uint32, v *float32) {
	syscall.Syscall(gpGetMapfv, 3, uintptr(target), uintptr(query), uintptr(unsafe.Pointer(v)))
}
func GetMapiv(target uint32, query uint32, v *int32) {
	syscall.Syscall(gpGetMapiv, 3, uintptr(target), uintptr(query), uintptr(unsafe.Pointer(v)))
}
func GetMaterialfv(face uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetMaterialfv, 3, uintptr(face), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetMaterialiv(face uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetMaterialiv, 3, uintptr(face), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetMemoryObjectDetachedResourcesuivNV(memory uint32, pname uint32, first int32, count int32, params *uint32) {
	syscall.Syscall6(gpGetMemoryObjectDetachedResourcesuivNV, 5, uintptr(memory), uintptr(pname), uintptr(first), uintptr(count), uintptr(unsafe.Pointer(params)), 0)
}
func GetMultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetMultiTexEnvfvEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetMultiTexEnvivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
	syscall.Syscall6(gpGetMultiTexGendvEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetMultiTexGenfvEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetMultiTexGenivEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexImageEXT(texunit uint32, target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpGetMultiTexImageEXT, 6, uintptr(texunit), uintptr(target), uintptr(level), uintptr(format), uintptr(xtype), uintptr(pixels))
}
func GetMultiTexLevelParameterfvEXT(texunit uint32, target uint32, level int32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetMultiTexLevelParameterfvEXT, 5, uintptr(texunit), uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func GetMultiTexLevelParameterivEXT(texunit uint32, target uint32, level int32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetMultiTexLevelParameterivEXT, 5, uintptr(texunit), uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func GetMultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetMultiTexParameterIivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
	syscall.Syscall6(gpGetMultiTexParameterIuivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetMultiTexParameterfvEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetMultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetMultiTexParameterivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// retrieve the location of a sample
func GetMultisamplefv(pname uint32, index uint32, val *float32) {
	syscall.Syscall(gpGetMultisamplefv, 3, uintptr(pname), uintptr(index), uintptr(unsafe.Pointer(val)))
}

// return parameters of a buffer object
func GetNamedBufferParameteri64v(buffer uint32, pname uint32, params *int64) {
	syscall.Syscall(gpGetNamedBufferParameteri64v, 3, uintptr(buffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return parameters of a buffer object
func GetNamedBufferParameteriv(buffer uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetNamedBufferParameteriv, 3, uintptr(buffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetNamedBufferParameterivEXT(buffer uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetNamedBufferParameterivEXT, 3, uintptr(buffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetNamedBufferParameterui64vNV(buffer uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpGetNamedBufferParameterui64vNV, 3, uintptr(buffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return the pointer to a mapped buffer object's data store
func GetNamedBufferPointerv(buffer uint32, pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetNamedBufferPointerv, 3, uintptr(buffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetNamedBufferPointervEXT(buffer uint32, pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetNamedBufferPointervEXT, 3, uintptr(buffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// returns a subset of a buffer object's data store
func GetNamedBufferSubData(buffer uint32, offset int, size int, data unsafe.Pointer) {
	syscall.Syscall6(gpGetNamedBufferSubData, 4, uintptr(buffer), uintptr(offset), uintptr(size), uintptr(data), 0, 0)
}
func GetNamedBufferSubDataEXT(buffer uint32, offset int, size int, data unsafe.Pointer) {
	syscall.Syscall6(gpGetNamedBufferSubDataEXT, 4, uintptr(buffer), uintptr(offset), uintptr(size), uintptr(data), 0, 0)
}

// retrieve information about attachments of a framebuffer object
func GetNamedFramebufferAttachmentParameteriv(framebuffer uint32, attachment uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetNamedFramebufferAttachmentParameteriv, 4, uintptr(framebuffer), uintptr(attachment), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetNamedFramebufferAttachmentParameterivEXT(framebuffer uint32, attachment uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetNamedFramebufferAttachmentParameterivEXT, 4, uintptr(framebuffer), uintptr(attachment), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// query a named parameter of a framebuffer object
func GetNamedFramebufferParameteriv(framebuffer uint32, pname uint32, param *int32) {
	syscall.Syscall(gpGetNamedFramebufferParameteriv, 3, uintptr(framebuffer), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func GetNamedFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetNamedFramebufferParameterivEXT, 3, uintptr(framebuffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterIivEXT(program uint32, target uint32, index uint32, params *int32) {
	syscall.Syscall6(gpGetNamedProgramLocalParameterIivEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetNamedProgramLocalParameterIuivEXT(program uint32, target uint32, index uint32, params *uint32) {
	syscall.Syscall6(gpGetNamedProgramLocalParameterIuivEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetNamedProgramLocalParameterdvEXT(program uint32, target uint32, index uint32, params *float64) {
	syscall.Syscall6(gpGetNamedProgramLocalParameterdvEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetNamedProgramLocalParameterfvEXT(program uint32, target uint32, index uint32, params *float32) {
	syscall.Syscall6(gpGetNamedProgramLocalParameterfvEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetNamedProgramStringEXT(program uint32, target uint32, pname uint32, xstring unsafe.Pointer) {
	syscall.Syscall6(gpGetNamedProgramStringEXT, 4, uintptr(program), uintptr(target), uintptr(pname), uintptr(xstring), 0, 0)
}
func GetNamedProgramivEXT(program uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetNamedProgramivEXT, 4, uintptr(program), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// query a named parameter of a renderbuffer object
func GetNamedRenderbufferParameteriv(renderbuffer uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetNamedRenderbufferParameteriv, 3, uintptr(renderbuffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetNamedRenderbufferParameterivEXT(renderbuffer uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetNamedRenderbufferParameterivEXT, 3, uintptr(renderbuffer), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetNamedStringARB(namelen int32, name *uint8, bufSize int32, stringlen *int32, xstring *uint8) {
	syscall.Syscall6(gpGetNamedStringARB, 5, uintptr(namelen), uintptr(unsafe.Pointer(name)), uintptr(bufSize), uintptr(unsafe.Pointer(stringlen)), uintptr(unsafe.Pointer(xstring)), 0)
}
func GetNamedStringivARB(namelen int32, name *uint8, pname uint32, params *int32) {
	syscall.Syscall6(gpGetNamedStringivARB, 4, uintptr(namelen), uintptr(unsafe.Pointer(name)), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetNextPerfQueryIdINTEL(queryId uint32, nextQueryId *uint32) {
	syscall.Syscall(gpGetNextPerfQueryIdINTEL, 2, uintptr(queryId), uintptr(unsafe.Pointer(nextQueryId)), 0)
}

// retrieve the label of a named object identified within a namespace
func GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectLabel, 5, uintptr(identifier), uintptr(name), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0)
}
func GetObjectLabelEXT(xtype uint32, object uint32, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectLabelEXT, 5, uintptr(xtype), uintptr(object), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0)
}
func GetObjectLabelKHR(identifier uint32, name uint32, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectLabelKHR, 5, uintptr(identifier), uintptr(name), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0)
}

// retrieve the label of a sync object identified by a pointer
func GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectPtrLabel, 4, uintptr(ptr), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0, 0)
}
func GetObjectPtrLabelKHR(ptr unsafe.Pointer, bufSize int32, length *int32, label *uint8) {
	syscall.Syscall6(gpGetObjectPtrLabelKHR, 4, uintptr(ptr), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(label)), 0, 0)
}
func GetPathCommandsNV(path uint32, commands *uint8) {
	syscall.Syscall(gpGetPathCommandsNV, 2, uintptr(path), uintptr(unsafe.Pointer(commands)), 0)
}
func GetPathCoordsNV(path uint32, coords *float32) {
	syscall.Syscall(gpGetPathCoordsNV, 2, uintptr(path), uintptr(unsafe.Pointer(coords)), 0)
}
func GetPathDashArrayNV(path uint32, dashArray *float32) {
	syscall.Syscall(gpGetPathDashArrayNV, 2, uintptr(path), uintptr(unsafe.Pointer(dashArray)), 0)
}
func GetPathLengthNV(path uint32, startSegment int32, numSegments int32) float32 {
	ret, _, _ := syscall.Syscall(gpGetPathLengthNV, 3, uintptr(path), uintptr(startSegment), uintptr(numSegments))
	return math.Float32frombits(uint32(ret))
}
func GetPathMetricRangeNV(metricQueryMask uint32, firstPathName uint32, numPaths int32, stride int32, metrics *float32) {
	syscall.Syscall6(gpGetPathMetricRangeNV, 5, uintptr(metricQueryMask), uintptr(firstPathName), uintptr(numPaths), uintptr(stride), uintptr(unsafe.Pointer(metrics)), 0)
}
func GetPathMetricsNV(metricQueryMask uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, stride int32, metrics *float32) {
	syscall.Syscall9(gpGetPathMetricsNV, 7, uintptr(metricQueryMask), uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(stride), uintptr(unsafe.Pointer(metrics)), 0, 0)
}
func GetPathParameterfvNV(path uint32, pname uint32, value *float32) {
	syscall.Syscall(gpGetPathParameterfvNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func GetPathParameterivNV(path uint32, pname uint32, value *int32) {
	syscall.Syscall(gpGetPathParameterivNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func GetPathSpacingNV(pathListMode uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, advanceScale float32, kerningScale float32, transformType uint32, returnedSpacing *float32) {
	syscall.Syscall9(gpGetPathSpacingNV, 9, uintptr(pathListMode), uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(math.Float32bits(advanceScale)), uintptr(math.Float32bits(kerningScale)), uintptr(transformType), uintptr(unsafe.Pointer(returnedSpacing)))
}
func GetPerfCounterInfoINTEL(queryId uint32, counterId uint32, counterNameLength uint32, counterName *uint8, counterDescLength uint32, counterDesc *uint8, counterOffset *uint32, counterDataSize *uint32, counterTypeEnum *uint32, counterDataTypeEnum *uint32, rawCounterMaxValue *uint64) {
	syscall.Syscall12(gpGetPerfCounterInfoINTEL, 11, uintptr(queryId), uintptr(counterId), uintptr(counterNameLength), uintptr(unsafe.Pointer(counterName)), uintptr(counterDescLength), uintptr(unsafe.Pointer(counterDesc)), uintptr(unsafe.Pointer(counterOffset)), uintptr(unsafe.Pointer(counterDataSize)), uintptr(unsafe.Pointer(counterTypeEnum)), uintptr(unsafe.Pointer(counterDataTypeEnum)), uintptr(unsafe.Pointer(rawCounterMaxValue)), 0)
}
func GetPerfMonitorCounterDataAMD(monitor uint32, pname uint32, dataSize int32, data *uint32, bytesWritten *int32) {
	syscall.Syscall6(gpGetPerfMonitorCounterDataAMD, 5, uintptr(monitor), uintptr(pname), uintptr(dataSize), uintptr(unsafe.Pointer(data)), uintptr(unsafe.Pointer(bytesWritten)), 0)
}
func GetPerfMonitorCounterInfoAMD(group uint32, counter uint32, pname uint32, data unsafe.Pointer) {
	syscall.Syscall6(gpGetPerfMonitorCounterInfoAMD, 4, uintptr(group), uintptr(counter), uintptr(pname), uintptr(data), 0, 0)
}
func GetPerfMonitorCounterStringAMD(group uint32, counter uint32, bufSize int32, length *int32, counterString *uint8) {
	syscall.Syscall6(gpGetPerfMonitorCounterStringAMD, 5, uintptr(group), uintptr(counter), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(counterString)), 0)
}
func GetPerfMonitorCountersAMD(group uint32, numCounters *int32, maxActiveCounters *int32, counterSize int32, counters *uint32) {
	syscall.Syscall6(gpGetPerfMonitorCountersAMD, 5, uintptr(group), uintptr(unsafe.Pointer(numCounters)), uintptr(unsafe.Pointer(maxActiveCounters)), uintptr(counterSize), uintptr(unsafe.Pointer(counters)), 0)
}
func GetPerfMonitorGroupStringAMD(group uint32, bufSize int32, length *int32, groupString *uint8) {
	syscall.Syscall6(gpGetPerfMonitorGroupStringAMD, 4, uintptr(group), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(groupString)), 0, 0)
}
func GetPerfMonitorGroupsAMD(numGroups *int32, groupsSize int32, groups *uint32) {
	syscall.Syscall(gpGetPerfMonitorGroupsAMD, 3, uintptr(unsafe.Pointer(numGroups)), uintptr(groupsSize), uintptr(unsafe.Pointer(groups)))
}
func GetPerfQueryDataINTEL(queryHandle uint32, flags uint32, dataSize int32, data unsafe.Pointer, bytesWritten *uint32) {
	syscall.Syscall6(gpGetPerfQueryDataINTEL, 5, uintptr(queryHandle), uintptr(flags), uintptr(dataSize), uintptr(data), uintptr(unsafe.Pointer(bytesWritten)), 0)
}
func GetPerfQueryIdByNameINTEL(queryName *uint8, queryId *uint32) {
	syscall.Syscall(gpGetPerfQueryIdByNameINTEL, 2, uintptr(unsafe.Pointer(queryName)), uintptr(unsafe.Pointer(queryId)), 0)
}
func GetPerfQueryInfoINTEL(queryId uint32, queryNameLength uint32, queryName *uint8, dataSize *uint32, noCounters *uint32, noInstances *uint32, capsMask *uint32) {
	syscall.Syscall9(gpGetPerfQueryInfoINTEL, 7, uintptr(queryId), uintptr(queryNameLength), uintptr(unsafe.Pointer(queryName)), uintptr(unsafe.Pointer(dataSize)), uintptr(unsafe.Pointer(noCounters)), uintptr(unsafe.Pointer(noInstances)), uintptr(unsafe.Pointer(capsMask)), 0, 0)
}
func GetPixelMapfv(xmap uint32, values *float32) {
	syscall.Syscall(gpGetPixelMapfv, 2, uintptr(xmap), uintptr(unsafe.Pointer(values)), 0)
}
func GetPixelMapuiv(xmap uint32, values *uint32) {
	syscall.Syscall(gpGetPixelMapuiv, 2, uintptr(xmap), uintptr(unsafe.Pointer(values)), 0)
}
func GetPixelMapusv(xmap uint32, values *uint16) {
	syscall.Syscall(gpGetPixelMapusv, 2, uintptr(xmap), uintptr(unsafe.Pointer(values)), 0)
}
func GetPointerIndexedvEXT(target uint32, index uint32, data *unsafe.Pointer) {
	syscall.Syscall(gpGetPointerIndexedvEXT, 3, uintptr(target), uintptr(index), uintptr(unsafe.Pointer(data)))
}
func GetPointeri_vEXT(pname uint32, index uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetPointeri_vEXT, 3, uintptr(pname), uintptr(index), uintptr(unsafe.Pointer(params)))
}

// return the address of the specified pointer
func GetPointerv(pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetPointerv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func GetPointervKHR(pname uint32, params *unsafe.Pointer) {
	syscall.Syscall(gpGetPointervKHR, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}

// return the polygon stipple pattern
func GetPolygonStipple(mask *uint8) {
	syscall.Syscall(gpGetPolygonStipple, 1, uintptr(unsafe.Pointer(mask)), 0, 0)
}

// return a binary representation of a program object's compiled and linked executable source
func GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer) {
	syscall.Syscall6(gpGetProgramBinary, 5, uintptr(program), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(binaryFormat)), uintptr(binary), 0)
}

// Returns the information log for a program object
func GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetProgramInfoLog, 4, uintptr(program), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}
func GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetProgramInterfaceiv, 4, uintptr(program), uintptr(programInterface), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}

// retrieve the info log string from a program pipeline object
func GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetProgramPipelineInfoLog, 4, uintptr(pipeline), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}
func GetProgramPipelineInfoLogEXT(pipeline uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetProgramPipelineInfoLogEXT, 4, uintptr(pipeline), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}
func GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetProgramPipelineiv, 3, uintptr(pipeline), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetProgramPipelineivEXT(pipeline uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetProgramPipelineivEXT, 3, uintptr(pipeline), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// query the index of a named resource within a program
func GetProgramResourceIndex(program uint32, programInterface uint32, name *uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpGetProgramResourceIndex, 3, uintptr(program), uintptr(programInterface), uintptr(unsafe.Pointer(name)))
	return (uint32)(ret)
}

// query the location of a named resource within a program
func GetProgramResourceLocation(program uint32, programInterface uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetProgramResourceLocation, 3, uintptr(program), uintptr(programInterface), uintptr(unsafe.Pointer(name)))
	return (int32)(ret)
}

// query the fragment color index of a named variable within a program
func GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetProgramResourceLocationIndex, 3, uintptr(program), uintptr(programInterface), uintptr(unsafe.Pointer(name)))
	return (int32)(ret)
}

// query the name of an indexed resource within a program
func GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *uint8) {
	syscall.Syscall6(gpGetProgramResourceName, 6, uintptr(program), uintptr(programInterface), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(name)))
}
func GetProgramResourcefvNV(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, bufSize int32, length *int32, params *float32) {
	syscall.Syscall9(gpGetProgramResourcefvNV, 8, uintptr(program), uintptr(programInterface), uintptr(index), uintptr(propCount), uintptr(unsafe.Pointer(props)), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(params)), 0)
}
func GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, bufSize int32, length *int32, params *int32) {
	syscall.Syscall9(gpGetProgramResourceiv, 8, uintptr(program), uintptr(programInterface), uintptr(index), uintptr(propCount), uintptr(unsafe.Pointer(props)), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(params)), 0)
}
func GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32) {
	syscall.Syscall6(gpGetProgramStageiv, 4, uintptr(program), uintptr(shadertype), uintptr(pname), uintptr(unsafe.Pointer(values)), 0, 0)
}

// Returns a parameter from a program object
func GetProgramiv(program uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetProgramiv, 3, uintptr(program), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryBufferObjecti64v(id uint32, buffer uint32, pname uint32, offset int) {
	syscall.Syscall6(gpGetQueryBufferObjecti64v, 4, uintptr(id), uintptr(buffer), uintptr(pname), uintptr(offset), 0, 0)
}
func GetQueryBufferObjectiv(id uint32, buffer uint32, pname uint32, offset int) {
	syscall.Syscall6(gpGetQueryBufferObjectiv, 4, uintptr(id), uintptr(buffer), uintptr(pname), uintptr(offset), 0, 0)
}
func GetQueryBufferObjectui64v(id uint32, buffer uint32, pname uint32, offset int) {
	syscall.Syscall6(gpGetQueryBufferObjectui64v, 4, uintptr(id), uintptr(buffer), uintptr(pname), uintptr(offset), 0, 0)
}
func GetQueryBufferObjectuiv(id uint32, buffer uint32, pname uint32, offset int) {
	syscall.Syscall6(gpGetQueryBufferObjectuiv, 4, uintptr(id), uintptr(buffer), uintptr(pname), uintptr(offset), 0, 0)
}

// return parameters of an indexed query object target
func GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetQueryIndexediv, 4, uintptr(target), uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetQueryObjecti64v(id uint32, pname uint32, params *int64) {
	syscall.Syscall(gpGetQueryObjecti64v, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryObjectiv(id uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetQueryObjectiv, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetQueryObjectui64v(id uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpGetQueryObjectui64v, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return parameters of a query object
func GetQueryObjectuiv(id uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetQueryObjectuiv, 3, uintptr(id), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return parameters of a query object target
func GetQueryiv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetQueryiv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// retrieve information about a bound renderbuffer object
func GetRenderbufferParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetRenderbufferParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetSamplerParameterIiv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetSamplerParameterIuiv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameterfv(sampler uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetSamplerParameterfv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetSamplerParameteriv(sampler uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetSamplerParameteriv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Returns the information log for a shader object
func GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8) {
	syscall.Syscall6(gpGetShaderInfoLog, 4, uintptr(shader), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(infoLog)), 0, 0)
}

// retrieve the range and precision for numeric formats supported by the shader compiler
func GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, xrange *int32, precision *int32) {
	syscall.Syscall6(gpGetShaderPrecisionFormat, 4, uintptr(shadertype), uintptr(precisiontype), uintptr(unsafe.Pointer(xrange)), uintptr(unsafe.Pointer(precision)), 0, 0)
}

// Returns the source code string from a shader object
func GetShaderSource(shader uint32, bufSize int32, length *int32, source *uint8) {
	syscall.Syscall6(gpGetShaderSource, 4, uintptr(shader), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(source)), 0, 0)
}

// Returns a parameter from a shader object
func GetShaderiv(shader uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetShaderiv, 3, uintptr(shader), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetShadingRateImagePaletteNV(viewport uint32, entry uint32, rate *uint32) {
	syscall.Syscall(gpGetShadingRateImagePaletteNV, 3, uintptr(viewport), uintptr(entry), uintptr(unsafe.Pointer(rate)))
}
func GetShadingRateSampleLocationivNV(rate uint32, samples uint32, index uint32, location *int32) {
	syscall.Syscall6(gpGetShadingRateSampleLocationivNV, 4, uintptr(rate), uintptr(samples), uintptr(index), uintptr(unsafe.Pointer(location)), 0, 0)
}
func GetStageIndexNV(shadertype uint32) uint16 {
	ret, _, _ := syscall.Syscall(gpGetStageIndexNV, 1, uintptr(shadertype), 0, 0)
	return (uint16)(ret)
}

// return a string describing the current GL connection
func GetString(name uint32) *uint8 {
	ret, _, _ := syscall.Syscall(gpGetString, 1, uintptr(name), 0, 0)
	return (*uint8)(unsafe.Pointer(ret))
}
func GetStringi(name uint32, index uint32) *uint8 {
	ret, _, _ := syscall.Syscall(gpGetStringi, 2, uintptr(name), uintptr(index), 0)
	return (*uint8)(unsafe.Pointer(ret))
}

// retrieve the index of a subroutine uniform of a given shader stage within a program
func GetSubroutineIndex(program uint32, shadertype uint32, name *uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpGetSubroutineIndex, 3, uintptr(program), uintptr(shadertype), uintptr(unsafe.Pointer(name)))
	return (uint32)(ret)
}

// retrieve the location of a subroutine uniform of a given shader stage within a program
func GetSubroutineUniformLocation(program uint32, shadertype uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetSubroutineUniformLocation, 3, uintptr(program), uintptr(shadertype), uintptr(unsafe.Pointer(name)))
	return (int32)(ret)
}

// query the properties of a sync object
func GetSynciv(sync uintptr, pname uint32, bufSize int32, length *int32, values *int32) {
	syscall.Syscall6(gpGetSynciv, 5, uintptr(sync), uintptr(pname), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(values)), 0)
}
func GetTexEnvfv(target uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetTexEnvfv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexEnviv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTexEnviv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexGendv(coord uint32, pname uint32, params *float64) {
	syscall.Syscall(gpGetTexGendv, 3, uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexGenfv(coord uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetTexGenfv, 3, uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexGeniv(coord uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTexGeniv, 3, uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return a texture image
func GetTexImage(target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpGetTexImage, 5, uintptr(target), uintptr(level), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetTexLevelParameterfv, 4, uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetTexLevelParameteriv, 4, uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTexParameterIiv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTexParameterIiv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameterIuiv(target uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetTexParameterIuiv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameterfv(target uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetTexParameterfv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTexParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTexParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTextureHandleARB(texture uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureHandleARB, 1, uintptr(texture), 0, 0)
	return (uint64)(ret)
}
func GetTextureHandleNV(texture uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureHandleNV, 1, uintptr(texture), 0, 0)
	return (uint64)(ret)
}

// return a texture image
func GetTextureImage(texture uint32, level int32, format uint32, xtype uint32, bufSize int32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpGetTextureImage, 6, uintptr(texture), uintptr(level), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(pixels))
}
func GetTextureImageEXT(texture uint32, target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpGetTextureImageEXT, 6, uintptr(texture), uintptr(target), uintptr(level), uintptr(format), uintptr(xtype), uintptr(pixels))
}
func GetTextureLevelParameterfv(texture uint32, level int32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetTextureLevelParameterfv, 4, uintptr(texture), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTextureLevelParameterfvEXT(texture uint32, target uint32, level int32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetTextureLevelParameterfvEXT, 5, uintptr(texture), uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func GetTextureLevelParameteriv(texture uint32, level int32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetTextureLevelParameteriv, 4, uintptr(texture), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTextureLevelParameterivEXT(texture uint32, target uint32, level int32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetTextureLevelParameterivEXT, 5, uintptr(texture), uintptr(target), uintptr(level), uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func GetTextureParameterIiv(texture uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTextureParameterIiv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetTextureParameterIivEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTextureParameterIuiv(texture uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetTextureParameterIuiv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
	syscall.Syscall6(gpGetTextureParameterIuivEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTextureParameterfv(texture uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetTextureParameterfv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpGetTextureParameterfvEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTextureParameteriv(texture uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetTextureParameteriv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetTextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpGetTextureParameterivEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetTextureSamplerHandleARB(texture uint32, sampler uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureSamplerHandleARB, 2, uintptr(texture), uintptr(sampler), 0)
	return (uint64)(ret)
}
func GetTextureSamplerHandleNV(texture uint32, sampler uint32) uint64 {
	ret, _, _ := syscall.Syscall(gpGetTextureSamplerHandleNV, 2, uintptr(texture), uintptr(sampler), 0)
	return (uint64)(ret)
}

// retrieve a sub-region of a texture image from a texture     object
func GetTextureSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, bufSize int32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpGetTextureSubImage, 12, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(pixels))
}

// retrieve information about varying variables selected for transform feedback
func GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *uint8) {
	syscall.Syscall9(gpGetTransformFeedbackVarying, 7, uintptr(program), uintptr(index), uintptr(bufSize), uintptr(unsafe.Pointer(length)), uintptr(unsafe.Pointer(size)), uintptr(unsafe.Pointer(xtype)), uintptr(unsafe.Pointer(name)), 0, 0)
}
func GetTransformFeedbacki64_v(xfb uint32, pname uint32, index uint32, param *int64) {
	syscall.Syscall6(gpGetTransformFeedbacki64_v, 4, uintptr(xfb), uintptr(pname), uintptr(index), uintptr(unsafe.Pointer(param)), 0, 0)
}
func GetTransformFeedbacki_v(xfb uint32, pname uint32, index uint32, param *int32) {
	syscall.Syscall6(gpGetTransformFeedbacki_v, 4, uintptr(xfb), uintptr(pname), uintptr(index), uintptr(unsafe.Pointer(param)), 0, 0)
}

// query the state of a transform feedback object.
func GetTransformFeedbackiv(xfb uint32, pname uint32, param *int32) {
	syscall.Syscall(gpGetTransformFeedbackiv, 3, uintptr(xfb), uintptr(pname), uintptr(unsafe.Pointer(param)))
}

// retrieve the index of a named uniform block
func GetUniformBlockIndex(program uint32, uniformBlockName *uint8) uint32 {
	ret, _, _ := syscall.Syscall(gpGetUniformBlockIndex, 2, uintptr(program), uintptr(unsafe.Pointer(uniformBlockName)), 0)
	return (uint32)(ret)
}

// retrieve the index of a named uniform block
func GetUniformIndices(program uint32, uniformCount int32, uniformNames **uint8, uniformIndices *uint32) {
	syscall.Syscall6(gpGetUniformIndices, 4, uintptr(program), uintptr(uniformCount), uintptr(unsafe.Pointer(uniformNames)), uintptr(unsafe.Pointer(uniformIndices)), 0, 0)
}

// Returns the location of a uniform variable
func GetUniformLocation(program uint32, name *uint8) int32 {
	ret, _, _ := syscall.Syscall(gpGetUniformLocation, 2, uintptr(program), uintptr(unsafe.Pointer(name)), 0)
	return (int32)(ret)
}
func GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32) {
	syscall.Syscall(gpGetUniformSubroutineuiv, 3, uintptr(shadertype), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformdv(program uint32, location int32, params *float64) {
	syscall.Syscall(gpGetUniformdv, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}

// Returns the value of a uniform variable
func GetUniformfv(program uint32, location int32, params *float32) {
	syscall.Syscall(gpGetUniformfv, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformi64vARB(program uint32, location int32, params *int64) {
	syscall.Syscall(gpGetUniformi64vARB, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformi64vNV(program uint32, location int32, params *int64) {
	syscall.Syscall(gpGetUniformi64vNV, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}

// Returns the value of a uniform variable
func GetUniformiv(program uint32, location int32, params *int32) {
	syscall.Syscall(gpGetUniformiv, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformui64vARB(program uint32, location int32, params *uint64) {
	syscall.Syscall(gpGetUniformui64vARB, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformui64vNV(program uint32, location int32, params *uint64) {
	syscall.Syscall(gpGetUniformui64vNV, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetUniformuiv(program uint32, location int32, params *uint32) {
	syscall.Syscall(gpGetUniformuiv, 3, uintptr(program), uintptr(location), uintptr(unsafe.Pointer(params)))
}
func GetVertexArrayIndexed64iv(vaobj uint32, index uint32, pname uint32, param *int64) {
	syscall.Syscall6(gpGetVertexArrayIndexed64iv, 4, uintptr(vaobj), uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(param)), 0, 0)
}
func GetVertexArrayIndexediv(vaobj uint32, index uint32, pname uint32, param *int32) {
	syscall.Syscall6(gpGetVertexArrayIndexediv, 4, uintptr(vaobj), uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(param)), 0, 0)
}
func GetVertexArrayIntegeri_vEXT(vaobj uint32, index uint32, pname uint32, param *int32) {
	syscall.Syscall6(gpGetVertexArrayIntegeri_vEXT, 4, uintptr(vaobj), uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(param)), 0, 0)
}
func GetVertexArrayIntegervEXT(vaobj uint32, pname uint32, param *int32) {
	syscall.Syscall(gpGetVertexArrayIntegervEXT, 3, uintptr(vaobj), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func GetVertexArrayPointeri_vEXT(vaobj uint32, index uint32, pname uint32, param *unsafe.Pointer) {
	syscall.Syscall6(gpGetVertexArrayPointeri_vEXT, 4, uintptr(vaobj), uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(param)), 0, 0)
}
func GetVertexArrayPointervEXT(vaobj uint32, pname uint32, param *unsafe.Pointer) {
	syscall.Syscall(gpGetVertexArrayPointervEXT, 3, uintptr(vaobj), uintptr(pname), uintptr(unsafe.Pointer(param)))
}

// retrieve parameters of a vertex array object
func GetVertexArrayiv(vaobj uint32, pname uint32, param *int32) {
	syscall.Syscall(gpGetVertexArrayiv, 3, uintptr(vaobj), uintptr(pname), uintptr(unsafe.Pointer(param)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribIiv(index uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetVertexAttribIiv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribIuiv(index uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpGetVertexAttribIuiv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribLdv(index uint32, pname uint32, params *float64) {
	syscall.Syscall(gpGetVertexAttribLdv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetVertexAttribLi64vNV(index uint32, pname uint32, params *int64) {
	syscall.Syscall(gpGetVertexAttribLi64vNV, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetVertexAttribLui64vARB(index uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpGetVertexAttribLui64vARB, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func GetVertexAttribLui64vNV(index uint32, pname uint32, params *uint64) {
	syscall.Syscall(gpGetVertexAttribLui64vNV, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// return the address of the specified generic vertex attribute pointer
func GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer) {
	syscall.Syscall(gpGetVertexAttribPointerv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(pointer)))
}
func GetVertexAttribPointerWithOffsetv(index uint32, pname uint32, offset **uintptr) {
	syscall.Syscall(gpGetVertexAttribPointerv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(offset)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribdv(index uint32, pname uint32, params *float64) {
	syscall.Syscall(gpGetVertexAttribdv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribfv(index uint32, pname uint32, params *float32) {
	syscall.Syscall(gpGetVertexAttribfv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return a generic vertex attribute parameter
func GetVertexAttribiv(index uint32, pname uint32, params *int32) {
	syscall.Syscall(gpGetVertexAttribiv, 3, uintptr(index), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// Return value has type C.GLVULKANPROCNV.
func GetVkProcAddrNV(name *uint8) unsafe.Pointer {
	ret, _, _ := syscall.Syscall(gpGetVkProcAddrNV, 1, uintptr(unsafe.Pointer(name)), 0, 0)
	return (unsafe.Pointer)(ret)
}

// return a compressed texture image
func GetnCompressedTexImage(target uint32, lod int32, bufSize int32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpGetnCompressedTexImage, 4, uintptr(target), uintptr(lod), uintptr(bufSize), uintptr(pixels), 0, 0)
}
func GetnCompressedTexImageARB(target uint32, lod int32, bufSize int32, img unsafe.Pointer) {
	syscall.Syscall6(gpGetnCompressedTexImageARB, 4, uintptr(target), uintptr(lod), uintptr(bufSize), uintptr(img), 0, 0)
}

// return a texture image
func GetnTexImage(target uint32, level int32, format uint32, xtype uint32, bufSize int32, pixels unsafe.Pointer) {
	syscall.Syscall6(gpGetnTexImage, 6, uintptr(target), uintptr(level), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(pixels))
}
func GetnTexImageARB(target uint32, level int32, format uint32, xtype uint32, bufSize int32, img unsafe.Pointer) {
	syscall.Syscall6(gpGetnTexImageARB, 6, uintptr(target), uintptr(level), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(img))
}
func GetnUniformdv(program uint32, location int32, bufSize int32, params *float64) {
	syscall.Syscall6(gpGetnUniformdv, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformdvARB(program uint32, location int32, bufSize int32, params *float64) {
	syscall.Syscall6(gpGetnUniformdvARB, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformfv(program uint32, location int32, bufSize int32, params *float32) {
	syscall.Syscall6(gpGetnUniformfv, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformfvARB(program uint32, location int32, bufSize int32, params *float32) {
	syscall.Syscall6(gpGetnUniformfvARB, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformfvKHR(program uint32, location int32, bufSize int32, params *float32) {
	syscall.Syscall6(gpGetnUniformfvKHR, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformi64vARB(program uint32, location int32, bufSize int32, params *int64) {
	syscall.Syscall6(gpGetnUniformi64vARB, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformiv(program uint32, location int32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetnUniformiv, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformivARB(program uint32, location int32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetnUniformivARB, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformivKHR(program uint32, location int32, bufSize int32, params *int32) {
	syscall.Syscall6(gpGetnUniformivKHR, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformui64vARB(program uint32, location int32, bufSize int32, params *uint64) {
	syscall.Syscall6(gpGetnUniformui64vARB, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformuiv(program uint32, location int32, bufSize int32, params *uint32) {
	syscall.Syscall6(gpGetnUniformuiv, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformuivARB(program uint32, location int32, bufSize int32, params *uint32) {
	syscall.Syscall6(gpGetnUniformuivARB, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}
func GetnUniformuivKHR(program uint32, location int32, bufSize int32, params *uint32) {
	syscall.Syscall6(gpGetnUniformuivKHR, 4, uintptr(program), uintptr(location), uintptr(bufSize), uintptr(unsafe.Pointer(params)), 0, 0)
}

// specify implementation-specific hints
func Hint(target uint32, mode uint32) {
	syscall.Syscall(gpHint, 2, uintptr(target), uintptr(mode), 0)
}
func IndexFormatNV(xtype uint32, stride int32) {
	syscall.Syscall(gpIndexFormatNV, 2, uintptr(xtype), uintptr(stride), 0)
}

// control the writing of individual bits in the color index buffers
func IndexMask(mask uint32) {
	syscall.Syscall(gpIndexMask, 1, uintptr(mask), 0, 0)
}

// define an array of color indexes
func IndexPointer(xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall(gpIndexPointer, 3, uintptr(xtype), uintptr(stride), uintptr(pointer))
}
func Indexd(c float64) {
	syscall.Syscall(gpIndexd, 1, uintptr(math.Float64bits(c)), 0, 0)
}
func Indexdv(c *float64) {
	syscall.Syscall(gpIndexdv, 1, uintptr(unsafe.Pointer(c)), 0, 0)
}
func Indexf(c float32) {
	syscall.Syscall(gpIndexf, 1, uintptr(math.Float32bits(c)), 0, 0)
}
func Indexfv(c *float32) {
	syscall.Syscall(gpIndexfv, 1, uintptr(unsafe.Pointer(c)), 0, 0)
}
func Indexi(c int32) {
	syscall.Syscall(gpIndexi, 1, uintptr(c), 0, 0)
}
func Indexiv(c *int32) {
	syscall.Syscall(gpIndexiv, 1, uintptr(unsafe.Pointer(c)), 0, 0)
}
func Indexs(c int16) {
	syscall.Syscall(gpIndexs, 1, uintptr(c), 0, 0)
}
func Indexsv(c *int16) {
	syscall.Syscall(gpIndexsv, 1, uintptr(unsafe.Pointer(c)), 0, 0)
}
func Indexub(c uint8) {
	syscall.Syscall(gpIndexub, 1, uintptr(c), 0, 0)
}
func Indexubv(c *uint8) {
	syscall.Syscall(gpIndexubv, 1, uintptr(unsafe.Pointer(c)), 0, 0)
}

// initialize the name stack
func InitNames() {
	syscall.Syscall(gpInitNames, 0, 0, 0, 0)
}
func InsertEventMarkerEXT(length int32, marker *uint8) {
	syscall.Syscall(gpInsertEventMarkerEXT, 2, uintptr(length), uintptr(unsafe.Pointer(marker)), 0)
}

// simultaneously specify and enable several interleaved arrays
func InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall(gpInterleavedArrays, 3, uintptr(format), uintptr(stride), uintptr(pointer))
}
func InterpolatePathsNV(resultPath uint32, pathA uint32, pathB uint32, weight float32) {
	syscall.Syscall6(gpInterpolatePathsNV, 4, uintptr(resultPath), uintptr(pathA), uintptr(pathB), uintptr(math.Float32bits(weight)), 0, 0)
}

// invalidate the content of a buffer object's data store
func InvalidateBufferData(buffer uint32) {
	syscall.Syscall(gpInvalidateBufferData, 1, uintptr(buffer), 0, 0)
}

// invalidate a region of a buffer object's data store
func InvalidateBufferSubData(buffer uint32, offset int, length int) {
	syscall.Syscall(gpInvalidateBufferSubData, 3, uintptr(buffer), uintptr(offset), uintptr(length))
}

// invalidate the content of some or all of a framebuffer's attachments
func InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32) {
	syscall.Syscall(gpInvalidateFramebuffer, 3, uintptr(target), uintptr(numAttachments), uintptr(unsafe.Pointer(attachments)))
}

// invalidate the content of some or all of a framebuffer's attachments
func InvalidateNamedFramebufferData(framebuffer uint32, numAttachments int32, attachments *uint32) {
	syscall.Syscall(gpInvalidateNamedFramebufferData, 3, uintptr(framebuffer), uintptr(numAttachments), uintptr(unsafe.Pointer(attachments)))
}

// invalidate the content of a region of some or all of a framebuffer's attachments
func InvalidateNamedFramebufferSubData(framebuffer uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpInvalidateNamedFramebufferSubData, 7, uintptr(framebuffer), uintptr(numAttachments), uintptr(unsafe.Pointer(attachments)), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}

// invalidate the content of a region of some or all of a framebuffer's attachments
func InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32) {
	syscall.Syscall9(gpInvalidateSubFramebuffer, 7, uintptr(target), uintptr(numAttachments), uintptr(unsafe.Pointer(attachments)), uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}

// invalidate the entirety a texture image
func InvalidateTexImage(texture uint32, level int32) {
	syscall.Syscall(gpInvalidateTexImage, 2, uintptr(texture), uintptr(level), 0)
}

// invalidate a region of a texture image
func InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32) {
	syscall.Syscall9(gpInvalidateTexSubImage, 8, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), 0)
}

// determine if a name corresponds to a buffer object
func IsBuffer(buffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsBuffer, 1, uintptr(buffer), 0, 0)
	return ret != 0
}
func IsBufferResidentNV(target uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsBufferResidentNV, 1, uintptr(target), 0, 0)
	return ret != 0
}
func IsCommandListNV(list uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsCommandListNV, 1, uintptr(list), 0, 0)
	return ret != 0
}
func IsEnabled(cap uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsEnabled, 1, uintptr(cap), 0, 0)
	return ret != 0
}
func IsEnabledIndexedEXT(target uint32, index uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsEnabledIndexedEXT, 2, uintptr(target), uintptr(index), 0)
	return ret != 0
}
func IsEnabledi(target uint32, index uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsEnabledi, 2, uintptr(target), uintptr(index), 0)
	return ret != 0
}

// determine if a name corresponds to a framebuffer object
func IsFramebuffer(framebuffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsFramebuffer, 1, uintptr(framebuffer), 0, 0)
	return ret != 0
}
func IsImageHandleResidentARB(handle uint64) bool {
	ret, _, _ := syscall.Syscall(gpIsImageHandleResidentARB, 1, uintptr(handle), 0, 0)
	return ret != 0
}
func IsImageHandleResidentNV(handle uint64) bool {
	ret, _, _ := syscall.Syscall(gpIsImageHandleResidentNV, 1, uintptr(handle), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a display list
func IsList(list uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsList, 1, uintptr(list), 0, 0)
	return ret != 0
}
func IsNamedBufferResidentNV(buffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsNamedBufferResidentNV, 1, uintptr(buffer), 0, 0)
	return ret != 0
}
func IsNamedStringARB(namelen int32, name *uint8) bool {
	ret, _, _ := syscall.Syscall(gpIsNamedStringARB, 2, uintptr(namelen), uintptr(unsafe.Pointer(name)), 0)
	return ret != 0
}
func IsPathNV(path uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsPathNV, 1, uintptr(path), 0, 0)
	return ret != 0
}
func IsPointInFillPathNV(path uint32, mask uint32, x float32, y float32) bool {
	ret, _, _ := syscall.Syscall6(gpIsPointInFillPathNV, 4, uintptr(path), uintptr(mask), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), 0, 0)
	return ret != 0
}
func IsPointInStrokePathNV(path uint32, x float32, y float32) bool {
	ret, _, _ := syscall.Syscall(gpIsPointInStrokePathNV, 3, uintptr(path), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)))
	return ret != 0
}

// Determines if a name corresponds to a program object
func IsProgram(program uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsProgram, 1, uintptr(program), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a program pipeline object
func IsProgramPipeline(pipeline uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsProgramPipeline, 1, uintptr(pipeline), 0, 0)
	return ret != 0
}
func IsProgramPipelineEXT(pipeline uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsProgramPipelineEXT, 1, uintptr(pipeline), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a query object
func IsQuery(id uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsQuery, 1, uintptr(id), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a renderbuffer object
func IsRenderbuffer(renderbuffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsRenderbuffer, 1, uintptr(renderbuffer), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a sampler object
func IsSampler(sampler uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsSampler, 1, uintptr(sampler), 0, 0)
	return ret != 0
}

// Determines if a name corresponds to a shader object
func IsShader(shader uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsShader, 1, uintptr(shader), 0, 0)
	return ret != 0
}
func IsStateNV(state uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsStateNV, 1, uintptr(state), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a sync object
func IsSync(sync uintptr) bool {
	ret, _, _ := syscall.Syscall(gpIsSync, 1, uintptr(sync), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a texture
func IsTexture(texture uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsTexture, 1, uintptr(texture), 0, 0)
	return ret != 0
}
func IsTextureHandleResidentARB(handle uint64) bool {
	ret, _, _ := syscall.Syscall(gpIsTextureHandleResidentARB, 1, uintptr(handle), 0, 0)
	return ret != 0
}
func IsTextureHandleResidentNV(handle uint64) bool {
	ret, _, _ := syscall.Syscall(gpIsTextureHandleResidentNV, 1, uintptr(handle), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a transform feedback object
func IsTransformFeedback(id uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsTransformFeedback, 1, uintptr(id), 0, 0)
	return ret != 0
}

// determine if a name corresponds to a vertex array object
func IsVertexArray(array uint32) bool {
	ret, _, _ := syscall.Syscall(gpIsVertexArray, 1, uintptr(array), 0, 0)
	return ret != 0
}
func LabelObjectEXT(xtype uint32, object uint32, length int32, label *uint8) {
	syscall.Syscall6(gpLabelObjectEXT, 4, uintptr(xtype), uintptr(object), uintptr(length), uintptr(unsafe.Pointer(label)), 0, 0)
}
func LightModelf(pname uint32, param float32) {
	syscall.Syscall(gpLightModelf, 2, uintptr(pname), uintptr(math.Float32bits(param)), 0)
}
func LightModelfv(pname uint32, params *float32) {
	syscall.Syscall(gpLightModelfv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func LightModeli(pname uint32, param int32) {
	syscall.Syscall(gpLightModeli, 2, uintptr(pname), uintptr(param), 0)
}
func LightModeliv(pname uint32, params *int32) {
	syscall.Syscall(gpLightModeliv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func Lightf(light uint32, pname uint32, param float32) {
	syscall.Syscall(gpLightf, 3, uintptr(light), uintptr(pname), uintptr(math.Float32bits(param)))
}
func Lightfv(light uint32, pname uint32, params *float32) {
	syscall.Syscall(gpLightfv, 3, uintptr(light), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func Lighti(light uint32, pname uint32, param int32) {
	syscall.Syscall(gpLighti, 3, uintptr(light), uintptr(pname), uintptr(param))
}
func Lightiv(light uint32, pname uint32, params *int32) {
	syscall.Syscall(gpLightiv, 3, uintptr(light), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// specify the line stipple pattern
func LineStipple(factor int32, pattern uint16) {
	syscall.Syscall(gpLineStipple, 2, uintptr(factor), uintptr(pattern), 0)
}

// specify the width of rasterized lines
func LineWidth(width float32) {
	syscall.Syscall(gpLineWidth, 1, uintptr(math.Float32bits(width)), 0, 0)
}

// Links a program object
func LinkProgram(program uint32) {
	syscall.Syscall(gpLinkProgram, 1, uintptr(program), 0, 0)
}

// set the display-list base for
func ListBase(base uint32) {
	syscall.Syscall(gpListBase, 1, uintptr(base), 0, 0)
}
func ListDrawCommandsStatesClientNV(list uint32, segment uint32, indirects *unsafe.Pointer, sizes *int32, states *uint32, fbos *uint32, count uint32) {
	syscall.Syscall9(gpListDrawCommandsStatesClientNV, 7, uintptr(list), uintptr(segment), uintptr(unsafe.Pointer(indirects)), uintptr(unsafe.Pointer(sizes)), uintptr(unsafe.Pointer(states)), uintptr(unsafe.Pointer(fbos)), uintptr(count), 0, 0)
}

// replace the current matrix with the identity matrix
func LoadIdentity() {
	syscall.Syscall(gpLoadIdentity, 0, 0, 0, 0)
}
func LoadMatrixd(m *float64) {
	syscall.Syscall(gpLoadMatrixd, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}
func LoadMatrixf(m *float32) {
	syscall.Syscall(gpLoadMatrixf, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}

// load a name onto the name stack
func LoadName(name uint32) {
	syscall.Syscall(gpLoadName, 1, uintptr(name), 0, 0)
}
func LoadTransposeMatrixd(m *float64) {
	syscall.Syscall(gpLoadTransposeMatrixd, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}
func LoadTransposeMatrixf(m *float32) {
	syscall.Syscall(gpLoadTransposeMatrixf, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}

// specify a logical pixel operation for rendering
func LogicOp(opcode uint32) {
	syscall.Syscall(gpLogicOp, 1, uintptr(opcode), 0, 0)
}
func MakeBufferNonResidentNV(target uint32) {
	syscall.Syscall(gpMakeBufferNonResidentNV, 1, uintptr(target), 0, 0)
}
func MakeBufferResidentNV(target uint32, access uint32) {
	syscall.Syscall(gpMakeBufferResidentNV, 2, uintptr(target), uintptr(access), 0)
}
func MakeImageHandleNonResidentARB(handle uint64) {
	syscall.Syscall(gpMakeImageHandleNonResidentARB, 1, uintptr(handle), 0, 0)
}
func MakeImageHandleNonResidentNV(handle uint64) {
	syscall.Syscall(gpMakeImageHandleNonResidentNV, 1, uintptr(handle), 0, 0)
}
func MakeImageHandleResidentARB(handle uint64, access uint32) {
	syscall.Syscall(gpMakeImageHandleResidentARB, 2, uintptr(handle), uintptr(access), 0)
}
func MakeImageHandleResidentNV(handle uint64, access uint32) {
	syscall.Syscall(gpMakeImageHandleResidentNV, 2, uintptr(handle), uintptr(access), 0)
}
func MakeNamedBufferNonResidentNV(buffer uint32) {
	syscall.Syscall(gpMakeNamedBufferNonResidentNV, 1, uintptr(buffer), 0, 0)
}
func MakeNamedBufferResidentNV(buffer uint32, access uint32) {
	syscall.Syscall(gpMakeNamedBufferResidentNV, 2, uintptr(buffer), uintptr(access), 0)
}
func MakeTextureHandleNonResidentARB(handle uint64) {
	syscall.Syscall(gpMakeTextureHandleNonResidentARB, 1, uintptr(handle), 0, 0)
}
func MakeTextureHandleNonResidentNV(handle uint64) {
	syscall.Syscall(gpMakeTextureHandleNonResidentNV, 1, uintptr(handle), 0, 0)
}
func MakeTextureHandleResidentARB(handle uint64) {
	syscall.Syscall(gpMakeTextureHandleResidentARB, 1, uintptr(handle), 0, 0)
}
func MakeTextureHandleResidentNV(handle uint64) {
	syscall.Syscall(gpMakeTextureHandleResidentNV, 1, uintptr(handle), 0, 0)
}
func Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64) {
	syscall.Syscall6(gpMap1d, 6, uintptr(target), uintptr(math.Float64bits(u1)), uintptr(math.Float64bits(u2)), uintptr(stride), uintptr(order), uintptr(unsafe.Pointer(points)))
}
func Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32) {
	syscall.Syscall6(gpMap1f, 6, uintptr(target), uintptr(math.Float32bits(u1)), uintptr(math.Float32bits(u2)), uintptr(stride), uintptr(order), uintptr(unsafe.Pointer(points)))
}
func Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64) {
	syscall.Syscall12(gpMap2d, 10, uintptr(target), uintptr(math.Float64bits(u1)), uintptr(math.Float64bits(u2)), uintptr(ustride), uintptr(uorder), uintptr(math.Float64bits(v1)), uintptr(math.Float64bits(v2)), uintptr(vstride), uintptr(vorder), uintptr(unsafe.Pointer(points)), 0, 0)
}
func Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32) {
	syscall.Syscall12(gpMap2f, 10, uintptr(target), uintptr(math.Float32bits(u1)), uintptr(math.Float32bits(u2)), uintptr(ustride), uintptr(uorder), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), uintptr(vstride), uintptr(vorder), uintptr(unsafe.Pointer(points)), 0, 0)
}

// map all of a buffer object's data store into the client's address space
func MapBuffer(target uint32, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall(gpMapBuffer, 2, uintptr(target), uintptr(access), 0)
	return (unsafe.Pointer)(ret)
}

// map all or part of a buffer object's data store into the client's address space
func MapBufferRange(target uint32, offset int, length int, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall6(gpMapBufferRange, 4, uintptr(target), uintptr(offset), uintptr(length), uintptr(access), 0, 0)
	return (unsafe.Pointer)(ret)
}
func MapGrid1d(un int32, u1 float64, u2 float64) {
	syscall.Syscall(gpMapGrid1d, 3, uintptr(un), uintptr(math.Float64bits(u1)), uintptr(math.Float64bits(u2)))
}
func MapGrid1f(un int32, u1 float32, u2 float32) {
	syscall.Syscall(gpMapGrid1f, 3, uintptr(un), uintptr(math.Float32bits(u1)), uintptr(math.Float32bits(u2)))
}
func MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64) {
	syscall.Syscall6(gpMapGrid2d, 6, uintptr(un), uintptr(math.Float64bits(u1)), uintptr(math.Float64bits(u2)), uintptr(vn), uintptr(math.Float64bits(v1)), uintptr(math.Float64bits(v2)))
}
func MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32) {
	syscall.Syscall6(gpMapGrid2f, 6, uintptr(un), uintptr(math.Float32bits(u1)), uintptr(math.Float32bits(u2)), uintptr(vn), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)))
}

// map all of a buffer object's data store into the client's address space
func MapNamedBuffer(buffer uint32, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall(gpMapNamedBuffer, 2, uintptr(buffer), uintptr(access), 0)
	return (unsafe.Pointer)(ret)
}
func MapNamedBufferEXT(buffer uint32, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall(gpMapNamedBufferEXT, 2, uintptr(buffer), uintptr(access), 0)
	return (unsafe.Pointer)(ret)
}

// map all or part of a buffer object's data store into the client's address space
func MapNamedBufferRange(buffer uint32, offset int, length int, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall6(gpMapNamedBufferRange, 4, uintptr(buffer), uintptr(offset), uintptr(length), uintptr(access), 0, 0)
	return (unsafe.Pointer)(ret)
}
func MapNamedBufferRangeEXT(buffer uint32, offset int, length int, access uint32) unsafe.Pointer {
	ret, _, _ := syscall.Syscall6(gpMapNamedBufferRangeEXT, 4, uintptr(buffer), uintptr(offset), uintptr(length), uintptr(access), 0, 0)
	return (unsafe.Pointer)(ret)
}
func Materialf(face uint32, pname uint32, param float32) {
	syscall.Syscall(gpMaterialf, 3, uintptr(face), uintptr(pname), uintptr(math.Float32bits(param)))
}
func Materialfv(face uint32, pname uint32, params *float32) {
	syscall.Syscall(gpMaterialfv, 3, uintptr(face), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func Materiali(face uint32, pname uint32, param int32) {
	syscall.Syscall(gpMateriali, 3, uintptr(face), uintptr(pname), uintptr(param))
}
func Materialiv(face uint32, pname uint32, params *int32) {
	syscall.Syscall(gpMaterialiv, 3, uintptr(face), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func MatrixFrustumEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	syscall.Syscall9(gpMatrixFrustumEXT, 7, uintptr(mode), uintptr(math.Float64bits(left)), uintptr(math.Float64bits(right)), uintptr(math.Float64bits(bottom)), uintptr(math.Float64bits(top)), uintptr(math.Float64bits(zNear)), uintptr(math.Float64bits(zFar)), 0, 0)
}
func MatrixLoad3x2fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoad3x2fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoad3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoad3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadIdentityEXT(mode uint32) {
	syscall.Syscall(gpMatrixLoadIdentityEXT, 1, uintptr(mode), 0, 0)
}
func MatrixLoadTranspose3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoadTranspose3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadTransposedEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixLoadTransposedEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadTransposefEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoadTransposefEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoaddEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixLoaddEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixLoadfEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixLoadfEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}

// specify which matrix is the current matrix
func MatrixMode(mode uint32) {
	syscall.Syscall(gpMatrixMode, 1, uintptr(mode), 0, 0)
}
func MatrixMult3x2fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixMult3x2fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMult3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixMult3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultTranspose3x3fNV(matrixMode uint32, m *float32) {
	syscall.Syscall(gpMatrixMultTranspose3x3fNV, 2, uintptr(matrixMode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultTransposedEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixMultTransposedEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultTransposefEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixMultTransposefEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultdEXT(mode uint32, m *float64) {
	syscall.Syscall(gpMatrixMultdEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixMultfEXT(mode uint32, m *float32) {
	syscall.Syscall(gpMatrixMultfEXT, 2, uintptr(mode), uintptr(unsafe.Pointer(m)), 0)
}
func MatrixOrthoEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	syscall.Syscall9(gpMatrixOrthoEXT, 7, uintptr(mode), uintptr(math.Float64bits(left)), uintptr(math.Float64bits(right)), uintptr(math.Float64bits(bottom)), uintptr(math.Float64bits(top)), uintptr(math.Float64bits(zNear)), uintptr(math.Float64bits(zFar)), 0, 0)
}
func MatrixPopEXT(mode uint32) {
	syscall.Syscall(gpMatrixPopEXT, 1, uintptr(mode), 0, 0)
}
func MatrixPushEXT(mode uint32) {
	syscall.Syscall(gpMatrixPushEXT, 1, uintptr(mode), 0, 0)
}
func MatrixRotatedEXT(mode uint32, angle float64, x float64, y float64, z float64) {
	syscall.Syscall6(gpMatrixRotatedEXT, 5, uintptr(mode), uintptr(math.Float64bits(angle)), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0)
}
func MatrixRotatefEXT(mode uint32, angle float32, x float32, y float32, z float32) {
	syscall.Syscall6(gpMatrixRotatefEXT, 5, uintptr(mode), uintptr(math.Float32bits(angle)), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0)
}
func MatrixScaledEXT(mode uint32, x float64, y float64, z float64) {
	syscall.Syscall6(gpMatrixScaledEXT, 4, uintptr(mode), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func MatrixScalefEXT(mode uint32, x float32, y float32, z float32) {
	syscall.Syscall6(gpMatrixScalefEXT, 4, uintptr(mode), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0, 0)
}
func MatrixTranslatedEXT(mode uint32, x float64, y float64, z float64) {
	syscall.Syscall6(gpMatrixTranslatedEXT, 4, uintptr(mode), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func MatrixTranslatefEXT(mode uint32, x float32, y float32, z float32) {
	syscall.Syscall6(gpMatrixTranslatefEXT, 4, uintptr(mode), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0, 0)
}
func MaxShaderCompilerThreadsARB(count uint32) {
	syscall.Syscall(gpMaxShaderCompilerThreadsARB, 1, uintptr(count), 0, 0)
}
func MaxShaderCompilerThreadsKHR(count uint32) {
	syscall.Syscall(gpMaxShaderCompilerThreadsKHR, 1, uintptr(count), 0, 0)
}

// defines a barrier ordering memory transactions
func MemoryBarrier(barriers uint32) {
	syscall.Syscall(gpMemoryBarrier, 1, uintptr(barriers), 0, 0)
}
func MemoryBarrierByRegion(barriers uint32) {
	syscall.Syscall(gpMemoryBarrierByRegion, 1, uintptr(barriers), 0, 0)
}

// specifies minimum rate at which sample shaing takes place
func MinSampleShading(value float32) {
	syscall.Syscall(gpMinSampleShading, 1, uintptr(math.Float32bits(value)), 0, 0)
}
func MinSampleShadingARB(value float32) {
	syscall.Syscall(gpMinSampleShadingARB, 1, uintptr(math.Float32bits(value)), 0, 0)
}
func MultMatrixd(m *float64) {
	syscall.Syscall(gpMultMatrixd, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}
func MultMatrixf(m *float32) {
	syscall.Syscall(gpMultMatrixf, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}
func MultTransposeMatrixd(m *float64) {
	syscall.Syscall(gpMultTransposeMatrixd, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}
func MultTransposeMatrixf(m *float32) {
	syscall.Syscall(gpMultTransposeMatrixf, 1, uintptr(unsafe.Pointer(m)), 0, 0)
}

// render multiple sets of primitives from array data
func MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32) {
	syscall.Syscall6(gpMultiDrawArrays, 4, uintptr(mode), uintptr(unsafe.Pointer(first)), uintptr(unsafe.Pointer(count)), uintptr(drawcount), 0, 0)
}

// render multiple sets of primitives from array data, taking parameters from memory
func MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawArraysIndirect, 4, uintptr(mode), uintptr(indirect), uintptr(drawcount), uintptr(stride), 0, 0)
}
func MultiDrawArraysIndirectBindlessCountNV(mode uint32, indirect unsafe.Pointer, drawCount int32, maxDrawCount int32, stride int32, vertexBufferCount int32) {
	syscall.Syscall6(gpMultiDrawArraysIndirectBindlessCountNV, 6, uintptr(mode), uintptr(indirect), uintptr(drawCount), uintptr(maxDrawCount), uintptr(stride), uintptr(vertexBufferCount))
}
func MultiDrawArraysIndirectBindlessNV(mode uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
	syscall.Syscall6(gpMultiDrawArraysIndirectBindlessNV, 5, uintptr(mode), uintptr(indirect), uintptr(drawCount), uintptr(stride), uintptr(vertexBufferCount), 0)
}
func MultiDrawArraysIndirectCount(mode uint32, indirect unsafe.Pointer, drawcount int, maxdrawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawArraysIndirectCount, 5, uintptr(mode), uintptr(indirect), uintptr(drawcount), uintptr(maxdrawcount), uintptr(stride), 0)
}
func MultiDrawArraysIndirectCountARB(mode uint32, indirect unsafe.Pointer, drawcount int, maxdrawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawArraysIndirectCountARB, 5, uintptr(mode), uintptr(indirect), uintptr(drawcount), uintptr(maxdrawcount), uintptr(stride), 0)
}

// render multiple sets of primitives by specifying indices of array data elements
func MultiDrawElements(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, drawcount int32) {
	syscall.Syscall6(gpMultiDrawElements, 5, uintptr(mode), uintptr(unsafe.Pointer(count)), uintptr(xtype), uintptr(unsafe.Pointer(indices)), uintptr(drawcount), 0)
}

// render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
func MultiDrawElementsBaseVertex(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32) {
	syscall.Syscall6(gpMultiDrawElementsBaseVertex, 6, uintptr(mode), uintptr(unsafe.Pointer(count)), uintptr(xtype), uintptr(unsafe.Pointer(indices)), uintptr(drawcount), uintptr(unsafe.Pointer(basevertex)))
}

// render indexed primitives from array data, taking parameters from memory
func MultiDrawElementsIndirect(mode uint32, xtype uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawElementsIndirect, 5, uintptr(mode), uintptr(xtype), uintptr(indirect), uintptr(drawcount), uintptr(stride), 0)
}
func MultiDrawElementsIndirectBindlessCountNV(mode uint32, xtype uint32, indirect unsafe.Pointer, drawCount int32, maxDrawCount int32, stride int32, vertexBufferCount int32) {
	syscall.Syscall9(gpMultiDrawElementsIndirectBindlessCountNV, 7, uintptr(mode), uintptr(xtype), uintptr(indirect), uintptr(drawCount), uintptr(maxDrawCount), uintptr(stride), uintptr(vertexBufferCount), 0, 0)
}
func MultiDrawElementsIndirectBindlessNV(mode uint32, xtype uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
	syscall.Syscall6(gpMultiDrawElementsIndirectBindlessNV, 6, uintptr(mode), uintptr(xtype), uintptr(indirect), uintptr(drawCount), uintptr(stride), uintptr(vertexBufferCount))
}
func MultiDrawElementsIndirectCount(mode uint32, xtype uint32, indirect unsafe.Pointer, drawcount int, maxdrawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawElementsIndirectCount, 6, uintptr(mode), uintptr(xtype), uintptr(indirect), uintptr(drawcount), uintptr(maxdrawcount), uintptr(stride))
}
func MultiDrawElementsIndirectCountARB(mode uint32, xtype uint32, indirect unsafe.Pointer, drawcount int, maxdrawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawElementsIndirectCountARB, 6, uintptr(mode), uintptr(xtype), uintptr(indirect), uintptr(drawcount), uintptr(maxdrawcount), uintptr(stride))
}
func MultiDrawMeshTasksIndirectCountNV(indirect int, drawcount int, maxdrawcount int32, stride int32) {
	syscall.Syscall6(gpMultiDrawMeshTasksIndirectCountNV, 4, uintptr(indirect), uintptr(drawcount), uintptr(maxdrawcount), uintptr(stride), 0, 0)
}
func MultiDrawMeshTasksIndirectNV(indirect int, drawcount int32, stride int32) {
	syscall.Syscall(gpMultiDrawMeshTasksIndirectNV, 3, uintptr(indirect), uintptr(drawcount), uintptr(stride))
}
func MultiTexBufferEXT(texunit uint32, target uint32, internalformat uint32, buffer uint32) {
	syscall.Syscall6(gpMultiTexBufferEXT, 4, uintptr(texunit), uintptr(target), uintptr(internalformat), uintptr(buffer), 0, 0)
}
func MultiTexCoord1d(target uint32, s float64) {
	syscall.Syscall(gpMultiTexCoord1d, 2, uintptr(target), uintptr(math.Float64bits(s)), 0)
}
func MultiTexCoord1dv(target uint32, v *float64) {
	syscall.Syscall(gpMultiTexCoord1dv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord1f(target uint32, s float32) {
	syscall.Syscall(gpMultiTexCoord1f, 2, uintptr(target), uintptr(math.Float32bits(s)), 0)
}
func MultiTexCoord1fv(target uint32, v *float32) {
	syscall.Syscall(gpMultiTexCoord1fv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord1i(target uint32, s int32) {
	syscall.Syscall(gpMultiTexCoord1i, 2, uintptr(target), uintptr(s), 0)
}
func MultiTexCoord1iv(target uint32, v *int32) {
	syscall.Syscall(gpMultiTexCoord1iv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord1s(target uint32, s int16) {
	syscall.Syscall(gpMultiTexCoord1s, 2, uintptr(target), uintptr(s), 0)
}
func MultiTexCoord1sv(target uint32, v *int16) {
	syscall.Syscall(gpMultiTexCoord1sv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord2d(target uint32, s float64, t float64) {
	syscall.Syscall(gpMultiTexCoord2d, 3, uintptr(target), uintptr(math.Float64bits(s)), uintptr(math.Float64bits(t)))
}
func MultiTexCoord2dv(target uint32, v *float64) {
	syscall.Syscall(gpMultiTexCoord2dv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord2f(target uint32, s float32, t float32) {
	syscall.Syscall(gpMultiTexCoord2f, 3, uintptr(target), uintptr(math.Float32bits(s)), uintptr(math.Float32bits(t)))
}
func MultiTexCoord2fv(target uint32, v *float32) {
	syscall.Syscall(gpMultiTexCoord2fv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord2i(target uint32, s int32, t int32) {
	syscall.Syscall(gpMultiTexCoord2i, 3, uintptr(target), uintptr(s), uintptr(t))
}
func MultiTexCoord2iv(target uint32, v *int32) {
	syscall.Syscall(gpMultiTexCoord2iv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord2s(target uint32, s int16, t int16) {
	syscall.Syscall(gpMultiTexCoord2s, 3, uintptr(target), uintptr(s), uintptr(t))
}
func MultiTexCoord2sv(target uint32, v *int16) {
	syscall.Syscall(gpMultiTexCoord2sv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord3d(target uint32, s float64, t float64, r float64) {
	syscall.Syscall6(gpMultiTexCoord3d, 4, uintptr(target), uintptr(math.Float64bits(s)), uintptr(math.Float64bits(t)), uintptr(math.Float64bits(r)), 0, 0)
}
func MultiTexCoord3dv(target uint32, v *float64) {
	syscall.Syscall(gpMultiTexCoord3dv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord3f(target uint32, s float32, t float32, r float32) {
	syscall.Syscall6(gpMultiTexCoord3f, 4, uintptr(target), uintptr(math.Float32bits(s)), uintptr(math.Float32bits(t)), uintptr(math.Float32bits(r)), 0, 0)
}
func MultiTexCoord3fv(target uint32, v *float32) {
	syscall.Syscall(gpMultiTexCoord3fv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord3i(target uint32, s int32, t int32, r int32) {
	syscall.Syscall6(gpMultiTexCoord3i, 4, uintptr(target), uintptr(s), uintptr(t), uintptr(r), 0, 0)
}
func MultiTexCoord3iv(target uint32, v *int32) {
	syscall.Syscall(gpMultiTexCoord3iv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord3s(target uint32, s int16, t int16, r int16) {
	syscall.Syscall6(gpMultiTexCoord3s, 4, uintptr(target), uintptr(s), uintptr(t), uintptr(r), 0, 0)
}
func MultiTexCoord3sv(target uint32, v *int16) {
	syscall.Syscall(gpMultiTexCoord3sv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64) {
	syscall.Syscall6(gpMultiTexCoord4d, 5, uintptr(target), uintptr(math.Float64bits(s)), uintptr(math.Float64bits(t)), uintptr(math.Float64bits(r)), uintptr(math.Float64bits(q)), 0)
}
func MultiTexCoord4dv(target uint32, v *float64) {
	syscall.Syscall(gpMultiTexCoord4dv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32) {
	syscall.Syscall6(gpMultiTexCoord4f, 5, uintptr(target), uintptr(math.Float32bits(s)), uintptr(math.Float32bits(t)), uintptr(math.Float32bits(r)), uintptr(math.Float32bits(q)), 0)
}
func MultiTexCoord4fv(target uint32, v *float32) {
	syscall.Syscall(gpMultiTexCoord4fv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32) {
	syscall.Syscall6(gpMultiTexCoord4i, 5, uintptr(target), uintptr(s), uintptr(t), uintptr(r), uintptr(q), 0)
}
func MultiTexCoord4iv(target uint32, v *int32) {
	syscall.Syscall(gpMultiTexCoord4iv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16) {
	syscall.Syscall6(gpMultiTexCoord4s, 5, uintptr(target), uintptr(s), uintptr(t), uintptr(r), uintptr(q), 0)
}
func MultiTexCoord4sv(target uint32, v *int16) {
	syscall.Syscall(gpMultiTexCoord4sv, 2, uintptr(target), uintptr(unsafe.Pointer(v)), 0)
}
func MultiTexCoordPointerEXT(texunit uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpMultiTexCoordPointerEXT, 5, uintptr(texunit), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0)
}
func MultiTexEnvfEXT(texunit uint32, target uint32, pname uint32, param float32) {
	syscall.Syscall6(gpMultiTexEnvfEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(math.Float32bits(param)), 0, 0)
}
func MultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpMultiTexEnvfvEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexEnviEXT(texunit uint32, target uint32, pname uint32, param int32) {
	syscall.Syscall6(gpMultiTexEnviEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(param), 0, 0)
}
func MultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpMultiTexEnvivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexGendEXT(texunit uint32, coord uint32, pname uint32, param float64) {
	syscall.Syscall6(gpMultiTexGendEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(math.Float64bits(param)), 0, 0)
}
func MultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
	syscall.Syscall6(gpMultiTexGendvEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexGenfEXT(texunit uint32, coord uint32, pname uint32, param float32) {
	syscall.Syscall6(gpMultiTexGenfEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(math.Float32bits(param)), 0, 0)
}
func MultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpMultiTexGenfvEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexGeniEXT(texunit uint32, coord uint32, pname uint32, param int32) {
	syscall.Syscall6(gpMultiTexGeniEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(param), 0, 0)
}
func MultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpMultiTexGenivEXT, 4, uintptr(texunit), uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpMultiTexImage1DEXT, 9, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels))
}
func MultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpMultiTexImage2DEXT, 10, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}
func MultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpMultiTexImage3DEXT, 11, uintptr(texunit), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func MultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpMultiTexParameterIivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
	syscall.Syscall6(gpMultiTexParameterIuivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexParameterfEXT(texunit uint32, target uint32, pname uint32, param float32) {
	syscall.Syscall6(gpMultiTexParameterfEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(math.Float32bits(param)), 0, 0)
}
func MultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpMultiTexParameterfvEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexParameteriEXT(texunit uint32, target uint32, pname uint32, param int32) {
	syscall.Syscall6(gpMultiTexParameteriEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(param), 0, 0)
}
func MultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpMultiTexParameterivEXT, 4, uintptr(texunit), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func MultiTexRenderbufferEXT(texunit uint32, target uint32, renderbuffer uint32) {
	syscall.Syscall(gpMultiTexRenderbufferEXT, 3, uintptr(texunit), uintptr(target), uintptr(renderbuffer))
}
func MultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpMultiTexSubImage1DEXT, 8, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func MultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpMultiTexSubImage2DEXT, 10, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}
func MultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpMultiTexSubImage3DEXT, 12, uintptr(texunit), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(pixels))
}
func NamedBufferAttachMemoryNV(buffer uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpNamedBufferAttachMemoryNV, 3, uintptr(buffer), uintptr(memory), uintptr(offset))
}

// creates and initializes a buffer object's data     store
func NamedBufferData(buffer uint32, size int, data unsafe.Pointer, usage uint32) {
	syscall.Syscall6(gpNamedBufferData, 4, uintptr(buffer), uintptr(size), uintptr(data), uintptr(usage), 0, 0)
}
func NamedBufferDataEXT(buffer uint32, size int, data unsafe.Pointer, usage uint32) {
	syscall.Syscall6(gpNamedBufferDataEXT, 4, uintptr(buffer), uintptr(size), uintptr(data), uintptr(usage), 0, 0)
}
func NamedBufferPageCommitmentARB(buffer uint32, offset int, size int, commit bool) {
	syscall.Syscall6(gpNamedBufferPageCommitmentARB, 4, uintptr(buffer), uintptr(offset), uintptr(size), boolToUintptr(commit), 0, 0)
}
func NamedBufferPageCommitmentEXT(buffer uint32, offset int, size int, commit bool) {
	syscall.Syscall6(gpNamedBufferPageCommitmentEXT, 4, uintptr(buffer), uintptr(offset), uintptr(size), boolToUintptr(commit), 0, 0)
}

// creates and initializes a buffer object's immutable data     store
func NamedBufferStorage(buffer uint32, size int, data unsafe.Pointer, flags uint32) {
	syscall.Syscall6(gpNamedBufferStorage, 4, uintptr(buffer), uintptr(size), uintptr(data), uintptr(flags), 0, 0)
}
func NamedBufferStorageEXT(buffer uint32, size int, data unsafe.Pointer, flags uint32) {
	syscall.Syscall6(gpNamedBufferStorageEXT, 4, uintptr(buffer), uintptr(size), uintptr(data), uintptr(flags), 0, 0)
}

// updates a subset of a buffer object's data store
func NamedBufferSubData(buffer uint32, offset int, size int, data unsafe.Pointer) {
	syscall.Syscall6(gpNamedBufferSubData, 4, uintptr(buffer), uintptr(offset), uintptr(size), uintptr(data), 0, 0)
}
func NamedBufferSubDataEXT(buffer uint32, offset int, size int, data unsafe.Pointer) {
	syscall.Syscall6(gpNamedBufferSubDataEXT, 4, uintptr(buffer), uintptr(offset), uintptr(size), uintptr(data), 0, 0)
}
func NamedCopyBufferSubDataEXT(readBuffer uint32, writeBuffer uint32, readOffset int, writeOffset int, size int) {
	syscall.Syscall6(gpNamedCopyBufferSubDataEXT, 5, uintptr(readBuffer), uintptr(writeBuffer), uintptr(readOffset), uintptr(writeOffset), uintptr(size), 0)
}

// specify which color buffers are to be drawn into
func NamedFramebufferDrawBuffer(framebuffer uint32, buf uint32) {
	syscall.Syscall(gpNamedFramebufferDrawBuffer, 2, uintptr(framebuffer), uintptr(buf), 0)
}

// Specifies a list of color buffers to be drawn     into
func NamedFramebufferDrawBuffers(framebuffer uint32, n int32, bufs *uint32) {
	syscall.Syscall(gpNamedFramebufferDrawBuffers, 3, uintptr(framebuffer), uintptr(n), uintptr(unsafe.Pointer(bufs)))
}

// set a named parameter of a framebuffer object
func NamedFramebufferParameteri(framebuffer uint32, pname uint32, param int32) {
	syscall.Syscall(gpNamedFramebufferParameteri, 3, uintptr(framebuffer), uintptr(pname), uintptr(param))
}
func NamedFramebufferParameteriEXT(framebuffer uint32, pname uint32, param int32) {
	syscall.Syscall(gpNamedFramebufferParameteriEXT, 3, uintptr(framebuffer), uintptr(pname), uintptr(param))
}

// select a color buffer source for pixels
func NamedFramebufferReadBuffer(framebuffer uint32, src uint32) {
	syscall.Syscall(gpNamedFramebufferReadBuffer, 2, uintptr(framebuffer), uintptr(src), 0)
}

// attach a renderbuffer as a logical buffer of a framebuffer object
func NamedFramebufferRenderbuffer(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	syscall.Syscall6(gpNamedFramebufferRenderbuffer, 4, uintptr(framebuffer), uintptr(attachment), uintptr(renderbuffertarget), uintptr(renderbuffer), 0, 0)
}
func NamedFramebufferRenderbufferEXT(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
	syscall.Syscall6(gpNamedFramebufferRenderbufferEXT, 4, uintptr(framebuffer), uintptr(attachment), uintptr(renderbuffertarget), uintptr(renderbuffer), 0, 0)
}
func NamedFramebufferSampleLocationsfvARB(framebuffer uint32, start uint32, count int32, v *float32) {
	syscall.Syscall6(gpNamedFramebufferSampleLocationsfvARB, 4, uintptr(framebuffer), uintptr(start), uintptr(count), uintptr(unsafe.Pointer(v)), 0, 0)
}
func NamedFramebufferSampleLocationsfvNV(framebuffer uint32, start uint32, count int32, v *float32) {
	syscall.Syscall6(gpNamedFramebufferSampleLocationsfvNV, 4, uintptr(framebuffer), uintptr(start), uintptr(count), uintptr(unsafe.Pointer(v)), 0, 0)
}
func NamedFramebufferTexture(framebuffer uint32, attachment uint32, texture uint32, level int32) {
	syscall.Syscall6(gpNamedFramebufferTexture, 4, uintptr(framebuffer), uintptr(attachment), uintptr(texture), uintptr(level), 0, 0)
}
func NamedFramebufferTexture1DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	syscall.Syscall6(gpNamedFramebufferTexture1DEXT, 5, uintptr(framebuffer), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), 0)
}
func NamedFramebufferTexture2DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
	syscall.Syscall6(gpNamedFramebufferTexture2DEXT, 5, uintptr(framebuffer), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), 0)
}
func NamedFramebufferTexture3DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
	syscall.Syscall6(gpNamedFramebufferTexture3DEXT, 6, uintptr(framebuffer), uintptr(attachment), uintptr(textarget), uintptr(texture), uintptr(level), uintptr(zoffset))
}
func NamedFramebufferTextureEXT(framebuffer uint32, attachment uint32, texture uint32, level int32) {
	syscall.Syscall6(gpNamedFramebufferTextureEXT, 4, uintptr(framebuffer), uintptr(attachment), uintptr(texture), uintptr(level), 0, 0)
}
func NamedFramebufferTextureFaceEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, face uint32) {
	syscall.Syscall6(gpNamedFramebufferTextureFaceEXT, 5, uintptr(framebuffer), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(face), 0)
}

// attach a single layer of a texture object as a logical buffer of a framebuffer object
func NamedFramebufferTextureLayer(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32) {
	syscall.Syscall6(gpNamedFramebufferTextureLayer, 5, uintptr(framebuffer), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(layer), 0)
}
func NamedFramebufferTextureLayerEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32) {
	syscall.Syscall6(gpNamedFramebufferTextureLayerEXT, 5, uintptr(framebuffer), uintptr(attachment), uintptr(texture), uintptr(level), uintptr(layer), 0)
}
func NamedProgramLocalParameter4dEXT(program uint32, target uint32, index uint32, x float64, y float64, z float64, w float64) {
	syscall.Syscall9(gpNamedProgramLocalParameter4dEXT, 7, uintptr(program), uintptr(target), uintptr(index), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), uintptr(math.Float64bits(w)), 0, 0)
}
func NamedProgramLocalParameter4dvEXT(program uint32, target uint32, index uint32, params *float64) {
	syscall.Syscall6(gpNamedProgramLocalParameter4dvEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func NamedProgramLocalParameter4fEXT(program uint32, target uint32, index uint32, x float32, y float32, z float32, w float32) {
	syscall.Syscall9(gpNamedProgramLocalParameter4fEXT, 7, uintptr(program), uintptr(target), uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), uintptr(math.Float32bits(w)), 0, 0)
}
func NamedProgramLocalParameter4fvEXT(program uint32, target uint32, index uint32, params *float32) {
	syscall.Syscall6(gpNamedProgramLocalParameter4fvEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func NamedProgramLocalParameterI4iEXT(program uint32, target uint32, index uint32, x int32, y int32, z int32, w int32) {
	syscall.Syscall9(gpNamedProgramLocalParameterI4iEXT, 7, uintptr(program), uintptr(target), uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0, 0)
}
func NamedProgramLocalParameterI4ivEXT(program uint32, target uint32, index uint32, params *int32) {
	syscall.Syscall6(gpNamedProgramLocalParameterI4ivEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func NamedProgramLocalParameterI4uiEXT(program uint32, target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
	syscall.Syscall9(gpNamedProgramLocalParameterI4uiEXT, 7, uintptr(program), uintptr(target), uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0, 0)
}
func NamedProgramLocalParameterI4uivEXT(program uint32, target uint32, index uint32, params *uint32) {
	syscall.Syscall6(gpNamedProgramLocalParameterI4uivEXT, 4, uintptr(program), uintptr(target), uintptr(index), uintptr(unsafe.Pointer(params)), 0, 0)
}
func NamedProgramLocalParameters4fvEXT(program uint32, target uint32, index uint32, count int32, params *float32) {
	syscall.Syscall6(gpNamedProgramLocalParameters4fvEXT, 5, uintptr(program), uintptr(target), uintptr(index), uintptr(count), uintptr(unsafe.Pointer(params)), 0)
}
func NamedProgramLocalParametersI4ivEXT(program uint32, target uint32, index uint32, count int32, params *int32) {
	syscall.Syscall6(gpNamedProgramLocalParametersI4ivEXT, 5, uintptr(program), uintptr(target), uintptr(index), uintptr(count), uintptr(unsafe.Pointer(params)), 0)
}
func NamedProgramLocalParametersI4uivEXT(program uint32, target uint32, index uint32, count int32, params *uint32) {
	syscall.Syscall6(gpNamedProgramLocalParametersI4uivEXT, 5, uintptr(program), uintptr(target), uintptr(index), uintptr(count), uintptr(unsafe.Pointer(params)), 0)
}
func NamedProgramStringEXT(program uint32, target uint32, format uint32, len int32, xstring unsafe.Pointer) {
	syscall.Syscall6(gpNamedProgramStringEXT, 5, uintptr(program), uintptr(target), uintptr(format), uintptr(len), uintptr(xstring), 0)
}

// establish data storage, format and dimensions of a     renderbuffer object's image
func NamedRenderbufferStorage(renderbuffer uint32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpNamedRenderbufferStorage, 4, uintptr(renderbuffer), uintptr(internalformat), uintptr(width), uintptr(height), 0, 0)
}
func NamedRenderbufferStorageEXT(renderbuffer uint32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpNamedRenderbufferStorageEXT, 4, uintptr(renderbuffer), uintptr(internalformat), uintptr(width), uintptr(height), 0, 0)
}

// establish data storage, format, dimensions and sample count of     a renderbuffer object's image
func NamedRenderbufferStorageMultisample(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpNamedRenderbufferStorageMultisample, 5, uintptr(renderbuffer), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func NamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpNamedRenderbufferStorageMultisampleAdvancedAMD, 6, uintptr(renderbuffer), uintptr(samples), uintptr(storageSamples), uintptr(internalformat), uintptr(width), uintptr(height))
}
func NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpNamedRenderbufferStorageMultisampleCoverageEXT, 6, uintptr(renderbuffer), uintptr(coverageSamples), uintptr(colorSamples), uintptr(internalformat), uintptr(width), uintptr(height))
}
func NamedRenderbufferStorageMultisampleEXT(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpNamedRenderbufferStorageMultisampleEXT, 5, uintptr(renderbuffer), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func NamedStringARB(xtype uint32, namelen int32, name *uint8, stringlen int32, xstring *uint8) {
	syscall.Syscall6(gpNamedStringARB, 5, uintptr(xtype), uintptr(namelen), uintptr(unsafe.Pointer(name)), uintptr(stringlen), uintptr(unsafe.Pointer(xstring)), 0)
}

// create or replace a display list
func NewList(list uint32, mode uint32) {
	syscall.Syscall(gpNewList, 2, uintptr(list), uintptr(mode), 0)
}
func Normal3b(nx int8, ny int8, nz int8) {
	syscall.Syscall(gpNormal3b, 3, uintptr(nx), uintptr(ny), uintptr(nz))
}
func Normal3bv(v *int8) {
	syscall.Syscall(gpNormal3bv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Normal3d(nx float64, ny float64, nz float64) {
	syscall.Syscall(gpNormal3d, 3, uintptr(math.Float64bits(nx)), uintptr(math.Float64bits(ny)), uintptr(math.Float64bits(nz)))
}
func Normal3dv(v *float64) {
	syscall.Syscall(gpNormal3dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Normal3f(nx float32, ny float32, nz float32) {
	syscall.Syscall(gpNormal3f, 3, uintptr(math.Float32bits(nx)), uintptr(math.Float32bits(ny)), uintptr(math.Float32bits(nz)))
}
func Normal3fv(v *float32) {
	syscall.Syscall(gpNormal3fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Normal3i(nx int32, ny int32, nz int32) {
	syscall.Syscall(gpNormal3i, 3, uintptr(nx), uintptr(ny), uintptr(nz))
}
func Normal3iv(v *int32) {
	syscall.Syscall(gpNormal3iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Normal3s(nx int16, ny int16, nz int16) {
	syscall.Syscall(gpNormal3s, 3, uintptr(nx), uintptr(ny), uintptr(nz))
}
func Normal3sv(v *int16) {
	syscall.Syscall(gpNormal3sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func NormalFormatNV(xtype uint32, stride int32) {
	syscall.Syscall(gpNormalFormatNV, 2, uintptr(xtype), uintptr(stride), 0)
}

// define an array of normals
func NormalPointer(xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall(gpNormalPointer, 3, uintptr(xtype), uintptr(stride), uintptr(pointer))
}

// label a named object identified within a namespace
func ObjectLabel(identifier uint32, name uint32, length int32, label *uint8) {
	syscall.Syscall6(gpObjectLabel, 4, uintptr(identifier), uintptr(name), uintptr(length), uintptr(unsafe.Pointer(label)), 0, 0)
}
func ObjectLabelKHR(identifier uint32, name uint32, length int32, label *uint8) {
	syscall.Syscall6(gpObjectLabelKHR, 4, uintptr(identifier), uintptr(name), uintptr(length), uintptr(unsafe.Pointer(label)), 0, 0)
}

// label a sync object identified by a pointer
func ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *uint8) {
	syscall.Syscall(gpObjectPtrLabel, 3, uintptr(ptr), uintptr(length), uintptr(unsafe.Pointer(label)))
}
func ObjectPtrLabelKHR(ptr unsafe.Pointer, length int32, label *uint8) {
	syscall.Syscall(gpObjectPtrLabelKHR, 3, uintptr(ptr), uintptr(length), uintptr(unsafe.Pointer(label)))
}

// multiply the current matrix with an orthographic matrix
func Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
	syscall.Syscall6(gpOrtho, 6, uintptr(math.Float64bits(left)), uintptr(math.Float64bits(right)), uintptr(math.Float64bits(bottom)), uintptr(math.Float64bits(top)), uintptr(math.Float64bits(zNear)), uintptr(math.Float64bits(zFar)))
}

// place a marker in the feedback buffer
func PassThrough(token float32) {
	syscall.Syscall(gpPassThrough, 1, uintptr(math.Float32bits(token)), 0, 0)
}
func PatchParameterfv(pname uint32, values *float32) {
	syscall.Syscall(gpPatchParameterfv, 2, uintptr(pname), uintptr(unsafe.Pointer(values)), 0)
}

// specifies the parameters for patch primitives
func PatchParameteri(pname uint32, value int32) {
	syscall.Syscall(gpPatchParameteri, 2, uintptr(pname), uintptr(value), 0)
}
func PathCommandsNV(path uint32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall6(gpPathCommandsNV, 6, uintptr(path), uintptr(numCommands), uintptr(unsafe.Pointer(commands)), uintptr(numCoords), uintptr(coordType), uintptr(coords))
}
func PathCoordsNV(path uint32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall6(gpPathCoordsNV, 4, uintptr(path), uintptr(numCoords), uintptr(coordType), uintptr(coords), 0, 0)
}
func PathCoverDepthFuncNV(xfunc uint32) {
	syscall.Syscall(gpPathCoverDepthFuncNV, 1, uintptr(xfunc), 0, 0)
}
func PathDashArrayNV(path uint32, dashCount int32, dashArray *float32) {
	syscall.Syscall(gpPathDashArrayNV, 3, uintptr(path), uintptr(dashCount), uintptr(unsafe.Pointer(dashArray)))
}
func PathGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32 {
	ret, _, _ := syscall.Syscall9(gpPathGlyphIndexArrayNV, 8, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(firstGlyphIndex), uintptr(numGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)), 0)
	return (uint32)(ret)
}
func PathGlyphIndexRangeNV(fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, pathParameterTemplate uint32, emScale float32, baseAndCount *uint32) uint32 {
	ret, _, _ := syscall.Syscall6(gpPathGlyphIndexRangeNV, 6, uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)), uintptr(unsafe.Pointer(baseAndCount)))
	return (uint32)(ret)
}
func PathGlyphRangeNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyph uint32, numGlyphs int32, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
	syscall.Syscall9(gpPathGlyphRangeNV, 9, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(firstGlyph), uintptr(numGlyphs), uintptr(handleMissingGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)))
}
func PathGlyphsNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, numGlyphs int32, xtype uint32, charcodes unsafe.Pointer, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
	syscall.Syscall12(gpPathGlyphsNV, 10, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontName), uintptr(fontStyle), uintptr(numGlyphs), uintptr(xtype), uintptr(charcodes), uintptr(handleMissingGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)), 0, 0)
}
func PathMemoryGlyphIndexArrayNV(firstPathName uint32, fontTarget uint32, fontSize int, fontData unsafe.Pointer, faceIndex int32, firstGlyphIndex uint32, numGlyphs int32, pathParameterTemplate uint32, emScale float32) uint32 {
	ret, _, _ := syscall.Syscall9(gpPathMemoryGlyphIndexArrayNV, 9, uintptr(firstPathName), uintptr(fontTarget), uintptr(fontSize), uintptr(fontData), uintptr(faceIndex), uintptr(firstGlyphIndex), uintptr(numGlyphs), uintptr(pathParameterTemplate), uintptr(math.Float32bits(emScale)))
	return (uint32)(ret)
}
func PathParameterfNV(path uint32, pname uint32, value float32) {
	syscall.Syscall(gpPathParameterfNV, 3, uintptr(path), uintptr(pname), uintptr(math.Float32bits(value)))
}
func PathParameterfvNV(path uint32, pname uint32, value *float32) {
	syscall.Syscall(gpPathParameterfvNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func PathParameteriNV(path uint32, pname uint32, value int32) {
	syscall.Syscall(gpPathParameteriNV, 3, uintptr(path), uintptr(pname), uintptr(value))
}
func PathParameterivNV(path uint32, pname uint32, value *int32) {
	syscall.Syscall(gpPathParameterivNV, 3, uintptr(path), uintptr(pname), uintptr(unsafe.Pointer(value)))
}
func PathStencilDepthOffsetNV(factor float32, units float32) {
	syscall.Syscall(gpPathStencilDepthOffsetNV, 2, uintptr(math.Float32bits(factor)), uintptr(math.Float32bits(units)), 0)
}
func PathStencilFuncNV(xfunc uint32, ref int32, mask uint32) {
	syscall.Syscall(gpPathStencilFuncNV, 3, uintptr(xfunc), uintptr(ref), uintptr(mask))
}
func PathStringNV(path uint32, format uint32, length int32, pathString unsafe.Pointer) {
	syscall.Syscall6(gpPathStringNV, 4, uintptr(path), uintptr(format), uintptr(length), uintptr(pathString), 0, 0)
}
func PathSubCommandsNV(path uint32, commandStart int32, commandsToDelete int32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall9(gpPathSubCommandsNV, 8, uintptr(path), uintptr(commandStart), uintptr(commandsToDelete), uintptr(numCommands), uintptr(unsafe.Pointer(commands)), uintptr(numCoords), uintptr(coordType), uintptr(coords), 0)
}
func PathSubCoordsNV(path uint32, coordStart int32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
	syscall.Syscall6(gpPathSubCoordsNV, 5, uintptr(path), uintptr(coordStart), uintptr(numCoords), uintptr(coordType), uintptr(coords), 0)
}

// pause transform feedback operations
func PauseTransformFeedback() {
	syscall.Syscall(gpPauseTransformFeedback, 0, 0, 0, 0)
}
func PixelMapfv(xmap uint32, mapsize int32, values *float32) {
	syscall.Syscall(gpPixelMapfv, 3, uintptr(xmap), uintptr(mapsize), uintptr(unsafe.Pointer(values)))
}
func PixelMapuiv(xmap uint32, mapsize int32, values *uint32) {
	syscall.Syscall(gpPixelMapuiv, 3, uintptr(xmap), uintptr(mapsize), uintptr(unsafe.Pointer(values)))
}
func PixelMapusv(xmap uint32, mapsize int32, values *uint16) {
	syscall.Syscall(gpPixelMapusv, 3, uintptr(xmap), uintptr(mapsize), uintptr(unsafe.Pointer(values)))
}
func PixelStoref(pname uint32, param float32) {
	syscall.Syscall(gpPixelStoref, 2, uintptr(pname), uintptr(math.Float32bits(param)), 0)
}

// set pixel storage modes
func PixelStorei(pname uint32, param int32) {
	syscall.Syscall(gpPixelStorei, 2, uintptr(pname), uintptr(param), 0)
}
func PixelTransferf(pname uint32, param float32) {
	syscall.Syscall(gpPixelTransferf, 2, uintptr(pname), uintptr(math.Float32bits(param)), 0)
}
func PixelTransferi(pname uint32, param int32) {
	syscall.Syscall(gpPixelTransferi, 2, uintptr(pname), uintptr(param), 0)
}

// specify the pixel zoom factors
func PixelZoom(xfactor float32, yfactor float32) {
	syscall.Syscall(gpPixelZoom, 2, uintptr(math.Float32bits(xfactor)), uintptr(math.Float32bits(yfactor)), 0)
}
func PointAlongPathNV(path uint32, startSegment int32, numSegments int32, distance float32, x *float32, y *float32, tangentX *float32, tangentY *float32) bool {
	ret, _, _ := syscall.Syscall9(gpPointAlongPathNV, 8, uintptr(path), uintptr(startSegment), uintptr(numSegments), uintptr(math.Float32bits(distance)), uintptr(unsafe.Pointer(x)), uintptr(unsafe.Pointer(y)), uintptr(unsafe.Pointer(tangentX)), uintptr(unsafe.Pointer(tangentY)), 0)
	return ret != 0
}
func PointParameterf(pname uint32, param float32) {
	syscall.Syscall(gpPointParameterf, 2, uintptr(pname), uintptr(math.Float32bits(param)), 0)
}
func PointParameterfv(pname uint32, params *float32) {
	syscall.Syscall(gpPointParameterfv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}
func PointParameteri(pname uint32, param int32) {
	syscall.Syscall(gpPointParameteri, 2, uintptr(pname), uintptr(param), 0)
}
func PointParameteriv(pname uint32, params *int32) {
	syscall.Syscall(gpPointParameteriv, 2, uintptr(pname), uintptr(unsafe.Pointer(params)), 0)
}

// specify the diameter of rasterized points
func PointSize(size float32) {
	syscall.Syscall(gpPointSize, 1, uintptr(math.Float32bits(size)), 0, 0)
}

// select a polygon rasterization mode
func PolygonMode(face uint32, mode uint32) {
	syscall.Syscall(gpPolygonMode, 2, uintptr(face), uintptr(mode), 0)
}

// set the scale and units used to calculate depth values
func PolygonOffset(factor float32, units float32) {
	syscall.Syscall(gpPolygonOffset, 2, uintptr(math.Float32bits(factor)), uintptr(math.Float32bits(units)), 0)
}
func PolygonOffsetClamp(factor float32, units float32, clamp float32) {
	syscall.Syscall(gpPolygonOffsetClamp, 3, uintptr(math.Float32bits(factor)), uintptr(math.Float32bits(units)), uintptr(math.Float32bits(clamp)))
}
func PolygonOffsetClampEXT(factor float32, units float32, clamp float32) {
	syscall.Syscall(gpPolygonOffsetClampEXT, 3, uintptr(math.Float32bits(factor)), uintptr(math.Float32bits(units)), uintptr(math.Float32bits(clamp)))
}

// set the polygon stippling pattern
func PolygonStipple(mask *uint8) {
	syscall.Syscall(gpPolygonStipple, 1, uintptr(unsafe.Pointer(mask)), 0, 0)
}
func PopAttrib() {
	syscall.Syscall(gpPopAttrib, 0, 0, 0, 0)
}
func PopClientAttrib() {
	syscall.Syscall(gpPopClientAttrib, 0, 0, 0, 0)
}

// pop the active debug group
func PopDebugGroup() {
	syscall.Syscall(gpPopDebugGroup, 0, 0, 0, 0)
}
func PopDebugGroupKHR() {
	syscall.Syscall(gpPopDebugGroupKHR, 0, 0, 0, 0)
}
func PopGroupMarkerEXT() {
	syscall.Syscall(gpPopGroupMarkerEXT, 0, 0, 0, 0)
}
func PopMatrix() {
	syscall.Syscall(gpPopMatrix, 0, 0, 0, 0)
}
func PopName() {
	syscall.Syscall(gpPopName, 0, 0, 0, 0)
}
func PrimitiveBoundingBoxARB(minX float32, minY float32, minZ float32, minW float32, maxX float32, maxY float32, maxZ float32, maxW float32) {
	syscall.Syscall9(gpPrimitiveBoundingBoxARB, 8, uintptr(math.Float32bits(minX)), uintptr(math.Float32bits(minY)), uintptr(math.Float32bits(minZ)), uintptr(math.Float32bits(minW)), uintptr(math.Float32bits(maxX)), uintptr(math.Float32bits(maxY)), uintptr(math.Float32bits(maxZ)), uintptr(math.Float32bits(maxW)), 0)
}

// specify the primitive restart index
func PrimitiveRestartIndex(index uint32) {
	syscall.Syscall(gpPrimitiveRestartIndex, 1, uintptr(index), 0, 0)
}

// set texture residence priority
func PrioritizeTextures(n int32, textures *uint32, priorities *float32) {
	syscall.Syscall(gpPrioritizeTextures, 3, uintptr(n), uintptr(unsafe.Pointer(textures)), uintptr(unsafe.Pointer(priorities)))
}

// load a program object with a program binary
func ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
	syscall.Syscall6(gpProgramBinary, 4, uintptr(program), uintptr(binaryFormat), uintptr(binary), uintptr(length), 0, 0)
}

// specify a parameter for a program object
func ProgramParameteri(program uint32, pname uint32, value int32) {
	syscall.Syscall(gpProgramParameteri, 3, uintptr(program), uintptr(pname), uintptr(value))
}
func ProgramParameteriARB(program uint32, pname uint32, value int32) {
	syscall.Syscall(gpProgramParameteriARB, 3, uintptr(program), uintptr(pname), uintptr(value))
}
func ProgramParameteriEXT(program uint32, pname uint32, value int32) {
	syscall.Syscall(gpProgramParameteriEXT, 3, uintptr(program), uintptr(pname), uintptr(value))
}
func ProgramPathFragmentInputGenNV(program uint32, location int32, genMode uint32, components int32, coeffs *float32) {
	syscall.Syscall6(gpProgramPathFragmentInputGenNV, 5, uintptr(program), uintptr(location), uintptr(genMode), uintptr(components), uintptr(unsafe.Pointer(coeffs)), 0)
}
func ProgramUniform1d(program uint32, location int32, v0 float64) {
	syscall.Syscall(gpProgramUniform1d, 3, uintptr(program), uintptr(location), uintptr(math.Float64bits(v0)))
}
func ProgramUniform1dEXT(program uint32, location int32, x float64) {
	syscall.Syscall(gpProgramUniform1dEXT, 3, uintptr(program), uintptr(location), uintptr(math.Float64bits(x)))
}
func ProgramUniform1dv(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform1dv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1dvEXT(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform1dvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1f(program uint32, location int32, v0 float32) {
	syscall.Syscall(gpProgramUniform1f, 3, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)))
}
func ProgramUniform1fEXT(program uint32, location int32, v0 float32) {
	syscall.Syscall(gpProgramUniform1fEXT, 3, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform1fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform1fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1i(program uint32, location int32, v0 int32) {
	syscall.Syscall(gpProgramUniform1i, 3, uintptr(program), uintptr(location), uintptr(v0))
}
func ProgramUniform1i64ARB(program uint32, location int32, x int64) {
	syscall.Syscall(gpProgramUniform1i64ARB, 3, uintptr(program), uintptr(location), uintptr(x))
}
func ProgramUniform1i64NV(program uint32, location int32, x int64) {
	syscall.Syscall(gpProgramUniform1i64NV, 3, uintptr(program), uintptr(location), uintptr(x))
}
func ProgramUniform1i64vARB(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform1i64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform1i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1iEXT(program uint32, location int32, v0 int32) {
	syscall.Syscall(gpProgramUniform1iEXT, 3, uintptr(program), uintptr(location), uintptr(v0))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform1iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform1ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1ui(program uint32, location int32, v0 uint32) {
	syscall.Syscall(gpProgramUniform1ui, 3, uintptr(program), uintptr(location), uintptr(v0))
}
func ProgramUniform1ui64ARB(program uint32, location int32, x uint64) {
	syscall.Syscall(gpProgramUniform1ui64ARB, 3, uintptr(program), uintptr(location), uintptr(x))
}
func ProgramUniform1ui64NV(program uint32, location int32, x uint64) {
	syscall.Syscall(gpProgramUniform1ui64NV, 3, uintptr(program), uintptr(location), uintptr(x))
}
func ProgramUniform1ui64vARB(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform1ui64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform1ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1uiEXT(program uint32, location int32, v0 uint32) {
	syscall.Syscall(gpProgramUniform1uiEXT, 3, uintptr(program), uintptr(location), uintptr(v0))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform1uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform1uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform1uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64) {
	syscall.Syscall6(gpProgramUniform2d, 4, uintptr(program), uintptr(location), uintptr(math.Float64bits(v0)), uintptr(math.Float64bits(v1)), 0, 0)
}
func ProgramUniform2dEXT(program uint32, location int32, x float64, y float64) {
	syscall.Syscall6(gpProgramUniform2dEXT, 4, uintptr(program), uintptr(location), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), 0, 0)
}
func ProgramUniform2dv(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform2dv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2dvEXT(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform2dvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32) {
	syscall.Syscall6(gpProgramUniform2f, 4, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), 0, 0)
}
func ProgramUniform2fEXT(program uint32, location int32, v0 float32, v1 float32) {
	syscall.Syscall6(gpProgramUniform2fEXT, 4, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform2fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform2fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32) {
	syscall.Syscall6(gpProgramUniform2i, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}
func ProgramUniform2i64ARB(program uint32, location int32, x int64, y int64) {
	syscall.Syscall6(gpProgramUniform2i64ARB, 4, uintptr(program), uintptr(location), uintptr(x), uintptr(y), 0, 0)
}
func ProgramUniform2i64NV(program uint32, location int32, x int64, y int64) {
	syscall.Syscall6(gpProgramUniform2i64NV, 4, uintptr(program), uintptr(location), uintptr(x), uintptr(y), 0, 0)
}
func ProgramUniform2i64vARB(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform2i64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform2i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2iEXT(program uint32, location int32, v0 int32, v1 int32) {
	syscall.Syscall6(gpProgramUniform2iEXT, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform2iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform2ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32) {
	syscall.Syscall6(gpProgramUniform2ui, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}
func ProgramUniform2ui64ARB(program uint32, location int32, x uint64, y uint64) {
	syscall.Syscall6(gpProgramUniform2ui64ARB, 4, uintptr(program), uintptr(location), uintptr(x), uintptr(y), 0, 0)
}
func ProgramUniform2ui64NV(program uint32, location int32, x uint64, y uint64) {
	syscall.Syscall6(gpProgramUniform2ui64NV, 4, uintptr(program), uintptr(location), uintptr(x), uintptr(y), 0, 0)
}
func ProgramUniform2ui64vARB(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform2ui64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform2ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2uiEXT(program uint32, location int32, v0 uint32, v1 uint32) {
	syscall.Syscall6(gpProgramUniform2uiEXT, 4, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform2uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform2uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform2uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64) {
	syscall.Syscall6(gpProgramUniform3d, 5, uintptr(program), uintptr(location), uintptr(math.Float64bits(v0)), uintptr(math.Float64bits(v1)), uintptr(math.Float64bits(v2)), 0)
}
func ProgramUniform3dEXT(program uint32, location int32, x float64, y float64, z float64) {
	syscall.Syscall6(gpProgramUniform3dEXT, 5, uintptr(program), uintptr(location), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0)
}
func ProgramUniform3dv(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform3dv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3dvEXT(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform3dvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
	syscall.Syscall6(gpProgramUniform3f, 5, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), 0)
}
func ProgramUniform3fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
	syscall.Syscall6(gpProgramUniform3fEXT, 5, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform3fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform3fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
	syscall.Syscall6(gpProgramUniform3i, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}
func ProgramUniform3i64ARB(program uint32, location int32, x int64, y int64, z int64) {
	syscall.Syscall6(gpProgramUniform3i64ARB, 5, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0)
}
func ProgramUniform3i64NV(program uint32, location int32, x int64, y int64, z int64) {
	syscall.Syscall6(gpProgramUniform3i64NV, 5, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0)
}
func ProgramUniform3i64vARB(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform3i64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform3i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
	syscall.Syscall6(gpProgramUniform3iEXT, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform3iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform3ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
	syscall.Syscall6(gpProgramUniform3ui, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}
func ProgramUniform3ui64ARB(program uint32, location int32, x uint64, y uint64, z uint64) {
	syscall.Syscall6(gpProgramUniform3ui64ARB, 5, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0)
}
func ProgramUniform3ui64NV(program uint32, location int32, x uint64, y uint64, z uint64) {
	syscall.Syscall6(gpProgramUniform3ui64NV, 5, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0)
}
func ProgramUniform3ui64vARB(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform3ui64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform3ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
	syscall.Syscall6(gpProgramUniform3uiEXT, 5, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform3uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform3uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform3uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64) {
	syscall.Syscall6(gpProgramUniform4d, 6, uintptr(program), uintptr(location), uintptr(math.Float64bits(v0)), uintptr(math.Float64bits(v1)), uintptr(math.Float64bits(v2)), uintptr(math.Float64bits(v3)))
}
func ProgramUniform4dEXT(program uint32, location int32, x float64, y float64, z float64, w float64) {
	syscall.Syscall6(gpProgramUniform4dEXT, 6, uintptr(program), uintptr(location), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), uintptr(math.Float64bits(w)))
}
func ProgramUniform4dv(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform4dv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4dvEXT(program uint32, location int32, count int32, value *float64) {
	syscall.Syscall6(gpProgramUniform4dvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	syscall.Syscall6(gpProgramUniform4f, 6, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), uintptr(math.Float32bits(v3)))
}
func ProgramUniform4fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	syscall.Syscall6(gpProgramUniform4fEXT, 6, uintptr(program), uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), uintptr(math.Float32bits(v3)))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4fv(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform4fv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4fvEXT(program uint32, location int32, count int32, value *float32) {
	syscall.Syscall6(gpProgramUniform4fvEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	syscall.Syscall6(gpProgramUniform4i, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}
func ProgramUniform4i64ARB(program uint32, location int32, x int64, y int64, z int64, w int64) {
	syscall.Syscall6(gpProgramUniform4i64ARB, 6, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w))
}
func ProgramUniform4i64NV(program uint32, location int32, x int64, y int64, z int64, w int64) {
	syscall.Syscall6(gpProgramUniform4i64NV, 6, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w))
}
func ProgramUniform4i64vARB(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform4i64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4i64vNV(program uint32, location int32, count int32, value *int64) {
	syscall.Syscall6(gpProgramUniform4i64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	syscall.Syscall6(gpProgramUniform4iEXT, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4iv(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform4iv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4ivEXT(program uint32, location int32, count int32, value *int32) {
	syscall.Syscall6(gpProgramUniform4ivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	syscall.Syscall6(gpProgramUniform4ui, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}
func ProgramUniform4ui64ARB(program uint32, location int32, x uint64, y uint64, z uint64, w uint64) {
	syscall.Syscall6(gpProgramUniform4ui64ARB, 6, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w))
}
func ProgramUniform4ui64NV(program uint32, location int32, x uint64, y uint64, z uint64, w uint64) {
	syscall.Syscall6(gpProgramUniform4ui64NV, 6, uintptr(program), uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w))
}
func ProgramUniform4ui64vARB(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform4ui64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4ui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniform4ui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	syscall.Syscall6(gpProgramUniform4uiEXT, 6, uintptr(program), uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3))
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform4uiv, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniform4uivEXT(program uint32, location int32, count int32, value *uint32) {
	syscall.Syscall6(gpProgramUniform4uivEXT, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}
func ProgramUniformHandleui64ARB(program uint32, location int32, value uint64) {
	syscall.Syscall(gpProgramUniformHandleui64ARB, 3, uintptr(program), uintptr(location), uintptr(value))
}
func ProgramUniformHandleui64NV(program uint32, location int32, value uint64) {
	syscall.Syscall(gpProgramUniformHandleui64NV, 3, uintptr(program), uintptr(location), uintptr(value))
}
func ProgramUniformHandleui64vARB(program uint32, location int32, count int32, values *uint64) {
	syscall.Syscall6(gpProgramUniformHandleui64vARB, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(values)), 0, 0)
}
func ProgramUniformHandleui64vNV(program uint32, location int32, count int32, values *uint64) {
	syscall.Syscall6(gpProgramUniformHandleui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(values)), 0, 0)
}
func ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix2dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix2dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix2x3dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix2x3dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x3fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x3fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix2x4dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix2x4dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x4fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix2x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix2x4fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix3dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix3dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix3x2dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix3x2dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x2fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x2fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix3x4dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix3x4dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x4fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix3x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix3x4fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix4dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix4dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix4x2dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix4x2dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x2fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x2fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix4x3dv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpProgramUniformMatrix4x3dvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}

// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x3fv, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformMatrix4x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpProgramUniformMatrix4x3fvEXT, 5, uintptr(program), uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0)
}
func ProgramUniformui64NV(program uint32, location int32, value uint64) {
	syscall.Syscall(gpProgramUniformui64NV, 3, uintptr(program), uintptr(location), uintptr(value))
}
func ProgramUniformui64vNV(program uint32, location int32, count int32, value *uint64) {
	syscall.Syscall6(gpProgramUniformui64vNV, 4, uintptr(program), uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)), 0, 0)
}

// specifiy the vertex to be used as the source of data for flat shaded varyings
func ProvokingVertex(mode uint32) {
	syscall.Syscall(gpProvokingVertex, 1, uintptr(mode), 0, 0)
}

// push and pop the server attribute stack
func PushAttrib(mask uint32) {
	syscall.Syscall(gpPushAttrib, 1, uintptr(mask), 0, 0)
}

// push and pop the client attribute stack
func PushClientAttrib(mask uint32) {
	syscall.Syscall(gpPushClientAttrib, 1, uintptr(mask), 0, 0)
}
func PushClientAttribDefaultEXT(mask uint32) {
	syscall.Syscall(gpPushClientAttribDefaultEXT, 1, uintptr(mask), 0, 0)
}

// push a named debug group into the command stream
func PushDebugGroup(source uint32, id uint32, length int32, message *uint8) {
	syscall.Syscall6(gpPushDebugGroup, 4, uintptr(source), uintptr(id), uintptr(length), uintptr(unsafe.Pointer(message)), 0, 0)
}
func PushDebugGroupKHR(source uint32, id uint32, length int32, message *uint8) {
	syscall.Syscall6(gpPushDebugGroupKHR, 4, uintptr(source), uintptr(id), uintptr(length), uintptr(unsafe.Pointer(message)), 0, 0)
}
func PushGroupMarkerEXT(length int32, marker *uint8) {
	syscall.Syscall(gpPushGroupMarkerEXT, 2, uintptr(length), uintptr(unsafe.Pointer(marker)), 0)
}

// push and pop the current matrix stack
func PushMatrix() {
	syscall.Syscall(gpPushMatrix, 0, 0, 0, 0)
}

// push and pop the name stack
func PushName(name uint32) {
	syscall.Syscall(gpPushName, 1, uintptr(name), 0, 0)
}

// record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
func QueryCounter(id uint32, target uint32) {
	syscall.Syscall(gpQueryCounter, 2, uintptr(id), uintptr(target), 0)
}
func RasterPos2d(x float64, y float64) {
	syscall.Syscall(gpRasterPos2d, 2, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), 0)
}
func RasterPos2dv(v *float64) {
	syscall.Syscall(gpRasterPos2dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos2f(x float32, y float32) {
	syscall.Syscall(gpRasterPos2f, 2, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), 0)
}
func RasterPos2fv(v *float32) {
	syscall.Syscall(gpRasterPos2fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos2i(x int32, y int32) {
	syscall.Syscall(gpRasterPos2i, 2, uintptr(x), uintptr(y), 0)
}
func RasterPos2iv(v *int32) {
	syscall.Syscall(gpRasterPos2iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos2s(x int16, y int16) {
	syscall.Syscall(gpRasterPos2s, 2, uintptr(x), uintptr(y), 0)
}
func RasterPos2sv(v *int16) {
	syscall.Syscall(gpRasterPos2sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos3d(x float64, y float64, z float64) {
	syscall.Syscall(gpRasterPos3d, 3, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)))
}
func RasterPos3dv(v *float64) {
	syscall.Syscall(gpRasterPos3dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos3f(x float32, y float32, z float32) {
	syscall.Syscall(gpRasterPos3f, 3, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)))
}
func RasterPos3fv(v *float32) {
	syscall.Syscall(gpRasterPos3fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos3i(x int32, y int32, z int32) {
	syscall.Syscall(gpRasterPos3i, 3, uintptr(x), uintptr(y), uintptr(z))
}
func RasterPos3iv(v *int32) {
	syscall.Syscall(gpRasterPos3iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos3s(x int16, y int16, z int16) {
	syscall.Syscall(gpRasterPos3s, 3, uintptr(x), uintptr(y), uintptr(z))
}
func RasterPos3sv(v *int16) {
	syscall.Syscall(gpRasterPos3sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos4d(x float64, y float64, z float64, w float64) {
	syscall.Syscall6(gpRasterPos4d, 4, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), uintptr(math.Float64bits(w)), 0, 0)
}
func RasterPos4dv(v *float64) {
	syscall.Syscall(gpRasterPos4dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos4f(x float32, y float32, z float32, w float32) {
	syscall.Syscall6(gpRasterPos4f, 4, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), uintptr(math.Float32bits(w)), 0, 0)
}
func RasterPos4fv(v *float32) {
	syscall.Syscall(gpRasterPos4fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos4i(x int32, y int32, z int32, w int32) {
	syscall.Syscall6(gpRasterPos4i, 4, uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0, 0)
}
func RasterPos4iv(v *int32) {
	syscall.Syscall(gpRasterPos4iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterPos4s(x int16, y int16, z int16, w int16) {
	syscall.Syscall6(gpRasterPos4s, 4, uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0, 0)
}
func RasterPos4sv(v *int16) {
	syscall.Syscall(gpRasterPos4sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func RasterSamplesEXT(samples uint32, fixedsamplelocations bool) {
	syscall.Syscall(gpRasterSamplesEXT, 2, uintptr(samples), boolToUintptr(fixedsamplelocations), 0)
}

// select a color buffer source for pixels
func ReadBuffer(src uint32) {
	syscall.Syscall(gpReadBuffer, 1, uintptr(src), 0, 0)
}

// read a block of pixels from the frame buffer
func ReadPixels(x int32, y int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpReadPixels, 7, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}

// read a block of pixels from the frame buffer
func ReadnPixels(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpReadnPixels, 8, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(data), 0)
}
func ReadnPixelsARB(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpReadnPixelsARB, 8, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(data), 0)
}
func ReadnPixelsKHR(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
	syscall.Syscall9(gpReadnPixelsKHR, 8, uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(bufSize), uintptr(data), 0)
}
func Rectd(x1 float64, y1 float64, x2 float64, y2 float64) {
	syscall.Syscall6(gpRectd, 4, uintptr(math.Float64bits(x1)), uintptr(math.Float64bits(y1)), uintptr(math.Float64bits(x2)), uintptr(math.Float64bits(y2)), 0, 0)
}
func Rectdv(v1 *float64, v2 *float64) {
	syscall.Syscall(gpRectdv, 2, uintptr(unsafe.Pointer(v1)), uintptr(unsafe.Pointer(v2)), 0)
}
func Rectf(x1 float32, y1 float32, x2 float32, y2 float32) {
	syscall.Syscall6(gpRectf, 4, uintptr(math.Float32bits(x1)), uintptr(math.Float32bits(y1)), uintptr(math.Float32bits(x2)), uintptr(math.Float32bits(y2)), 0, 0)
}
func Rectfv(v1 *float32, v2 *float32) {
	syscall.Syscall(gpRectfv, 2, uintptr(unsafe.Pointer(v1)), uintptr(unsafe.Pointer(v2)), 0)
}
func Recti(x1 int32, y1 int32, x2 int32, y2 int32) {
	syscall.Syscall6(gpRecti, 4, uintptr(x1), uintptr(y1), uintptr(x2), uintptr(y2), 0, 0)
}
func Rectiv(v1 *int32, v2 *int32) {
	syscall.Syscall(gpRectiv, 2, uintptr(unsafe.Pointer(v1)), uintptr(unsafe.Pointer(v2)), 0)
}
func Rects(x1 int16, y1 int16, x2 int16, y2 int16) {
	syscall.Syscall6(gpRects, 4, uintptr(x1), uintptr(y1), uintptr(x2), uintptr(y2), 0, 0)
}
func Rectsv(v1 *int16, v2 *int16) {
	syscall.Syscall(gpRectsv, 2, uintptr(unsafe.Pointer(v1)), uintptr(unsafe.Pointer(v2)), 0)
}

// release resources consumed by the implementation's shader compiler
func ReleaseShaderCompiler() {
	syscall.Syscall(gpReleaseShaderCompiler, 0, 0, 0, 0)
}

// set rasterization mode
func RenderMode(mode uint32) int32 {
	ret, _, _ := syscall.Syscall(gpRenderMode, 1, uintptr(mode), 0, 0)
	return (int32)(ret)
}

// establish data storage, format and dimensions of a     renderbuffer object's image
func RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorage, 4, uintptr(target), uintptr(internalformat), uintptr(width), uintptr(height), 0, 0)
}

// establish data storage, format, dimensions and sample count of     a renderbuffer object's image
func RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisample, 5, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func RenderbufferStorageMultisampleAdvancedAMD(target uint32, samples int32, storageSamples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleAdvancedAMD, 6, uintptr(target), uintptr(samples), uintptr(storageSamples), uintptr(internalformat), uintptr(width), uintptr(height))
}
func RenderbufferStorageMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpRenderbufferStorageMultisampleCoverageNV, 6, uintptr(target), uintptr(coverageSamples), uintptr(colorSamples), uintptr(internalformat), uintptr(width), uintptr(height))
}
func ResetMemoryObjectParameterNV(memory uint32, pname uint32) {
	syscall.Syscall(gpResetMemoryObjectParameterNV, 2, uintptr(memory), uintptr(pname), 0)
}
func ResolveDepthValuesNV() {
	syscall.Syscall(gpResolveDepthValuesNV, 0, 0, 0, 0)
}

// resume transform feedback operations
func ResumeTransformFeedback() {
	syscall.Syscall(gpResumeTransformFeedback, 0, 0, 0, 0)
}
func Rotated(angle float64, x float64, y float64, z float64) {
	syscall.Syscall6(gpRotated, 4, uintptr(math.Float64bits(angle)), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func Rotatef(angle float32, x float32, y float32, z float32) {
	syscall.Syscall6(gpRotatef, 4, uintptr(math.Float32bits(angle)), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0, 0)
}

// specify multisample coverage parameters
func SampleCoverage(value float32, invert bool) {
	syscall.Syscall(gpSampleCoverage, 2, uintptr(math.Float32bits(value)), boolToUintptr(invert), 0)
}

// set the value of a sub-word of the sample mask
func SampleMaski(maskNumber uint32, mask uint32) {
	syscall.Syscall(gpSampleMaski, 2, uintptr(maskNumber), uintptr(mask), 0)
}
func SamplerParameterIiv(sampler uint32, pname uint32, param *int32) {
	syscall.Syscall(gpSamplerParameterIiv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32) {
	syscall.Syscall(gpSamplerParameterIuiv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameterf(sampler uint32, pname uint32, param float32) {
	syscall.Syscall(gpSamplerParameterf, 3, uintptr(sampler), uintptr(pname), uintptr(math.Float32bits(param)))
}
func SamplerParameterfv(sampler uint32, pname uint32, param *float32) {
	syscall.Syscall(gpSamplerParameterfv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func SamplerParameteri(sampler uint32, pname uint32, param int32) {
	syscall.Syscall(gpSamplerParameteri, 3, uintptr(sampler), uintptr(pname), uintptr(param))
}
func SamplerParameteriv(sampler uint32, pname uint32, param *int32) {
	syscall.Syscall(gpSamplerParameteriv, 3, uintptr(sampler), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func Scaled(x float64, y float64, z float64) {
	syscall.Syscall(gpScaled, 3, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)))
}
func Scalef(x float32, y float32, z float32) {
	syscall.Syscall(gpScalef, 3, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)))
}

// define the scissor box
func Scissor(x int32, y int32, width int32, height int32) {
	syscall.Syscall6(gpScissor, 4, uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}
func ScissorArrayv(first uint32, count int32, v *int32) {
	syscall.Syscall(gpScissorArrayv, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ScissorExclusiveArrayvNV(first uint32, count int32, v *int32) {
	syscall.Syscall(gpScissorExclusiveArrayvNV, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ScissorExclusiveNV(x int32, y int32, width int32, height int32) {
	syscall.Syscall6(gpScissorExclusiveNV, 4, uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}

// define the scissor box for a specific viewport
func ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32) {
	syscall.Syscall6(gpScissorIndexed, 5, uintptr(index), uintptr(left), uintptr(bottom), uintptr(width), uintptr(height), 0)
}
func ScissorIndexedv(index uint32, v *int32) {
	syscall.Syscall(gpScissorIndexedv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func SecondaryColor3b(red int8, green int8, blue int8) {
	syscall.Syscall(gpSecondaryColor3b, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func SecondaryColor3bv(v *int8) {
	syscall.Syscall(gpSecondaryColor3bv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColor3d(red float64, green float64, blue float64) {
	syscall.Syscall(gpSecondaryColor3d, 3, uintptr(math.Float64bits(red)), uintptr(math.Float64bits(green)), uintptr(math.Float64bits(blue)))
}
func SecondaryColor3dv(v *float64) {
	syscall.Syscall(gpSecondaryColor3dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColor3f(red float32, green float32, blue float32) {
	syscall.Syscall(gpSecondaryColor3f, 3, uintptr(math.Float32bits(red)), uintptr(math.Float32bits(green)), uintptr(math.Float32bits(blue)))
}
func SecondaryColor3fv(v *float32) {
	syscall.Syscall(gpSecondaryColor3fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColor3i(red int32, green int32, blue int32) {
	syscall.Syscall(gpSecondaryColor3i, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func SecondaryColor3iv(v *int32) {
	syscall.Syscall(gpSecondaryColor3iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColor3s(red int16, green int16, blue int16) {
	syscall.Syscall(gpSecondaryColor3s, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func SecondaryColor3sv(v *int16) {
	syscall.Syscall(gpSecondaryColor3sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColor3ub(red uint8, green uint8, blue uint8) {
	syscall.Syscall(gpSecondaryColor3ub, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func SecondaryColor3ubv(v *uint8) {
	syscall.Syscall(gpSecondaryColor3ubv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColor3ui(red uint32, green uint32, blue uint32) {
	syscall.Syscall(gpSecondaryColor3ui, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func SecondaryColor3uiv(v *uint32) {
	syscall.Syscall(gpSecondaryColor3uiv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColor3us(red uint16, green uint16, blue uint16) {
	syscall.Syscall(gpSecondaryColor3us, 3, uintptr(red), uintptr(green), uintptr(blue))
}
func SecondaryColor3usv(v *uint16) {
	syscall.Syscall(gpSecondaryColor3usv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func SecondaryColorFormatNV(size int32, xtype uint32, stride int32) {
	syscall.Syscall(gpSecondaryColorFormatNV, 3, uintptr(size), uintptr(xtype), uintptr(stride))
}

// define an array of secondary colors
func SecondaryColorPointer(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpSecondaryColorPointer, 4, uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0, 0)
}

// establish a buffer for selection mode values
func SelectBuffer(size int32, buffer *uint32) {
	syscall.Syscall(gpSelectBuffer, 2, uintptr(size), uintptr(unsafe.Pointer(buffer)), 0)
}
func SelectPerfMonitorCountersAMD(monitor uint32, enable bool, group uint32, numCounters int32, counterList *uint32) {
	syscall.Syscall6(gpSelectPerfMonitorCountersAMD, 5, uintptr(monitor), boolToUintptr(enable), uintptr(group), uintptr(numCounters), uintptr(unsafe.Pointer(counterList)), 0)
}

// select flat or smooth shading
func ShadeModel(mode uint32) {
	syscall.Syscall(gpShadeModel, 1, uintptr(mode), 0, 0)
}

// load pre-compiled shader binaries
func ShaderBinary(count int32, shaders *uint32, binaryformat uint32, binary unsafe.Pointer, length int32) {
	syscall.Syscall6(gpShaderBinary, 5, uintptr(count), uintptr(unsafe.Pointer(shaders)), uintptr(binaryformat), uintptr(binary), uintptr(length), 0)
}

// Replaces the source code in a shader object
func ShaderSource(shader uint32, count int32, xstring **uint8, length *int32) {
	syscall.Syscall6(gpShaderSource, 4, uintptr(shader), uintptr(count), uintptr(unsafe.Pointer(xstring)), uintptr(unsafe.Pointer(length)), 0, 0)
}

// change an active shader storage block binding
func ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32) {
	syscall.Syscall(gpShaderStorageBlockBinding, 3, uintptr(program), uintptr(storageBlockIndex), uintptr(storageBlockBinding))
}
func ShadingRateImageBarrierNV(synchronize bool) {
	syscall.Syscall(gpShadingRateImageBarrierNV, 1, boolToUintptr(synchronize), 0, 0)
}
func ShadingRateImagePaletteNV(viewport uint32, first uint32, count int32, rates *uint32) {
	syscall.Syscall6(gpShadingRateImagePaletteNV, 4, uintptr(viewport), uintptr(first), uintptr(count), uintptr(unsafe.Pointer(rates)), 0, 0)
}
func ShadingRateSampleOrderCustomNV(rate uint32, samples uint32, locations *int32) {
	syscall.Syscall(gpShadingRateSampleOrderCustomNV, 3, uintptr(rate), uintptr(samples), uintptr(unsafe.Pointer(locations)))
}
func ShadingRateSampleOrderNV(order uint32) {
	syscall.Syscall(gpShadingRateSampleOrderNV, 1, uintptr(order), 0, 0)
}
func SignalVkFenceNV(vkFence uint64) {
	syscall.Syscall(gpSignalVkFenceNV, 1, uintptr(vkFence), 0, 0)
}
func SignalVkSemaphoreNV(vkSemaphore uint64) {
	syscall.Syscall(gpSignalVkSemaphoreNV, 1, uintptr(vkSemaphore), 0, 0)
}
func SpecializeShader(shader uint32, pEntryPoint *uint8, numSpecializationConstants uint32, pConstantIndex *uint32, pConstantValue *uint32) {
	syscall.Syscall6(gpSpecializeShader, 5, uintptr(shader), uintptr(unsafe.Pointer(pEntryPoint)), uintptr(numSpecializationConstants), uintptr(unsafe.Pointer(pConstantIndex)), uintptr(unsafe.Pointer(pConstantValue)), 0)
}
func SpecializeShaderARB(shader uint32, pEntryPoint *uint8, numSpecializationConstants uint32, pConstantIndex *uint32, pConstantValue *uint32) {
	syscall.Syscall6(gpSpecializeShaderARB, 5, uintptr(shader), uintptr(unsafe.Pointer(pEntryPoint)), uintptr(numSpecializationConstants), uintptr(unsafe.Pointer(pConstantIndex)), uintptr(unsafe.Pointer(pConstantValue)), 0)
}
func StateCaptureNV(state uint32, mode uint32) {
	syscall.Syscall(gpStateCaptureNV, 2, uintptr(state), uintptr(mode), 0)
}
func StencilFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilFillPathInstancedNV, 8, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(fillMode), uintptr(mask), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0)
}
func StencilFillPathNV(path uint32, fillMode uint32, mask uint32) {
	syscall.Syscall(gpStencilFillPathNV, 3, uintptr(path), uintptr(fillMode), uintptr(mask))
}

// set front and back function and reference value for stencil testing
func StencilFunc(xfunc uint32, ref int32, mask uint32) {
	syscall.Syscall(gpStencilFunc, 3, uintptr(xfunc), uintptr(ref), uintptr(mask))
}

// set front and/or back function and reference value for stencil testing
func StencilFuncSeparate(face uint32, xfunc uint32, ref int32, mask uint32) {
	syscall.Syscall6(gpStencilFuncSeparate, 4, uintptr(face), uintptr(xfunc), uintptr(ref), uintptr(mask), 0, 0)
}

// control the front and back writing of individual bits in the stencil planes
func StencilMask(mask uint32) {
	syscall.Syscall(gpStencilMask, 1, uintptr(mask), 0, 0)
}

// control the front and/or back writing of individual bits in the stencil planes
func StencilMaskSeparate(face uint32, mask uint32) {
	syscall.Syscall(gpStencilMaskSeparate, 2, uintptr(face), uintptr(mask), 0)
}

// set front and back stencil test actions
func StencilOp(fail uint32, zfail uint32, zpass uint32) {
	syscall.Syscall(gpStencilOp, 3, uintptr(fail), uintptr(zfail), uintptr(zpass))
}

// set front and/or back stencil test actions
func StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
	syscall.Syscall6(gpStencilOpSeparate, 4, uintptr(face), uintptr(sfail), uintptr(dpfail), uintptr(dppass), 0, 0)
}
func StencilStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilStrokePathInstancedNV, 8, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(reference), uintptr(mask), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0)
}
func StencilStrokePathNV(path uint32, reference int32, mask uint32) {
	syscall.Syscall(gpStencilStrokePathNV, 3, uintptr(path), uintptr(reference), uintptr(mask))
}
func StencilThenCoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilThenCoverFillPathInstancedNV, 9, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(fillMode), uintptr(mask), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)))
}
func StencilThenCoverFillPathNV(path uint32, fillMode uint32, mask uint32, coverMode uint32) {
	syscall.Syscall6(gpStencilThenCoverFillPathNV, 4, uintptr(path), uintptr(fillMode), uintptr(mask), uintptr(coverMode), 0, 0)
}
func StencilThenCoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, coverMode uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall9(gpStencilThenCoverStrokePathInstancedNV, 9, uintptr(numPaths), uintptr(pathNameType), uintptr(paths), uintptr(pathBase), uintptr(reference), uintptr(mask), uintptr(coverMode), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)))
}
func StencilThenCoverStrokePathNV(path uint32, reference int32, mask uint32, coverMode uint32) {
	syscall.Syscall6(gpStencilThenCoverStrokePathNV, 4, uintptr(path), uintptr(reference), uintptr(mask), uintptr(coverMode), 0, 0)
}
func SubpixelPrecisionBiasNV(xbits uint32, ybits uint32) {
	syscall.Syscall(gpSubpixelPrecisionBiasNV, 2, uintptr(xbits), uintptr(ybits), 0)
}
func TexAttachMemoryNV(target uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpTexAttachMemoryNV, 3, uintptr(target), uintptr(memory), uintptr(offset))
}

// attach a buffer object's data store to a buffer texture object
func TexBuffer(target uint32, internalformat uint32, buffer uint32) {
	syscall.Syscall(gpTexBuffer, 3, uintptr(target), uintptr(internalformat), uintptr(buffer))
}
func TexBufferARB(target uint32, internalformat uint32, buffer uint32) {
	syscall.Syscall(gpTexBufferARB, 3, uintptr(target), uintptr(internalformat), uintptr(buffer))
}

// attach a range of a buffer object's data store to a buffer texture object
func TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpTexBufferRange, 5, uintptr(target), uintptr(internalformat), uintptr(buffer), uintptr(offset), uintptr(size), 0)
}
func TexCoord1d(s float64) {
	syscall.Syscall(gpTexCoord1d, 1, uintptr(math.Float64bits(s)), 0, 0)
}
func TexCoord1dv(v *float64) {
	syscall.Syscall(gpTexCoord1dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord1f(s float32) {
	syscall.Syscall(gpTexCoord1f, 1, uintptr(math.Float32bits(s)), 0, 0)
}
func TexCoord1fv(v *float32) {
	syscall.Syscall(gpTexCoord1fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord1i(s int32) {
	syscall.Syscall(gpTexCoord1i, 1, uintptr(s), 0, 0)
}
func TexCoord1iv(v *int32) {
	syscall.Syscall(gpTexCoord1iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord1s(s int16) {
	syscall.Syscall(gpTexCoord1s, 1, uintptr(s), 0, 0)
}
func TexCoord1sv(v *int16) {
	syscall.Syscall(gpTexCoord1sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord2d(s float64, t float64) {
	syscall.Syscall(gpTexCoord2d, 2, uintptr(math.Float64bits(s)), uintptr(math.Float64bits(t)), 0)
}
func TexCoord2dv(v *float64) {
	syscall.Syscall(gpTexCoord2dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord2f(s float32, t float32) {
	syscall.Syscall(gpTexCoord2f, 2, uintptr(math.Float32bits(s)), uintptr(math.Float32bits(t)), 0)
}
func TexCoord2fv(v *float32) {
	syscall.Syscall(gpTexCoord2fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord2i(s int32, t int32) {
	syscall.Syscall(gpTexCoord2i, 2, uintptr(s), uintptr(t), 0)
}
func TexCoord2iv(v *int32) {
	syscall.Syscall(gpTexCoord2iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord2s(s int16, t int16) {
	syscall.Syscall(gpTexCoord2s, 2, uintptr(s), uintptr(t), 0)
}
func TexCoord2sv(v *int16) {
	syscall.Syscall(gpTexCoord2sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord3d(s float64, t float64, r float64) {
	syscall.Syscall(gpTexCoord3d, 3, uintptr(math.Float64bits(s)), uintptr(math.Float64bits(t)), uintptr(math.Float64bits(r)))
}
func TexCoord3dv(v *float64) {
	syscall.Syscall(gpTexCoord3dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord3f(s float32, t float32, r float32) {
	syscall.Syscall(gpTexCoord3f, 3, uintptr(math.Float32bits(s)), uintptr(math.Float32bits(t)), uintptr(math.Float32bits(r)))
}
func TexCoord3fv(v *float32) {
	syscall.Syscall(gpTexCoord3fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord3i(s int32, t int32, r int32) {
	syscall.Syscall(gpTexCoord3i, 3, uintptr(s), uintptr(t), uintptr(r))
}
func TexCoord3iv(v *int32) {
	syscall.Syscall(gpTexCoord3iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord3s(s int16, t int16, r int16) {
	syscall.Syscall(gpTexCoord3s, 3, uintptr(s), uintptr(t), uintptr(r))
}
func TexCoord3sv(v *int16) {
	syscall.Syscall(gpTexCoord3sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord4d(s float64, t float64, r float64, q float64) {
	syscall.Syscall6(gpTexCoord4d, 4, uintptr(math.Float64bits(s)), uintptr(math.Float64bits(t)), uintptr(math.Float64bits(r)), uintptr(math.Float64bits(q)), 0, 0)
}
func TexCoord4dv(v *float64) {
	syscall.Syscall(gpTexCoord4dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord4f(s float32, t float32, r float32, q float32) {
	syscall.Syscall6(gpTexCoord4f, 4, uintptr(math.Float32bits(s)), uintptr(math.Float32bits(t)), uintptr(math.Float32bits(r)), uintptr(math.Float32bits(q)), 0, 0)
}
func TexCoord4fv(v *float32) {
	syscall.Syscall(gpTexCoord4fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord4i(s int32, t int32, r int32, q int32) {
	syscall.Syscall6(gpTexCoord4i, 4, uintptr(s), uintptr(t), uintptr(r), uintptr(q), 0, 0)
}
func TexCoord4iv(v *int32) {
	syscall.Syscall(gpTexCoord4iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoord4s(s int16, t int16, r int16, q int16) {
	syscall.Syscall6(gpTexCoord4s, 4, uintptr(s), uintptr(t), uintptr(r), uintptr(q), 0, 0)
}
func TexCoord4sv(v *int16) {
	syscall.Syscall(gpTexCoord4sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func TexCoordFormatNV(size int32, xtype uint32, stride int32) {
	syscall.Syscall(gpTexCoordFormatNV, 3, uintptr(size), uintptr(xtype), uintptr(stride))
}

// define an array of texture coordinates
func TexCoordPointer(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpTexCoordPointer, 4, uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0, 0)
}
func TexEnvf(target uint32, pname uint32, param float32) {
	syscall.Syscall(gpTexEnvf, 3, uintptr(target), uintptr(pname), uintptr(math.Float32bits(param)))
}
func TexEnvfv(target uint32, pname uint32, params *float32) {
	syscall.Syscall(gpTexEnvfv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexEnvi(target uint32, pname uint32, param int32) {
	syscall.Syscall(gpTexEnvi, 3, uintptr(target), uintptr(pname), uintptr(param))
}
func TexEnviv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTexEnviv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexGend(coord uint32, pname uint32, param float64) {
	syscall.Syscall(gpTexGend, 3, uintptr(coord), uintptr(pname), uintptr(math.Float64bits(param)))
}
func TexGendv(coord uint32, pname uint32, params *float64) {
	syscall.Syscall(gpTexGendv, 3, uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexGenf(coord uint32, pname uint32, param float32) {
	syscall.Syscall(gpTexGenf, 3, uintptr(coord), uintptr(pname), uintptr(math.Float32bits(param)))
}
func TexGenfv(coord uint32, pname uint32, params *float32) {
	syscall.Syscall(gpTexGenfv, 3, uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexGeni(coord uint32, pname uint32, param int32) {
	syscall.Syscall(gpTexGeni, 3, uintptr(coord), uintptr(pname), uintptr(param))
}
func TexGeniv(coord uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTexGeniv, 3, uintptr(coord), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// specify a one-dimensional texture image
func TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTexImage1D, 8, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}

// specify a two-dimensional texture image
func TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTexImage2D, 9, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels))
}

// establish the data storage, format, dimensions, and number of samples of a multisample texture's image
func TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	syscall.Syscall6(gpTexImage2DMultisample, 6, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), boolToUintptr(fixedsamplelocations))
}

// specify a three-dimensional texture image
func TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTexImage3D, 10, uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}

// establish the data storage, format, dimensions, and number of samples of a multisample texture's image
func TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	syscall.Syscall9(gpTexImage3DMultisample, 7, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(fixedsamplelocations), 0, 0)
}
func TexPageCommitmentARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool) {
	syscall.Syscall9(gpTexPageCommitmentARB, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(commit))
}
func TexParameterIiv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTexParameterIiv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameterIuiv(target uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpTexParameterIuiv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameterf(target uint32, pname uint32, param float32) {
	syscall.Syscall(gpTexParameterf, 3, uintptr(target), uintptr(pname), uintptr(math.Float32bits(param)))
}
func TexParameterfv(target uint32, pname uint32, params *float32) {
	syscall.Syscall(gpTexParameterfv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TexParameteri(target uint32, pname uint32, param int32) {
	syscall.Syscall(gpTexParameteri, 3, uintptr(target), uintptr(pname), uintptr(param))
}
func TexParameteriv(target uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTexParameteriv, 3, uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)))
}

// simultaneously specify storage for all levels of a one-dimensional texture
func TexStorage1D(target uint32, levels int32, internalformat uint32, width int32) {
	syscall.Syscall6(gpTexStorage1D, 4, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), 0, 0)
}

// simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
func TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpTexStorage2D, 5, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}

// specify storage for a two-dimensional multisample texture
func TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	syscall.Syscall6(gpTexStorage2DMultisample, 6, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), boolToUintptr(fixedsamplelocations))
}

// simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
func TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	syscall.Syscall6(gpTexStorage3D, 6, uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth))
}

// specify storage for a two-dimensional multisample array texture
func TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	syscall.Syscall9(gpTexStorage3DMultisample, 7, uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(fixedsamplelocations), 0, 0)
}

// specify a one-dimensional texture subimage
func TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTexSubImage1D, 7, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}

// specify a two-dimensional texture subimage
func TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTexSubImage2D, 9, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels))
}

// specify a three-dimensional texture subimage
func TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTexSubImage3D, 11, uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func TextureAttachMemoryNV(texture uint32, memory uint32, offset uint64) {
	syscall.Syscall(gpTextureAttachMemoryNV, 3, uintptr(texture), uintptr(memory), uintptr(offset))
}

// controls the ordering of reads and writes to rendered fragments across drawing commands
func TextureBarrier() {
	syscall.Syscall(gpTextureBarrier, 0, 0, 0, 0)
}
func TextureBarrierNV() {
	syscall.Syscall(gpTextureBarrierNV, 0, 0, 0, 0)
}

// attach a buffer object's data store to a buffer texture object
func TextureBuffer(texture uint32, internalformat uint32, buffer uint32) {
	syscall.Syscall(gpTextureBuffer, 3, uintptr(texture), uintptr(internalformat), uintptr(buffer))
}
func TextureBufferEXT(texture uint32, target uint32, internalformat uint32, buffer uint32) {
	syscall.Syscall6(gpTextureBufferEXT, 4, uintptr(texture), uintptr(target), uintptr(internalformat), uintptr(buffer), 0, 0)
}

// attach a range of a buffer object's data store to a buffer texture object
func TextureBufferRange(texture uint32, internalformat uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpTextureBufferRange, 5, uintptr(texture), uintptr(internalformat), uintptr(buffer), uintptr(offset), uintptr(size), 0)
}
func TextureBufferRangeEXT(texture uint32, target uint32, internalformat uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpTextureBufferRangeEXT, 6, uintptr(texture), uintptr(target), uintptr(internalformat), uintptr(buffer), uintptr(offset), uintptr(size))
}
func TextureImage1DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTextureImage1DEXT, 9, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels))
}
func TextureImage2DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTextureImage2DEXT, 10, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}
func TextureImage3DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTextureImage3DEXT, 11, uintptr(texture), uintptr(target), uintptr(level), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), uintptr(border), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func TexturePageCommitmentEXT(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, commit bool) {
	syscall.Syscall9(gpTexturePageCommitmentEXT, 9, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(commit))
}
func TextureParameterIiv(texture uint32, pname uint32, params *int32) {
	syscall.Syscall(gpTextureParameterIiv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpTextureParameterIivEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func TextureParameterIuiv(texture uint32, pname uint32, params *uint32) {
	syscall.Syscall(gpTextureParameterIuiv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(params)))
}
func TextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
	syscall.Syscall6(gpTextureParameterIuivEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func TextureParameterf(texture uint32, pname uint32, param float32) {
	syscall.Syscall(gpTextureParameterf, 3, uintptr(texture), uintptr(pname), uintptr(math.Float32bits(param)))
}
func TextureParameterfEXT(texture uint32, target uint32, pname uint32, param float32) {
	syscall.Syscall6(gpTextureParameterfEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(math.Float32bits(param)), 0, 0)
}
func TextureParameterfv(texture uint32, pname uint32, param *float32) {
	syscall.Syscall(gpTextureParameterfv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func TextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
	syscall.Syscall6(gpTextureParameterfvEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func TextureParameteri(texture uint32, pname uint32, param int32) {
	syscall.Syscall(gpTextureParameteri, 3, uintptr(texture), uintptr(pname), uintptr(param))
}
func TextureParameteriEXT(texture uint32, target uint32, pname uint32, param int32) {
	syscall.Syscall6(gpTextureParameteriEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(param), 0, 0)
}
func TextureParameteriv(texture uint32, pname uint32, param *int32) {
	syscall.Syscall(gpTextureParameteriv, 3, uintptr(texture), uintptr(pname), uintptr(unsafe.Pointer(param)))
}
func TextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
	syscall.Syscall6(gpTextureParameterivEXT, 4, uintptr(texture), uintptr(target), uintptr(pname), uintptr(unsafe.Pointer(params)), 0, 0)
}
func TextureRenderbufferEXT(texture uint32, target uint32, renderbuffer uint32) {
	syscall.Syscall(gpTextureRenderbufferEXT, 3, uintptr(texture), uintptr(target), uintptr(renderbuffer))
}

// simultaneously specify storage for all levels of a one-dimensional texture
func TextureStorage1D(texture uint32, levels int32, internalformat uint32, width int32) {
	syscall.Syscall6(gpTextureStorage1D, 4, uintptr(texture), uintptr(levels), uintptr(internalformat), uintptr(width), 0, 0)
}
func TextureStorage1DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32) {
	syscall.Syscall6(gpTextureStorage1DEXT, 5, uintptr(texture), uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), 0)
}

// simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
func TextureStorage2D(texture uint32, levels int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpTextureStorage2D, 5, uintptr(texture), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), 0)
}
func TextureStorage2DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32) {
	syscall.Syscall6(gpTextureStorage2DEXT, 6, uintptr(texture), uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height))
}

// specify storage for a two-dimensional multisample texture
func TextureStorage2DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	syscall.Syscall6(gpTextureStorage2DMultisample, 6, uintptr(texture), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), boolToUintptr(fixedsamplelocations))
}
func TextureStorage2DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
	syscall.Syscall9(gpTextureStorage2DMultisampleEXT, 7, uintptr(texture), uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), boolToUintptr(fixedsamplelocations), 0, 0)
}

// simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
func TextureStorage3D(texture uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	syscall.Syscall6(gpTextureStorage3D, 6, uintptr(texture), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth))
}
func TextureStorage3DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
	syscall.Syscall9(gpTextureStorage3DEXT, 7, uintptr(texture), uintptr(target), uintptr(levels), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), 0, 0)
}

// specify storage for a two-dimensional multisample array texture
func TextureStorage3DMultisample(texture uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	syscall.Syscall9(gpTextureStorage3DMultisample, 7, uintptr(texture), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(fixedsamplelocations), 0, 0)
}
func TextureStorage3DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
	syscall.Syscall9(gpTextureStorage3DMultisampleEXT, 8, uintptr(texture), uintptr(target), uintptr(samples), uintptr(internalformat), uintptr(width), uintptr(height), uintptr(depth), boolToUintptr(fixedsamplelocations), 0)
}

// specify a one-dimensional texture subimage
func TextureSubImage1D(texture uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTextureSubImage1D, 7, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}
func TextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTextureSubImage1DEXT, 8, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(width), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}

// specify a two-dimensional texture subimage
func TextureSubImage2D(texture uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall9(gpTextureSubImage2D, 9, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels))
}
func TextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTextureSubImage2DEXT, 10, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(width), uintptr(height), uintptr(format), uintptr(xtype), uintptr(pixels), 0, 0)
}

// specify a three-dimensional texture subimage
func TextureSubImage3D(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTextureSubImage3D, 11, uintptr(texture), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(pixels), 0)
}
func TextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
	syscall.Syscall12(gpTextureSubImage3DEXT, 12, uintptr(texture), uintptr(target), uintptr(level), uintptr(xoffset), uintptr(yoffset), uintptr(zoffset), uintptr(width), uintptr(height), uintptr(depth), uintptr(format), uintptr(xtype), uintptr(pixels))
}

// initialize a texture as a data alias of another texture's data store
func TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
	syscall.Syscall9(gpTextureView, 8, uintptr(texture), uintptr(target), uintptr(origtexture), uintptr(internalformat), uintptr(minlevel), uintptr(numlevels), uintptr(minlayer), uintptr(numlayers), 0)
}

// bind a buffer object to a transform feedback buffer object
func TransformFeedbackBufferBase(xfb uint32, index uint32, buffer uint32) {
	syscall.Syscall(gpTransformFeedbackBufferBase, 3, uintptr(xfb), uintptr(index), uintptr(buffer))
}

// bind a range within a buffer object to a transform feedback buffer object
func TransformFeedbackBufferRange(xfb uint32, index uint32, buffer uint32, offset int, size int) {
	syscall.Syscall6(gpTransformFeedbackBufferRange, 5, uintptr(xfb), uintptr(index), uintptr(buffer), uintptr(offset), uintptr(size), 0)
}

// specify values to record in transform feedback buffers
func TransformFeedbackVaryings(program uint32, count int32, varyings **uint8, bufferMode uint32) {
	syscall.Syscall6(gpTransformFeedbackVaryings, 4, uintptr(program), uintptr(count), uintptr(unsafe.Pointer(varyings)), uintptr(bufferMode), 0, 0)
}
func TransformPathNV(resultPath uint32, srcPath uint32, transformType uint32, transformValues *float32) {
	syscall.Syscall6(gpTransformPathNV, 4, uintptr(resultPath), uintptr(srcPath), uintptr(transformType), uintptr(unsafe.Pointer(transformValues)), 0, 0)
}
func Translated(x float64, y float64, z float64) {
	syscall.Syscall(gpTranslated, 3, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)))
}
func Translatef(x float32, y float32, z float32) {
	syscall.Syscall(gpTranslatef, 3, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)))
}
func Uniform1d(location int32, x float64) {
	syscall.Syscall(gpUniform1d, 2, uintptr(location), uintptr(math.Float64bits(x)), 0)
}
func Uniform1dv(location int32, count int32, value *float64) {
	syscall.Syscall(gpUniform1dv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1f(location int32, v0 float32) {
	syscall.Syscall(gpUniform1f, 2, uintptr(location), uintptr(math.Float32bits(v0)), 0)
}

// Specify the value of a uniform variable for the current program object
func Uniform1fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform1fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1i(location int32, v0 int32) {
	syscall.Syscall(gpUniform1i, 2, uintptr(location), uintptr(v0), 0)
}
func Uniform1i64ARB(location int32, x int64) {
	syscall.Syscall(gpUniform1i64ARB, 2, uintptr(location), uintptr(x), 0)
}
func Uniform1i64NV(location int32, x int64) {
	syscall.Syscall(gpUniform1i64NV, 2, uintptr(location), uintptr(x), 0)
}
func Uniform1i64vARB(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform1i64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform1i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform1i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform1iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1ui(location int32, v0 uint32) {
	syscall.Syscall(gpUniform1ui, 2, uintptr(location), uintptr(v0), 0)
}
func Uniform1ui64ARB(location int32, x uint64) {
	syscall.Syscall(gpUniform1ui64ARB, 2, uintptr(location), uintptr(x), 0)
}
func Uniform1ui64NV(location int32, x uint64) {
	syscall.Syscall(gpUniform1ui64NV, 2, uintptr(location), uintptr(x), 0)
}
func Uniform1ui64vARB(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform1ui64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform1ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform1ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform1uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform1uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform2d(location int32, x float64, y float64) {
	syscall.Syscall(gpUniform2d, 3, uintptr(location), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)))
}
func Uniform2dv(location int32, count int32, value *float64) {
	syscall.Syscall(gpUniform2dv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2f(location int32, v0 float32, v1 float32) {
	syscall.Syscall(gpUniform2f, 3, uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform2fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2i(location int32, v0 int32, v1 int32) {
	syscall.Syscall(gpUniform2i, 3, uintptr(location), uintptr(v0), uintptr(v1))
}
func Uniform2i64ARB(location int32, x int64, y int64) {
	syscall.Syscall(gpUniform2i64ARB, 3, uintptr(location), uintptr(x), uintptr(y))
}
func Uniform2i64NV(location int32, x int64, y int64) {
	syscall.Syscall(gpUniform2i64NV, 3, uintptr(location), uintptr(x), uintptr(y))
}
func Uniform2i64vARB(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform2i64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform2i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform2i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform2iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2ui(location int32, v0 uint32, v1 uint32) {
	syscall.Syscall(gpUniform2ui, 3, uintptr(location), uintptr(v0), uintptr(v1))
}
func Uniform2ui64ARB(location int32, x uint64, y uint64) {
	syscall.Syscall(gpUniform2ui64ARB, 3, uintptr(location), uintptr(x), uintptr(y))
}
func Uniform2ui64NV(location int32, x uint64, y uint64) {
	syscall.Syscall(gpUniform2ui64NV, 3, uintptr(location), uintptr(x), uintptr(y))
}
func Uniform2ui64vARB(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform2ui64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform2ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform2ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform2uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform2uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform3d(location int32, x float64, y float64, z float64) {
	syscall.Syscall6(gpUniform3d, 4, uintptr(location), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func Uniform3dv(location int32, count int32, value *float64) {
	syscall.Syscall(gpUniform3dv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3f(location int32, v0 float32, v1 float32, v2 float32) {
	syscall.Syscall6(gpUniform3f, 4, uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func Uniform3fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform3fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3i(location int32, v0 int32, v1 int32, v2 int32) {
	syscall.Syscall6(gpUniform3i, 4, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0, 0)
}
func Uniform3i64ARB(location int32, x int64, y int64, z int64) {
	syscall.Syscall6(gpUniform3i64ARB, 4, uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func Uniform3i64NV(location int32, x int64, y int64, z int64) {
	syscall.Syscall6(gpUniform3i64NV, 4, uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func Uniform3i64vARB(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform3i64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform3i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform3i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform3iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32) {
	syscall.Syscall6(gpUniform3ui, 4, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), 0, 0)
}
func Uniform3ui64ARB(location int32, x uint64, y uint64, z uint64) {
	syscall.Syscall6(gpUniform3ui64ARB, 4, uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func Uniform3ui64NV(location int32, x uint64, y uint64, z uint64) {
	syscall.Syscall6(gpUniform3ui64NV, 4, uintptr(location), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func Uniform3ui64vARB(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform3ui64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform3ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform3ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform3uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform3uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform4d(location int32, x float64, y float64, z float64, w float64) {
	syscall.Syscall6(gpUniform4d, 5, uintptr(location), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), uintptr(math.Float64bits(w)), 0)
}
func Uniform4dv(location int32, count int32, value *float64) {
	syscall.Syscall(gpUniform4dv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
	syscall.Syscall6(gpUniform4f, 5, uintptr(location), uintptr(math.Float32bits(v0)), uintptr(math.Float32bits(v1)), uintptr(math.Float32bits(v2)), uintptr(math.Float32bits(v3)), 0)
}

// Specify the value of a uniform variable for the current program object
func Uniform4fv(location int32, count int32, value *float32) {
	syscall.Syscall(gpUniform4fv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
	syscall.Syscall6(gpUniform4i, 5, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3), 0)
}
func Uniform4i64ARB(location int32, x int64, y int64, z int64, w int64) {
	syscall.Syscall6(gpUniform4i64ARB, 5, uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func Uniform4i64NV(location int32, x int64, y int64, z int64, w int64) {
	syscall.Syscall6(gpUniform4i64NV, 5, uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func Uniform4i64vARB(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform4i64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform4i64vNV(location int32, count int32, value *int64) {
	syscall.Syscall(gpUniform4i64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4iv(location int32, count int32, value *int32) {
	syscall.Syscall(gpUniform4iv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
	syscall.Syscall6(gpUniform4ui, 5, uintptr(location), uintptr(v0), uintptr(v1), uintptr(v2), uintptr(v3), 0)
}
func Uniform4ui64ARB(location int32, x uint64, y uint64, z uint64, w uint64) {
	syscall.Syscall6(gpUniform4ui64ARB, 5, uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func Uniform4ui64NV(location int32, x uint64, y uint64, z uint64, w uint64) {
	syscall.Syscall6(gpUniform4ui64NV, 5, uintptr(location), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func Uniform4ui64vARB(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform4ui64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func Uniform4ui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniform4ui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// Specify the value of a uniform variable for the current program object
func Uniform4uiv(location int32, count int32, value *uint32) {
	syscall.Syscall(gpUniform4uiv, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// assign a binding point to an active uniform block
func UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32) {
	syscall.Syscall(gpUniformBlockBinding, 3, uintptr(program), uintptr(uniformBlockIndex), uintptr(uniformBlockBinding))
}
func UniformHandleui64ARB(location int32, value uint64) {
	syscall.Syscall(gpUniformHandleui64ARB, 2, uintptr(location), uintptr(value), 0)
}
func UniformHandleui64NV(location int32, value uint64) {
	syscall.Syscall(gpUniformHandleui64NV, 2, uintptr(location), uintptr(value), 0)
}
func UniformHandleui64vARB(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniformHandleui64vARB, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func UniformHandleui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniformHandleui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}
func UniformMatrix2dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix2dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix2fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix2x3dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2x3fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix2x4dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix2x4fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix3dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix3dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix3fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix3x2dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3x2fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix3x4dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix3x4fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix4dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix4dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix4fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix4x2dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4x2fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64) {
	syscall.Syscall6(gpUniformMatrix4x3dv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}

// Specify the value of a uniform variable for the current program object
func UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32) {
	syscall.Syscall6(gpUniformMatrix4x3fv, 4, uintptr(location), uintptr(count), boolToUintptr(transpose), uintptr(unsafe.Pointer(value)), 0, 0)
}
func UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32) {
	syscall.Syscall(gpUniformSubroutinesuiv, 3, uintptr(shadertype), uintptr(count), uintptr(unsafe.Pointer(indices)))
}
func Uniformui64NV(location int32, value uint64) {
	syscall.Syscall(gpUniformui64NV, 2, uintptr(location), uintptr(value), 0)
}
func Uniformui64vNV(location int32, count int32, value *uint64) {
	syscall.Syscall(gpUniformui64vNV, 3, uintptr(location), uintptr(count), uintptr(unsafe.Pointer(value)))
}

// release the mapping of a buffer object's data store into the client's address space
func UnmapBuffer(target uint32) bool {
	ret, _, _ := syscall.Syscall(gpUnmapBuffer, 1, uintptr(target), 0, 0)
	return ret != 0
}

// release the mapping of a buffer object's data store into the client's address space
func UnmapNamedBuffer(buffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpUnmapNamedBuffer, 1, uintptr(buffer), 0, 0)
	return ret != 0
}
func UnmapNamedBufferEXT(buffer uint32) bool {
	ret, _, _ := syscall.Syscall(gpUnmapNamedBufferEXT, 1, uintptr(buffer), 0, 0)
	return ret != 0
}

// Installs a program object as part of current rendering state
func UseProgram(program uint32) {
	syscall.Syscall(gpUseProgram, 1, uintptr(program), 0, 0)
}

// bind stages of a program object to a program pipeline
func UseProgramStages(pipeline uint32, stages uint32, program uint32) {
	syscall.Syscall(gpUseProgramStages, 3, uintptr(pipeline), uintptr(stages), uintptr(program))
}
func UseProgramStagesEXT(pipeline uint32, stages uint32, program uint32) {
	syscall.Syscall(gpUseProgramStagesEXT, 3, uintptr(pipeline), uintptr(stages), uintptr(program))
}
func UseShaderProgramEXT(xtype uint32, program uint32) {
	syscall.Syscall(gpUseShaderProgramEXT, 2, uintptr(xtype), uintptr(program), 0)
}

// Validates a program object
func ValidateProgram(program uint32) {
	syscall.Syscall(gpValidateProgram, 1, uintptr(program), 0, 0)
}

// validate a program pipeline object against current GL state
func ValidateProgramPipeline(pipeline uint32) {
	syscall.Syscall(gpValidateProgramPipeline, 1, uintptr(pipeline), 0, 0)
}
func ValidateProgramPipelineEXT(pipeline uint32) {
	syscall.Syscall(gpValidateProgramPipelineEXT, 1, uintptr(pipeline), 0, 0)
}
func Vertex2d(x float64, y float64) {
	syscall.Syscall(gpVertex2d, 2, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), 0)
}
func Vertex2dv(v *float64) {
	syscall.Syscall(gpVertex2dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex2f(x float32, y float32) {
	syscall.Syscall(gpVertex2f, 2, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), 0)
}
func Vertex2fv(v *float32) {
	syscall.Syscall(gpVertex2fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex2i(x int32, y int32) {
	syscall.Syscall(gpVertex2i, 2, uintptr(x), uintptr(y), 0)
}
func Vertex2iv(v *int32) {
	syscall.Syscall(gpVertex2iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex2s(x int16, y int16) {
	syscall.Syscall(gpVertex2s, 2, uintptr(x), uintptr(y), 0)
}
func Vertex2sv(v *int16) {
	syscall.Syscall(gpVertex2sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex3d(x float64, y float64, z float64) {
	syscall.Syscall(gpVertex3d, 3, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)))
}
func Vertex3dv(v *float64) {
	syscall.Syscall(gpVertex3dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex3f(x float32, y float32, z float32) {
	syscall.Syscall(gpVertex3f, 3, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)))
}
func Vertex3fv(v *float32) {
	syscall.Syscall(gpVertex3fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex3i(x int32, y int32, z int32) {
	syscall.Syscall(gpVertex3i, 3, uintptr(x), uintptr(y), uintptr(z))
}
func Vertex3iv(v *int32) {
	syscall.Syscall(gpVertex3iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex3s(x int16, y int16, z int16) {
	syscall.Syscall(gpVertex3s, 3, uintptr(x), uintptr(y), uintptr(z))
}
func Vertex3sv(v *int16) {
	syscall.Syscall(gpVertex3sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex4d(x float64, y float64, z float64, w float64) {
	syscall.Syscall6(gpVertex4d, 4, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), uintptr(math.Float64bits(w)), 0, 0)
}
func Vertex4dv(v *float64) {
	syscall.Syscall(gpVertex4dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex4f(x float32, y float32, z float32, w float32) {
	syscall.Syscall6(gpVertex4f, 4, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), uintptr(math.Float32bits(w)), 0, 0)
}
func Vertex4fv(v *float32) {
	syscall.Syscall(gpVertex4fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex4i(x int32, y int32, z int32, w int32) {
	syscall.Syscall6(gpVertex4i, 4, uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0, 0)
}
func Vertex4iv(v *int32) {
	syscall.Syscall(gpVertex4iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func Vertex4s(x int16, y int16, z int16, w int16) {
	syscall.Syscall6(gpVertex4s, 4, uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0, 0)
}
func Vertex4sv(v *int16) {
	syscall.Syscall(gpVertex4sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func VertexArrayAttribBinding(vaobj uint32, attribindex uint32, bindingindex uint32) {
	syscall.Syscall(gpVertexArrayAttribBinding, 3, uintptr(vaobj), uintptr(attribindex), uintptr(bindingindex))
}

// specify the organization of vertex arrays
func VertexArrayAttribFormat(vaobj uint32, attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
	syscall.Syscall6(gpVertexArrayAttribFormat, 6, uintptr(vaobj), uintptr(attribindex), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(relativeoffset))
}
func VertexArrayAttribIFormat(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
	syscall.Syscall6(gpVertexArrayAttribIFormat, 5, uintptr(vaobj), uintptr(attribindex), uintptr(size), uintptr(xtype), uintptr(relativeoffset), 0)
}
func VertexArrayAttribLFormat(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
	syscall.Syscall6(gpVertexArrayAttribLFormat, 5, uintptr(vaobj), uintptr(attribindex), uintptr(size), uintptr(xtype), uintptr(relativeoffset), 0)
}
func VertexArrayBindVertexBufferEXT(vaobj uint32, bindingindex uint32, buffer uint32, offset int, stride int32) {
	syscall.Syscall6(gpVertexArrayBindVertexBufferEXT, 5, uintptr(vaobj), uintptr(bindingindex), uintptr(buffer), uintptr(offset), uintptr(stride), 0)
}

// modify the rate at which generic vertex attributes     advance
func VertexArrayBindingDivisor(vaobj uint32, bindingindex uint32, divisor uint32) {
	syscall.Syscall(gpVertexArrayBindingDivisor, 3, uintptr(vaobj), uintptr(bindingindex), uintptr(divisor))
}
func VertexArrayColorOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArrayColorOffsetEXT, 6, uintptr(vaobj), uintptr(buffer), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(offset))
}
func VertexArrayEdgeFlagOffsetEXT(vaobj uint32, buffer uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArrayEdgeFlagOffsetEXT, 4, uintptr(vaobj), uintptr(buffer), uintptr(stride), uintptr(offset), 0, 0)
}

// configures element array buffer binding of a vertex array object
func VertexArrayElementBuffer(vaobj uint32, buffer uint32) {
	syscall.Syscall(gpVertexArrayElementBuffer, 2, uintptr(vaobj), uintptr(buffer), 0)
}
func VertexArrayFogCoordOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArrayFogCoordOffsetEXT, 5, uintptr(vaobj), uintptr(buffer), uintptr(xtype), uintptr(stride), uintptr(offset), 0)
}
func VertexArrayIndexOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArrayIndexOffsetEXT, 5, uintptr(vaobj), uintptr(buffer), uintptr(xtype), uintptr(stride), uintptr(offset), 0)
}
func VertexArrayMultiTexCoordOffsetEXT(vaobj uint32, buffer uint32, texunit uint32, size int32, xtype uint32, stride int32, offset int) {
	syscall.Syscall9(gpVertexArrayMultiTexCoordOffsetEXT, 7, uintptr(vaobj), uintptr(buffer), uintptr(texunit), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(offset), 0, 0)
}
func VertexArrayNormalOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArrayNormalOffsetEXT, 5, uintptr(vaobj), uintptr(buffer), uintptr(xtype), uintptr(stride), uintptr(offset), 0)
}
func VertexArraySecondaryColorOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArraySecondaryColorOffsetEXT, 6, uintptr(vaobj), uintptr(buffer), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(offset))
}
func VertexArrayTexCoordOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArrayTexCoordOffsetEXT, 6, uintptr(vaobj), uintptr(buffer), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(offset))
}
func VertexArrayVertexAttribBindingEXT(vaobj uint32, attribindex uint32, bindingindex uint32) {
	syscall.Syscall(gpVertexArrayVertexAttribBindingEXT, 3, uintptr(vaobj), uintptr(attribindex), uintptr(bindingindex))
}
func VertexArrayVertexAttribDivisorEXT(vaobj uint32, index uint32, divisor uint32) {
	syscall.Syscall(gpVertexArrayVertexAttribDivisorEXT, 3, uintptr(vaobj), uintptr(index), uintptr(divisor))
}
func VertexArrayVertexAttribFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
	syscall.Syscall6(gpVertexArrayVertexAttribFormatEXT, 6, uintptr(vaobj), uintptr(attribindex), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(relativeoffset))
}
func VertexArrayVertexAttribIFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
	syscall.Syscall6(gpVertexArrayVertexAttribIFormatEXT, 5, uintptr(vaobj), uintptr(attribindex), uintptr(size), uintptr(xtype), uintptr(relativeoffset), 0)
}
func VertexArrayVertexAttribIOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, stride int32, offset int) {
	syscall.Syscall9(gpVertexArrayVertexAttribIOffsetEXT, 7, uintptr(vaobj), uintptr(buffer), uintptr(index), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(offset), 0, 0)
}
func VertexArrayVertexAttribLFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
	syscall.Syscall6(gpVertexArrayVertexAttribLFormatEXT, 5, uintptr(vaobj), uintptr(attribindex), uintptr(size), uintptr(xtype), uintptr(relativeoffset), 0)
}
func VertexArrayVertexAttribLOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, stride int32, offset int) {
	syscall.Syscall9(gpVertexArrayVertexAttribLOffsetEXT, 7, uintptr(vaobj), uintptr(buffer), uintptr(index), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(offset), 0, 0)
}
func VertexArrayVertexAttribOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, normalized bool, stride int32, offset int) {
	syscall.Syscall9(gpVertexArrayVertexAttribOffsetEXT, 8, uintptr(vaobj), uintptr(buffer), uintptr(index), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(stride), uintptr(offset), 0)
}
func VertexArrayVertexBindingDivisorEXT(vaobj uint32, bindingindex uint32, divisor uint32) {
	syscall.Syscall(gpVertexArrayVertexBindingDivisorEXT, 3, uintptr(vaobj), uintptr(bindingindex), uintptr(divisor))
}

// bind a buffer to a vertex buffer bind point
func VertexArrayVertexBuffer(vaobj uint32, bindingindex uint32, buffer uint32, offset int, stride int32) {
	syscall.Syscall6(gpVertexArrayVertexBuffer, 5, uintptr(vaobj), uintptr(bindingindex), uintptr(buffer), uintptr(offset), uintptr(stride), 0)
}

// attach multiple buffer objects to a vertex array object
func VertexArrayVertexBuffers(vaobj uint32, first uint32, count int32, buffers *uint32, offsets *int, strides *int32) {
	syscall.Syscall6(gpVertexArrayVertexBuffers, 6, uintptr(vaobj), uintptr(first), uintptr(count), uintptr(unsafe.Pointer(buffers)), uintptr(unsafe.Pointer(offsets)), uintptr(unsafe.Pointer(strides)))
}
func VertexArrayVertexOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
	syscall.Syscall6(gpVertexArrayVertexOffsetEXT, 6, uintptr(vaobj), uintptr(buffer), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(offset))
}
func VertexAttrib1d(index uint32, x float64) {
	syscall.Syscall(gpVertexAttrib1d, 2, uintptr(index), uintptr(math.Float64bits(x)), 0)
}
func VertexAttrib1dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttrib1dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib1f(index uint32, x float32) {
	syscall.Syscall(gpVertexAttrib1f, 2, uintptr(index), uintptr(math.Float32bits(x)), 0)
}
func VertexAttrib1fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib1fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib1s(index uint32, x int16) {
	syscall.Syscall(gpVertexAttrib1s, 2, uintptr(index), uintptr(x), 0)
}
func VertexAttrib1sv(index uint32, v *int16) {
	syscall.Syscall(gpVertexAttrib1sv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib2d(index uint32, x float64, y float64) {
	syscall.Syscall(gpVertexAttrib2d, 3, uintptr(index), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)))
}
func VertexAttrib2dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttrib2dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib2f(index uint32, x float32, y float32) {
	syscall.Syscall(gpVertexAttrib2f, 3, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)))
}
func VertexAttrib2fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib2fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib2s(index uint32, x int16, y int16) {
	syscall.Syscall(gpVertexAttrib2s, 3, uintptr(index), uintptr(x), uintptr(y))
}
func VertexAttrib2sv(index uint32, v *int16) {
	syscall.Syscall(gpVertexAttrib2sv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib3d(index uint32, x float64, y float64, z float64) {
	syscall.Syscall6(gpVertexAttrib3d, 4, uintptr(index), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func VertexAttrib3dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttrib3dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib3f(index uint32, x float32, y float32, z float32) {
	syscall.Syscall6(gpVertexAttrib3f, 4, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), 0, 0)
}
func VertexAttrib3fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib3fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib3s(index uint32, x int16, y int16, z int16) {
	syscall.Syscall6(gpVertexAttrib3s, 4, uintptr(index), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func VertexAttrib3sv(index uint32, v *int16) {
	syscall.Syscall(gpVertexAttrib3sv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4Nbv(index uint32, v *int8) {
	syscall.Syscall(gpVertexAttrib4Nbv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4Niv(index uint32, v *int32) {
	syscall.Syscall(gpVertexAttrib4Niv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4Nsv(index uint32, v *int16) {
	syscall.Syscall(gpVertexAttrib4Nsv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8) {
	syscall.Syscall6(gpVertexAttrib4Nub, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttrib4Nubv(index uint32, v *uint8) {
	syscall.Syscall(gpVertexAttrib4Nubv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4Nuiv(index uint32, v *uint32) {
	syscall.Syscall(gpVertexAttrib4Nuiv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4Nusv(index uint32, v *uint16) {
	syscall.Syscall(gpVertexAttrib4Nusv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4bv(index uint32, v *int8) {
	syscall.Syscall(gpVertexAttrib4bv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64) {
	syscall.Syscall6(gpVertexAttrib4d, 5, uintptr(index), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), uintptr(math.Float64bits(w)), 0)
}
func VertexAttrib4dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttrib4dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32) {
	syscall.Syscall6(gpVertexAttrib4f, 5, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)), uintptr(math.Float32bits(w)), 0)
}
func VertexAttrib4fv(index uint32, v *float32) {
	syscall.Syscall(gpVertexAttrib4fv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4iv(index uint32, v *int32) {
	syscall.Syscall(gpVertexAttrib4iv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16) {
	syscall.Syscall6(gpVertexAttrib4s, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttrib4sv(index uint32, v *int16) {
	syscall.Syscall(gpVertexAttrib4sv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4ubv(index uint32, v *uint8) {
	syscall.Syscall(gpVertexAttrib4ubv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4uiv(index uint32, v *uint32) {
	syscall.Syscall(gpVertexAttrib4uiv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttrib4usv(index uint32, v *uint16) {
	syscall.Syscall(gpVertexAttrib4usv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}

// associate a vertex attribute and a vertex buffer binding for a vertex array object
func VertexAttribBinding(attribindex uint32, bindingindex uint32) {
	syscall.Syscall(gpVertexAttribBinding, 2, uintptr(attribindex), uintptr(bindingindex), 0)
}

// modify the rate at which generic vertex attributes advance during instanced rendering
func VertexAttribDivisor(index uint32, divisor uint32) {
	syscall.Syscall(gpVertexAttribDivisor, 2, uintptr(index), uintptr(divisor), 0)
}
func VertexAttribDivisorARB(index uint32, divisor uint32) {
	syscall.Syscall(gpVertexAttribDivisorARB, 2, uintptr(index), uintptr(divisor), 0)
}

// specify the organization of vertex arrays
func VertexAttribFormat(attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
	syscall.Syscall6(gpVertexAttribFormat, 5, uintptr(attribindex), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(relativeoffset), 0)
}
func VertexAttribFormatNV(index uint32, size int32, xtype uint32, normalized bool, stride int32) {
	syscall.Syscall6(gpVertexAttribFormatNV, 5, uintptr(index), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(stride), 0)
}
func VertexAttribI1i(index uint32, x int32) {
	syscall.Syscall(gpVertexAttribI1i, 2, uintptr(index), uintptr(x), 0)
}
func VertexAttribI1iv(index uint32, v *int32) {
	syscall.Syscall(gpVertexAttribI1iv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI1ui(index uint32, x uint32) {
	syscall.Syscall(gpVertexAttribI1ui, 2, uintptr(index), uintptr(x), 0)
}
func VertexAttribI1uiv(index uint32, v *uint32) {
	syscall.Syscall(gpVertexAttribI1uiv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI2i(index uint32, x int32, y int32) {
	syscall.Syscall(gpVertexAttribI2i, 3, uintptr(index), uintptr(x), uintptr(y))
}
func VertexAttribI2iv(index uint32, v *int32) {
	syscall.Syscall(gpVertexAttribI2iv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI2ui(index uint32, x uint32, y uint32) {
	syscall.Syscall(gpVertexAttribI2ui, 3, uintptr(index), uintptr(x), uintptr(y))
}
func VertexAttribI2uiv(index uint32, v *uint32) {
	syscall.Syscall(gpVertexAttribI2uiv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI3i(index uint32, x int32, y int32, z int32) {
	syscall.Syscall6(gpVertexAttribI3i, 4, uintptr(index), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func VertexAttribI3iv(index uint32, v *int32) {
	syscall.Syscall(gpVertexAttribI3iv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32) {
	syscall.Syscall6(gpVertexAttribI3ui, 4, uintptr(index), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func VertexAttribI3uiv(index uint32, v *uint32) {
	syscall.Syscall(gpVertexAttribI3uiv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI4bv(index uint32, v *int8) {
	syscall.Syscall(gpVertexAttribI4bv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32) {
	syscall.Syscall6(gpVertexAttribI4i, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttribI4iv(index uint32, v *int32) {
	syscall.Syscall(gpVertexAttribI4iv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI4sv(index uint32, v *int16) {
	syscall.Syscall(gpVertexAttribI4sv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI4ubv(index uint32, v *uint8) {
	syscall.Syscall(gpVertexAttribI4ubv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32) {
	syscall.Syscall6(gpVertexAttribI4ui, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttribI4uiv(index uint32, v *uint32) {
	syscall.Syscall(gpVertexAttribI4uiv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribI4usv(index uint32, v *uint16) {
	syscall.Syscall(gpVertexAttribI4usv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribIFormat(attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
	syscall.Syscall6(gpVertexAttribIFormat, 4, uintptr(attribindex), uintptr(size), uintptr(xtype), uintptr(relativeoffset), 0, 0)
}
func VertexAttribIFormatNV(index uint32, size int32, xtype uint32, stride int32) {
	syscall.Syscall6(gpVertexAttribIFormatNV, 4, uintptr(index), uintptr(size), uintptr(xtype), uintptr(stride), 0, 0)
}
func VertexAttribIPointer(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpVertexAttribIPointer, 5, uintptr(index), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0)
}
func VertexAttribL1d(index uint32, x float64) {
	syscall.Syscall(gpVertexAttribL1d, 2, uintptr(index), uintptr(math.Float64bits(x)), 0)
}
func VertexAttribL1dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttribL1dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL1i64NV(index uint32, x int64) {
	syscall.Syscall(gpVertexAttribL1i64NV, 2, uintptr(index), uintptr(x), 0)
}
func VertexAttribL1i64vNV(index uint32, v *int64) {
	syscall.Syscall(gpVertexAttribL1i64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL1ui64ARB(index uint32, x uint64) {
	syscall.Syscall(gpVertexAttribL1ui64ARB, 2, uintptr(index), uintptr(x), 0)
}
func VertexAttribL1ui64NV(index uint32, x uint64) {
	syscall.Syscall(gpVertexAttribL1ui64NV, 2, uintptr(index), uintptr(x), 0)
}
func VertexAttribL1ui64vARB(index uint32, v *uint64) {
	syscall.Syscall(gpVertexAttribL1ui64vARB, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL1ui64vNV(index uint32, v *uint64) {
	syscall.Syscall(gpVertexAttribL1ui64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL2d(index uint32, x float64, y float64) {
	syscall.Syscall(gpVertexAttribL2d, 3, uintptr(index), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)))
}
func VertexAttribL2dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttribL2dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL2i64NV(index uint32, x int64, y int64) {
	syscall.Syscall(gpVertexAttribL2i64NV, 3, uintptr(index), uintptr(x), uintptr(y))
}
func VertexAttribL2i64vNV(index uint32, v *int64) {
	syscall.Syscall(gpVertexAttribL2i64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL2ui64NV(index uint32, x uint64, y uint64) {
	syscall.Syscall(gpVertexAttribL2ui64NV, 3, uintptr(index), uintptr(x), uintptr(y))
}
func VertexAttribL2ui64vNV(index uint32, v *uint64) {
	syscall.Syscall(gpVertexAttribL2ui64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL3d(index uint32, x float64, y float64, z float64) {
	syscall.Syscall6(gpVertexAttribL3d, 4, uintptr(index), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), 0, 0)
}
func VertexAttribL3dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttribL3dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL3i64NV(index uint32, x int64, y int64, z int64) {
	syscall.Syscall6(gpVertexAttribL3i64NV, 4, uintptr(index), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func VertexAttribL3i64vNV(index uint32, v *int64) {
	syscall.Syscall(gpVertexAttribL3i64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL3ui64NV(index uint32, x uint64, y uint64, z uint64) {
	syscall.Syscall6(gpVertexAttribL3ui64NV, 4, uintptr(index), uintptr(x), uintptr(y), uintptr(z), 0, 0)
}
func VertexAttribL3ui64vNV(index uint32, v *uint64) {
	syscall.Syscall(gpVertexAttribL3ui64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64) {
	syscall.Syscall6(gpVertexAttribL4d, 5, uintptr(index), uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)), uintptr(math.Float64bits(w)), 0)
}
func VertexAttribL4dv(index uint32, v *float64) {
	syscall.Syscall(gpVertexAttribL4dv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL4i64NV(index uint32, x int64, y int64, z int64, w int64) {
	syscall.Syscall6(gpVertexAttribL4i64NV, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttribL4i64vNV(index uint32, v *int64) {
	syscall.Syscall(gpVertexAttribL4i64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribL4ui64NV(index uint32, x uint64, y uint64, z uint64, w uint64) {
	syscall.Syscall6(gpVertexAttribL4ui64NV, 5, uintptr(index), uintptr(x), uintptr(y), uintptr(z), uintptr(w), 0)
}
func VertexAttribL4ui64vNV(index uint32, v *uint64) {
	syscall.Syscall(gpVertexAttribL4ui64vNV, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func VertexAttribLFormat(attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
	syscall.Syscall6(gpVertexAttribLFormat, 4, uintptr(attribindex), uintptr(size), uintptr(xtype), uintptr(relativeoffset), 0, 0)
}
func VertexAttribLFormatNV(index uint32, size int32, xtype uint32, stride int32) {
	syscall.Syscall6(gpVertexAttribLFormatNV, 4, uintptr(index), uintptr(size), uintptr(xtype), uintptr(stride), 0, 0)
}
func VertexAttribLPointer(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpVertexAttribLPointer, 5, uintptr(index), uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0)
}
func VertexAttribP1ui(index uint32, xtype uint32, normalized bool, value uint32) {
	syscall.Syscall6(gpVertexAttribP1ui, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(value), 0, 0)
}
func VertexAttribP1uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
	syscall.Syscall6(gpVertexAttribP1uiv, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(unsafe.Pointer(value)), 0, 0)
}
func VertexAttribP2ui(index uint32, xtype uint32, normalized bool, value uint32) {
	syscall.Syscall6(gpVertexAttribP2ui, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(value), 0, 0)
}
func VertexAttribP2uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
	syscall.Syscall6(gpVertexAttribP2uiv, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(unsafe.Pointer(value)), 0, 0)
}
func VertexAttribP3ui(index uint32, xtype uint32, normalized bool, value uint32) {
	syscall.Syscall6(gpVertexAttribP3ui, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(value), 0, 0)
}
func VertexAttribP3uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
	syscall.Syscall6(gpVertexAttribP3uiv, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(unsafe.Pointer(value)), 0, 0)
}
func VertexAttribP4ui(index uint32, xtype uint32, normalized bool, value uint32) {
	syscall.Syscall6(gpVertexAttribP4ui, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(value), 0, 0)
}
func VertexAttribP4uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
	syscall.Syscall6(gpVertexAttribP4uiv, 4, uintptr(index), uintptr(xtype), boolToUintptr(normalized), uintptr(unsafe.Pointer(value)), 0, 0)
}

// define an array of generic vertex attribute data
func VertexAttribPointer(index uint32, size int32, xtype uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpVertexAttribPointer, 6, uintptr(index), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(stride), uintptr(pointer))
}
func VertexAttribPointerWithOffset(index uint32, size int32, xtype uint32, normalized bool, stride int32, offset uintptr) {
	syscall.Syscall6(gpVertexAttribPointer, 6, uintptr(index), uintptr(size), uintptr(xtype), boolToUintptr(normalized), uintptr(stride), uintptr(offset))
}

// modify the rate at which generic vertex attributes     advance
func VertexBindingDivisor(bindingindex uint32, divisor uint32) {
	syscall.Syscall(gpVertexBindingDivisor, 2, uintptr(bindingindex), uintptr(divisor), 0)
}
func VertexFormatNV(size int32, xtype uint32, stride int32) {
	syscall.Syscall(gpVertexFormatNV, 3, uintptr(size), uintptr(xtype), uintptr(stride))
}

// define an array of vertex data
func VertexPointer(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
	syscall.Syscall6(gpVertexPointer, 4, uintptr(size), uintptr(xtype), uintptr(stride), uintptr(pointer), 0, 0)
}

// set the viewport
func Viewport(x int32, y int32, width int32, height int32) {
	syscall.Syscall6(gpViewport, 4, uintptr(x), uintptr(y), uintptr(width), uintptr(height), 0, 0)
}
func ViewportArrayv(first uint32, count int32, v *float32) {
	syscall.Syscall(gpViewportArrayv, 3, uintptr(first), uintptr(count), uintptr(unsafe.Pointer(v)))
}
func ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32) {
	syscall.Syscall6(gpViewportIndexedf, 5, uintptr(index), uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(w)), uintptr(math.Float32bits(h)), 0)
}
func ViewportIndexedfv(index uint32, v *float32) {
	syscall.Syscall(gpViewportIndexedfv, 2, uintptr(index), uintptr(unsafe.Pointer(v)), 0)
}
func ViewportPositionWScaleNV(index uint32, xcoeff float32, ycoeff float32) {
	syscall.Syscall(gpViewportPositionWScaleNV, 3, uintptr(index), uintptr(math.Float32bits(xcoeff)), uintptr(math.Float32bits(ycoeff)))
}
func ViewportSwizzleNV(index uint32, swizzlex uint32, swizzley uint32, swizzlez uint32, swizzlew uint32) {
	syscall.Syscall6(gpViewportSwizzleNV, 5, uintptr(index), uintptr(swizzlex), uintptr(swizzley), uintptr(swizzlez), uintptr(swizzlew), 0)
}

// instruct the GL server to block until the specified sync object becomes signaled
func WaitSync(sync uintptr, flags uint32, timeout uint64) {
	syscall.Syscall(gpWaitSync, 3, uintptr(sync), uintptr(flags), uintptr(timeout))
}
func WaitVkSemaphoreNV(vkSemaphore uint64) {
	syscall.Syscall(gpWaitVkSemaphoreNV, 1, uintptr(vkSemaphore), 0, 0)
}
func WeightPathsNV(resultPath uint32, numPaths int32, paths *uint32, weights *float32) {
	syscall.Syscall6(gpWeightPathsNV, 4, uintptr(resultPath), uintptr(numPaths), uintptr(unsafe.Pointer(paths)), uintptr(unsafe.Pointer(weights)), 0, 0)
}
func WindowPos2d(x float64, y float64) {
	syscall.Syscall(gpWindowPos2d, 2, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), 0)
}
func WindowPos2dv(v *float64) {
	syscall.Syscall(gpWindowPos2dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowPos2f(x float32, y float32) {
	syscall.Syscall(gpWindowPos2f, 2, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), 0)
}
func WindowPos2fv(v *float32) {
	syscall.Syscall(gpWindowPos2fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowPos2i(x int32, y int32) {
	syscall.Syscall(gpWindowPos2i, 2, uintptr(x), uintptr(y), 0)
}
func WindowPos2iv(v *int32) {
	syscall.Syscall(gpWindowPos2iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowPos2s(x int16, y int16) {
	syscall.Syscall(gpWindowPos2s, 2, uintptr(x), uintptr(y), 0)
}
func WindowPos2sv(v *int16) {
	syscall.Syscall(gpWindowPos2sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowPos3d(x float64, y float64, z float64) {
	syscall.Syscall(gpWindowPos3d, 3, uintptr(math.Float64bits(x)), uintptr(math.Float64bits(y)), uintptr(math.Float64bits(z)))
}
func WindowPos3dv(v *float64) {
	syscall.Syscall(gpWindowPos3dv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowPos3f(x float32, y float32, z float32) {
	syscall.Syscall(gpWindowPos3f, 3, uintptr(math.Float32bits(x)), uintptr(math.Float32bits(y)), uintptr(math.Float32bits(z)))
}
func WindowPos3fv(v *float32) {
	syscall.Syscall(gpWindowPos3fv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowPos3i(x int32, y int32, z int32) {
	syscall.Syscall(gpWindowPos3i, 3, uintptr(x), uintptr(y), uintptr(z))
}
func WindowPos3iv(v *int32) {
	syscall.Syscall(gpWindowPos3iv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowPos3s(x int16, y int16, z int16) {
	syscall.Syscall(gpWindowPos3s, 3, uintptr(x), uintptr(y), uintptr(z))
}
func WindowPos3sv(v *int16) {
	syscall.Syscall(gpWindowPos3sv, 1, uintptr(unsafe.Pointer(v)), 0, 0)
}
func WindowRectanglesEXT(mode uint32, count int32, box *int32) {
	syscall.Syscall(gpWindowRectanglesEXT, 3, uintptr(mode), uintptr(count), uintptr(unsafe.Pointer(box)))
}

// InitWithProcAddrFunc intializes the package using the specified OpenGL
// function pointer loading function. For more cases Init should be used
// instead.
func InitWithProcAddrFunc(getProcAddr func(name string) unsafe.Pointer) error {
	gpAccum = uintptr(getProcAddr("glAccum"))
	gpActiveProgramEXT = uintptr(getProcAddr("glActiveProgramEXT"))
	gpActiveShaderProgram = uintptr(getProcAddr("glActiveShaderProgram"))
	gpActiveShaderProgramEXT = uintptr(getProcAddr("glActiveShaderProgramEXT"))
	gpActiveTexture = uintptr(getProcAddr("glActiveTexture"))
	gpAlphaFunc = uintptr(getProcAddr("glAlphaFunc"))
	gpApplyFramebufferAttachmentCMAAINTEL = uintptr(getProcAddr("glApplyFramebufferAttachmentCMAAINTEL"))
	gpAreTexturesResident = uintptr(getProcAddr("glAreTexturesResident"))
	gpArrayElement = uintptr(getProcAddr("glArrayElement"))
	gpAttachShader = uintptr(getProcAddr("glAttachShader"))
	gpBegin = uintptr(getProcAddr("glBegin"))
	gpBeginConditionalRender = uintptr(getProcAddr("glBeginConditionalRender"))
	gpBeginConditionalRenderNV = uintptr(getProcAddr("glBeginConditionalRenderNV"))
	gpBeginPerfMonitorAMD = uintptr(getProcAddr("glBeginPerfMonitorAMD"))
	gpBeginPerfQueryINTEL = uintptr(getProcAddr("glBeginPerfQueryINTEL"))
	gpBeginQuery = uintptr(getProcAddr("glBeginQuery"))
	gpBeginQueryIndexed = uintptr(getProcAddr("glBeginQueryIndexed"))
	gpBeginTransformFeedback = uintptr(getProcAddr("glBeginTransformFeedback"))
	gpBindAttribLocation = uintptr(getProcAddr("glBindAttribLocation"))
	gpBindBuffer = uintptr(getProcAddr("glBindBuffer"))
	gpBindBufferBase = uintptr(getProcAddr("glBindBufferBase"))
	gpBindBufferRange = uintptr(getProcAddr("glBindBufferRange"))
	gpBindBuffersBase = uintptr(getProcAddr("glBindBuffersBase"))
	gpBindBuffersRange = uintptr(getProcAddr("glBindBuffersRange"))
	gpBindFragDataLocation = uintptr(getProcAddr("glBindFragDataLocation"))
	gpBindFragDataLocationIndexed = uintptr(getProcAddr("glBindFragDataLocationIndexed"))
	gpBindFramebuffer = uintptr(getProcAddr("glBindFramebuffer"))
	gpBindImageTexture = uintptr(getProcAddr("glBindImageTexture"))
	gpBindImageTextures = uintptr(getProcAddr("glBindImageTextures"))
	gpBindMultiTextureEXT = uintptr(getProcAddr("glBindMultiTextureEXT"))
	gpBindProgramPipeline = uintptr(getProcAddr("glBindProgramPipeline"))
	gpBindProgramPipelineEXT = uintptr(getProcAddr("glBindProgramPipelineEXT"))
	gpBindRenderbuffer = uintptr(getProcAddr("glBindRenderbuffer"))
	gpBindSampler = uintptr(getProcAddr("glBindSampler"))
	gpBindSamplers = uintptr(getProcAddr("glBindSamplers"))
	gpBindShadingRateImageNV = uintptr(getProcAddr("glBindShadingRateImageNV"))
	gpBindTexture = uintptr(getProcAddr("glBindTexture"))
	gpBindTextureUnit = uintptr(getProcAddr("glBindTextureUnit"))
	gpBindTextures = uintptr(getProcAddr("glBindTextures"))
	gpBindTransformFeedback = uintptr(getProcAddr("glBindTransformFeedback"))
	gpBindVertexArray = uintptr(getProcAddr("glBindVertexArray"))
	gpBindVertexBuffer = uintptr(getProcAddr("glBindVertexBuffer"))
	gpBindVertexBuffers = uintptr(getProcAddr("glBindVertexBuffers"))
	gpBitmap = uintptr(getProcAddr("glBitmap"))
	gpBlendBarrierKHR = uintptr(getProcAddr("glBlendBarrierKHR"))
	gpBlendBarrierNV = uintptr(getProcAddr("glBlendBarrierNV"))
	gpBlendColor = uintptr(getProcAddr("glBlendColor"))
	gpBlendEquation = uintptr(getProcAddr("glBlendEquation"))
	gpBlendEquationSeparate = uintptr(getProcAddr("glBlendEquationSeparate"))
	gpBlendEquationSeparatei = uintptr(getProcAddr("glBlendEquationSeparatei"))
	gpBlendEquationSeparateiARB = uintptr(getProcAddr("glBlendEquationSeparateiARB"))
	gpBlendEquationi = uintptr(getProcAddr("glBlendEquationi"))
	gpBlendEquationiARB = uintptr(getProcAddr("glBlendEquationiARB"))
	gpBlendFunc = uintptr(getProcAddr("glBlendFunc"))
	gpBlendFuncSeparate = uintptr(getProcAddr("glBlendFuncSeparate"))
	gpBlendFuncSeparatei = uintptr(getProcAddr("glBlendFuncSeparatei"))
	gpBlendFuncSeparateiARB = uintptr(getProcAddr("glBlendFuncSeparateiARB"))
	gpBlendFunci = uintptr(getProcAddr("glBlendFunci"))
	gpBlendFunciARB = uintptr(getProcAddr("glBlendFunciARB"))
	gpBlendParameteriNV = uintptr(getProcAddr("glBlendParameteriNV"))
	gpBlitFramebuffer = uintptr(getProcAddr("glBlitFramebuffer"))
	gpBlitNamedFramebuffer = uintptr(getProcAddr("glBlitNamedFramebuffer"))
	gpBufferAddressRangeNV = uintptr(getProcAddr("glBufferAddressRangeNV"))
	gpBufferAttachMemoryNV = uintptr(getProcAddr("glBufferAttachMemoryNV"))
	gpBufferData = uintptr(getProcAddr("glBufferData"))
	gpBufferPageCommitmentARB = uintptr(getProcAddr("glBufferPageCommitmentARB"))
	gpBufferStorage = uintptr(getProcAddr("glBufferStorage"))
	gpBufferSubData = uintptr(getProcAddr("glBufferSubData"))
	gpCallCommandListNV = uintptr(getProcAddr("glCallCommandListNV"))
	gpCallList = uintptr(getProcAddr("glCallList"))
	gpCallLists = uintptr(getProcAddr("glCallLists"))
	gpCheckFramebufferStatus = uintptr(getProcAddr("glCheckFramebufferStatus"))
	gpCheckNamedFramebufferStatus = uintptr(getProcAddr("glCheckNamedFramebufferStatus"))
	gpCheckNamedFramebufferStatusEXT = uintptr(getProcAddr("glCheckNamedFramebufferStatusEXT"))
	gpClampColor = uintptr(getProcAddr("glClampColor"))
	gpClear = uintptr(getProcAddr("glClear"))
	gpClearAccum = uintptr(getProcAddr("glClearAccum"))
	gpClearBufferData = uintptr(getProcAddr("glClearBufferData"))
	gpClearBufferSubData = uintptr(getProcAddr("glClearBufferSubData"))
	gpClearBufferfi = uintptr(getProcAddr("glClearBufferfi"))
	gpClearBufferfv = uintptr(getProcAddr("glClearBufferfv"))
	gpClearBufferiv = uintptr(getProcAddr("glClearBufferiv"))
	gpClearBufferuiv = uintptr(getProcAddr("glClearBufferuiv"))
	gpClearColor = uintptr(getProcAddr("glClearColor"))
	gpClearDepth = uintptr(getProcAddr("glClearDepth"))
	gpClearDepthf = uintptr(getProcAddr("glClearDepthf"))
	gpClearIndex = uintptr(getProcAddr("glClearIndex"))
	gpClearNamedBufferData = uintptr(getProcAddr("glClearNamedBufferData"))
	gpClearNamedBufferDataEXT = uintptr(getProcAddr("glClearNamedBufferDataEXT"))
	gpClearNamedBufferSubData = uintptr(getProcAddr("glClearNamedBufferSubData"))
	gpClearNamedBufferSubDataEXT = uintptr(getProcAddr("glClearNamedBufferSubDataEXT"))
	gpClearNamedFramebufferfi = uintptr(getProcAddr("glClearNamedFramebufferfi"))
	gpClearNamedFramebufferfv = uintptr(getProcAddr("glClearNamedFramebufferfv"))
	gpClearNamedFramebufferiv = uintptr(getProcAddr("glClearNamedFramebufferiv"))
	gpClearNamedFramebufferuiv = uintptr(getProcAddr("glClearNamedFramebufferuiv"))
	gpClearStencil = uintptr(getProcAddr("glClearStencil"))
	gpClearTexImage = uintptr(getProcAddr("glClearTexImage"))
	gpClearTexSubImage = uintptr(getProcAddr("glClearTexSubImage"))
	gpClientActiveTexture = uintptr(getProcAddr("glClientActiveTexture"))
	gpClientAttribDefaultEXT = uintptr(getProcAddr("glClientAttribDefaultEXT"))
	gpClientWaitSync = uintptr(getProcAddr("glClientWaitSync"))
	gpClipControl = uintptr(getProcAddr("glClipControl"))
	gpClipPlane = uintptr(getProcAddr("glClipPlane"))
	gpColor3b = uintptr(getProcAddr("glColor3b"))
	gpColor3bv = uintptr(getProcAddr("glColor3bv"))
	gpColor3d = uintptr(getProcAddr("glColor3d"))
	gpColor3dv = uintptr(getProcAddr("glColor3dv"))
	gpColor3f = uintptr(getProcAddr("glColor3f"))
	gpColor3fv = uintptr(getProcAddr("glColor3fv"))
	gpColor3i = uintptr(getProcAddr("glColor3i"))
	gpColor3iv = uintptr(getProcAddr("glColor3iv"))
	gpColor3s = uintptr(getProcAddr("glColor3s"))
	gpColor3sv = uintptr(getProcAddr("glColor3sv"))
	gpColor3ub = uintptr(getProcAddr("glColor3ub"))
	gpColor3ubv = uintptr(getProcAddr("glColor3ubv"))
	gpColor3ui = uintptr(getProcAddr("glColor3ui"))
	gpColor3uiv = uintptr(getProcAddr("glColor3uiv"))
	gpColor3us = uintptr(getProcAddr("glColor3us"))
	gpColor3usv = uintptr(getProcAddr("glColor3usv"))
	gpColor4b = uintptr(getProcAddr("glColor4b"))
	gpColor4bv = uintptr(getProcAddr("glColor4bv"))
	gpColor4d = uintptr(getProcAddr("glColor4d"))
	gpColor4dv = uintptr(getProcAddr("glColor4dv"))
	gpColor4f = uintptr(getProcAddr("glColor4f"))
	gpColor4fv = uintptr(getProcAddr("glColor4fv"))
	gpColor4i = uintptr(getProcAddr("glColor4i"))
	gpColor4iv = uintptr(getProcAddr("glColor4iv"))
	gpColor4s = uintptr(getProcAddr("glColor4s"))
	gpColor4sv = uintptr(getProcAddr("glColor4sv"))
	gpColor4ub = uintptr(getProcAddr("glColor4ub"))
	gpColor4ubv = uintptr(getProcAddr("glColor4ubv"))
	gpColor4ui = uintptr(getProcAddr("glColor4ui"))
	gpColor4uiv = uintptr(getProcAddr("glColor4uiv"))
	gpColor4us = uintptr(getProcAddr("glColor4us"))
	gpColor4usv = uintptr(getProcAddr("glColor4usv"))
	gpColorFormatNV = uintptr(getProcAddr("glColorFormatNV"))
	gpColorMask = uintptr(getProcAddr("glColorMask"))
	gpColorMaski = uintptr(getProcAddr("glColorMaski"))
	gpColorMaterial = uintptr(getProcAddr("glColorMaterial"))
	gpColorPointer = uintptr(getProcAddr("glColorPointer"))
	gpCommandListSegmentsNV = uintptr(getProcAddr("glCommandListSegmentsNV"))
	gpCompileCommandListNV = uintptr(getProcAddr("glCompileCommandListNV"))
	gpCompileShader = uintptr(getProcAddr("glCompileShader"))
	gpCompileShaderIncludeARB = uintptr(getProcAddr("glCompileShaderIncludeARB"))
	gpCompressedMultiTexImage1DEXT = uintptr(getProcAddr("glCompressedMultiTexImage1DEXT"))
	gpCompressedMultiTexImage2DEXT = uintptr(getProcAddr("glCompressedMultiTexImage2DEXT"))
	gpCompressedMultiTexImage3DEXT = uintptr(getProcAddr("glCompressedMultiTexImage3DEXT"))
	gpCompressedMultiTexSubImage1DEXT = uintptr(getProcAddr("glCompressedMultiTexSubImage1DEXT"))
	gpCompressedMultiTexSubImage2DEXT = uintptr(getProcAddr("glCompressedMultiTexSubImage2DEXT"))
	gpCompressedMultiTexSubImage3DEXT = uintptr(getProcAddr("glCompressedMultiTexSubImage3DEXT"))
	gpCompressedTexImage1D = uintptr(getProcAddr("glCompressedTexImage1D"))
	gpCompressedTexImage2D = uintptr(getProcAddr("glCompressedTexImage2D"))
	gpCompressedTexImage3D = uintptr(getProcAddr("glCompressedTexImage3D"))
	gpCompressedTexSubImage1D = uintptr(getProcAddr("glCompressedTexSubImage1D"))
	gpCompressedTexSubImage2D = uintptr(getProcAddr("glCompressedTexSubImage2D"))
	gpCompressedTexSubImage3D = uintptr(getProcAddr("glCompressedTexSubImage3D"))
	gpCompressedTextureImage1DEXT = uintptr(getProcAddr("glCompressedTextureImage1DEXT"))
	gpCompressedTextureImage2DEXT = uintptr(getProcAddr("glCompressedTextureImage2DEXT"))
	gpCompressedTextureImage3DEXT = uintptr(getProcAddr("glCompressedTextureImage3DEXT"))
	gpCompressedTextureSubImage1D = uintptr(getProcAddr("glCompressedTextureSubImage1D"))
	gpCompressedTextureSubImage1DEXT = uintptr(getProcAddr("glCompressedTextureSubImage1DEXT"))
	gpCompressedTextureSubImage2D = uintptr(getProcAddr("glCompressedTextureSubImage2D"))
	gpCompressedTextureSubImage2DEXT = uintptr(getProcAddr("glCompressedTextureSubImage2DEXT"))
	gpCompressedTextureSubImage3D = uintptr(getProcAddr("glCompressedTextureSubImage3D"))
	gpCompressedTextureSubImage3DEXT = uintptr(getProcAddr("glCompressedTextureSubImage3DEXT"))
	gpConservativeRasterParameterfNV = uintptr(getProcAddr("glConservativeRasterParameterfNV"))
	gpConservativeRasterParameteriNV = uintptr(getProcAddr("glConservativeRasterParameteriNV"))
	gpCopyBufferSubData = uintptr(getProcAddr("glCopyBufferSubData"))
	gpCopyImageSubData = uintptr(getProcAddr("glCopyImageSubData"))
	gpCopyMultiTexImage1DEXT = uintptr(getProcAddr("glCopyMultiTexImage1DEXT"))
	gpCopyMultiTexImage2DEXT = uintptr(getProcAddr("glCopyMultiTexImage2DEXT"))
	gpCopyMultiTexSubImage1DEXT = uintptr(getProcAddr("glCopyMultiTexSubImage1DEXT"))
	gpCopyMultiTexSubImage2DEXT = uintptr(getProcAddr("glCopyMultiTexSubImage2DEXT"))
	gpCopyMultiTexSubImage3DEXT = uintptr(getProcAddr("glCopyMultiTexSubImage3DEXT"))
	gpCopyNamedBufferSubData = uintptr(getProcAddr("glCopyNamedBufferSubData"))
	gpCopyPathNV = uintptr(getProcAddr("glCopyPathNV"))
	gpCopyPixels = uintptr(getProcAddr("glCopyPixels"))
	gpCopyTexImage1D = uintptr(getProcAddr("glCopyTexImage1D"))
	gpCopyTexImage2D = uintptr(getProcAddr("glCopyTexImage2D"))
	gpCopyTexSubImage1D = uintptr(getProcAddr("glCopyTexSubImage1D"))
	gpCopyTexSubImage2D = uintptr(getProcAddr("glCopyTexSubImage2D"))
	gpCopyTexSubImage3D = uintptr(getProcAddr("glCopyTexSubImage3D"))
	gpCopyTextureImage1DEXT = uintptr(getProcAddr("glCopyTextureImage1DEXT"))
	gpCopyTextureImage2DEXT = uintptr(getProcAddr("glCopyTextureImage2DEXT"))
	gpCopyTextureSubImage1D = uintptr(getProcAddr("glCopyTextureSubImage1D"))
	gpCopyTextureSubImage1DEXT = uintptr(getProcAddr("glCopyTextureSubImage1DEXT"))
	gpCopyTextureSubImage2D = uintptr(getProcAddr("glCopyTextureSubImage2D"))
	gpCopyTextureSubImage2DEXT = uintptr(getProcAddr("glCopyTextureSubImage2DEXT"))
	gpCopyTextureSubImage3D = uintptr(getProcAddr("glCopyTextureSubImage3D"))
	gpCopyTextureSubImage3DEXT = uintptr(getProcAddr("glCopyTextureSubImage3DEXT"))
	gpCoverFillPathInstancedNV = uintptr(getProcAddr("glCoverFillPathInstancedNV"))
	gpCoverFillPathNV = uintptr(getProcAddr("glCoverFillPathNV"))
	gpCoverStrokePathInstancedNV = uintptr(getProcAddr("glCoverStrokePathInstancedNV"))
	gpCoverStrokePathNV = uintptr(getProcAddr("glCoverStrokePathNV"))
	gpCoverageModulationNV = uintptr(getProcAddr("glCoverageModulationNV"))
	gpCoverageModulationTableNV = uintptr(getProcAddr("glCoverageModulationTableNV"))
	gpCreateBuffers = uintptr(getProcAddr("glCreateBuffers"))
	gpCreateCommandListsNV = uintptr(getProcAddr("glCreateCommandListsNV"))
	gpCreateFramebuffers = uintptr(getProcAddr("glCreateFramebuffers"))
	gpCreatePerfQueryINTEL = uintptr(getProcAddr("glCreatePerfQueryINTEL"))
	gpCreateProgram = uintptr(getProcAddr("glCreateProgram"))
	gpCreateProgramPipelines = uintptr(getProcAddr("glCreateProgramPipelines"))
	gpCreateQueries = uintptr(getProcAddr("glCreateQueries"))
	gpCreateRenderbuffers = uintptr(getProcAddr("glCreateRenderbuffers"))
	gpCreateSamplers = uintptr(getProcAddr("glCreateSamplers"))
	gpCreateShader = uintptr(getProcAddr("glCreateShader"))
	gpCreateShaderProgramEXT = uintptr(getProcAddr("glCreateShaderProgramEXT"))
	gpCreateShaderProgramv = uintptr(getProcAddr("glCreateShaderProgramv"))
	gpCreateShaderProgramvEXT = uintptr(getProcAddr("glCreateShaderProgramvEXT"))
	gpCreateStatesNV = uintptr(getProcAddr("glCreateStatesNV"))
	gpCreateSyncFromCLeventARB = uintptr(getProcAddr("glCreateSyncFromCLeventARB"))
	gpCreateTextures = uintptr(getProcAddr("glCreateTextures"))
	gpCreateTransformFeedbacks = uintptr(getProcAddr("glCreateTransformFeedbacks"))
	gpCreateVertexArrays = uintptr(getProcAddr("glCreateVertexArrays"))
	gpCullFace = uintptr(getProcAddr("glCullFace"))
	gpDebugMessageCallback = uintptr(getProcAddr("glDebugMessageCallback"))
	gpDebugMessageCallbackARB = uintptr(getProcAddr("glDebugMessageCallbackARB"))
	gpDebugMessageCallbackKHR = uintptr(getProcAddr("glDebugMessageCallbackKHR"))
	gpDebugMessageControl = uintptr(getProcAddr("glDebugMessageControl"))
	gpDebugMessageControlARB = uintptr(getProcAddr("glDebugMessageControlARB"))
	gpDebugMessageControlKHR = uintptr(getProcAddr("glDebugMessageControlKHR"))
	gpDebugMessageInsert = uintptr(getProcAddr("glDebugMessageInsert"))
	gpDebugMessageInsertARB = uintptr(getProcAddr("glDebugMessageInsertARB"))
	gpDebugMessageInsertKHR = uintptr(getProcAddr("glDebugMessageInsertKHR"))
	gpDeleteBuffers = uintptr(getProcAddr("glDeleteBuffers"))
	gpDeleteCommandListsNV = uintptr(getProcAddr("glDeleteCommandListsNV"))
	gpDeleteFramebuffers = uintptr(getProcAddr("glDeleteFramebuffers"))
	gpDeleteLists = uintptr(getProcAddr("glDeleteLists"))
	gpDeleteNamedStringARB = uintptr(getProcAddr("glDeleteNamedStringARB"))
	gpDeletePathsNV = uintptr(getProcAddr("glDeletePathsNV"))
	gpDeletePerfMonitorsAMD = uintptr(getProcAddr("glDeletePerfMonitorsAMD"))
	gpDeletePerfQueryINTEL = uintptr(getProcAddr("glDeletePerfQueryINTEL"))
	gpDeleteProgram = uintptr(getProcAddr("glDeleteProgram"))
	gpDeleteProgramPipelines = uintptr(getProcAddr("glDeleteProgramPipelines"))
	gpDeleteProgramPipelinesEXT = uintptr(getProcAddr("glDeleteProgramPipelinesEXT"))
	gpDeleteQueries = uintptr(getProcAddr("glDeleteQueries"))
	gpDeleteRenderbuffers = uintptr(getProcAddr("glDeleteRenderbuffers"))
	gpDeleteSamplers = uintptr(getProcAddr("glDeleteSamplers"))
	gpDeleteShader = uintptr(getProcAddr("glDeleteShader"))
	gpDeleteStatesNV = uintptr(getProcAddr("glDeleteStatesNV"))
	gpDeleteSync = uintptr(getProcAddr("glDeleteSync"))
	gpDeleteTextures = uintptr(getProcAddr("glDeleteTextures"))
	gpDeleteTransformFeedbacks = uintptr(getProcAddr("glDeleteTransformFeedbacks"))
	gpDeleteVertexArrays = uintptr(getProcAddr("glDeleteVertexArrays"))
	gpDepthFunc = uintptr(getProcAddr("glDepthFunc"))
	gpDepthMask = uintptr(getProcAddr("glDepthMask"))
	gpDepthRange = uintptr(getProcAddr("glDepthRange"))
	gpDepthRangeArrayv = uintptr(getProcAddr("glDepthRangeArrayv"))
	gpDepthRangeIndexed = uintptr(getProcAddr("glDepthRangeIndexed"))
	gpDepthRangef = uintptr(getProcAddr("glDepthRangef"))
	gpDetachShader = uintptr(getProcAddr("glDetachShader"))
	gpDisable = uintptr(getProcAddr("glDisable"))
	gpDisableClientState = uintptr(getProcAddr("glDisableClientState"))
	gpDisableClientStateIndexedEXT = uintptr(getProcAddr("glDisableClientStateIndexedEXT"))
	gpDisableClientStateiEXT = uintptr(getProcAddr("glDisableClientStateiEXT"))
	gpDisableIndexedEXT = uintptr(getProcAddr("glDisableIndexedEXT"))
	gpDisableVertexArrayAttrib = uintptr(getProcAddr("glDisableVertexArrayAttrib"))
	gpDisableVertexArrayAttribEXT = uintptr(getProcAddr("glDisableVertexArrayAttribEXT"))
	gpDisableVertexArrayEXT = uintptr(getProcAddr("glDisableVertexArrayEXT"))
	gpDisableVertexAttribArray = uintptr(getProcAddr("glDisableVertexAttribArray"))
	gpDisablei = uintptr(getProcAddr("glDisablei"))
	gpDispatchCompute = uintptr(getProcAddr("glDispatchCompute"))
	gpDispatchComputeGroupSizeARB = uintptr(getProcAddr("glDispatchComputeGroupSizeARB"))
	gpDispatchComputeIndirect = uintptr(getProcAddr("glDispatchComputeIndirect"))
	gpDrawArrays = uintptr(getProcAddr("glDrawArrays"))
	gpDrawArraysIndirect = uintptr(getProcAddr("glDrawArraysIndirect"))
	gpDrawArraysInstanced = uintptr(getProcAddr("glDrawArraysInstanced"))
	gpDrawArraysInstancedARB = uintptr(getProcAddr("glDrawArraysInstancedARB"))
	gpDrawArraysInstancedBaseInstance = uintptr(getProcAddr("glDrawArraysInstancedBaseInstance"))
	gpDrawArraysInstancedEXT = uintptr(getProcAddr("glDrawArraysInstancedEXT"))
	gpDrawBuffer = uintptr(getProcAddr("glDrawBuffer"))
	gpDrawBuffers = uintptr(getProcAddr("glDrawBuffers"))
	gpDrawCommandsAddressNV = uintptr(getProcAddr("glDrawCommandsAddressNV"))
	gpDrawCommandsNV = uintptr(getProcAddr("glDrawCommandsNV"))
	gpDrawCommandsStatesAddressNV = uintptr(getProcAddr("glDrawCommandsStatesAddressNV"))
	gpDrawCommandsStatesNV = uintptr(getProcAddr("glDrawCommandsStatesNV"))
	gpDrawElements = uintptr(getProcAddr("glDrawElements"))
	gpDrawElementsBaseVertex = uintptr(getProcAddr("glDrawElementsBaseVertex"))
	gpDrawElementsIndirect = uintptr(getProcAddr("glDrawElementsIndirect"))
	gpDrawElementsInstanced = uintptr(getProcAddr("glDrawElementsInstanced"))
	gpDrawElementsInstancedARB = uintptr(getProcAddr("glDrawElementsInstancedARB"))
	gpDrawElementsInstancedBaseInstance = uintptr(getProcAddr("glDrawElementsInstancedBaseInstance"))
	gpDrawElementsInstancedBaseVertex = uintptr(getProcAddr("glDrawElementsInstancedBaseVertex"))
	gpDrawElementsInstancedBaseVertexBaseInstance = uintptr(getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance"))
	gpDrawElementsInstancedEXT = uintptr(getProcAddr("glDrawElementsInstancedEXT"))
	gpDrawMeshTasksIndirectNV = uintptr(getProcAddr("glDrawMeshTasksIndirectNV"))
	gpDrawMeshTasksNV = uintptr(getProcAddr("glDrawMeshTasksNV"))
	gpDrawPixels = uintptr(getProcAddr("glDrawPixels"))
	gpDrawRangeElements = uintptr(getProcAddr("glDrawRangeElements"))
	gpDrawRangeElementsBaseVertex = uintptr(getProcAddr("glDrawRangeElementsBaseVertex"))
	gpDrawTransformFeedback = uintptr(getProcAddr("glDrawTransformFeedback"))
	gpDrawTransformFeedbackInstanced = uintptr(getProcAddr("glDrawTransformFeedbackInstanced"))
	gpDrawTransformFeedbackStream = uintptr(getProcAddr("glDrawTransformFeedbackStream"))
	gpDrawTransformFeedbackStreamInstanced = uintptr(getProcAddr("glDrawTransformFeedbackStreamInstanced"))
	gpDrawVkImageNV = uintptr(getProcAddr("glDrawVkImageNV"))
	gpEGLImageTargetTexStorageEXT = uintptr(getProcAddr("glEGLImageTargetTexStorageEXT"))
	gpEGLImageTargetTextureStorageEXT = uintptr(getProcAddr("glEGLImageTargetTextureStorageEXT"))
	gpEdgeFlag = uintptr(getProcAddr("glEdgeFlag"))
	gpEdgeFlagFormatNV = uintptr(getProcAddr("glEdgeFlagFormatNV"))
	gpEdgeFlagPointer = uintptr(getProcAddr("glEdgeFlagPointer"))
	gpEdgeFlagv = uintptr(getProcAddr("glEdgeFlagv"))
	gpEnable = uintptr(getProcAddr("glEnable"))
	gpEnableClientState = uintptr(getProcAddr("glEnableClientState"))
	gpEnableClientStateIndexedEXT = uintptr(getProcAddr("glEnableClientStateIndexedEXT"))
	gpEnableClientStateiEXT = uintptr(getProcAddr("glEnableClientStateiEXT"))
	gpEnableIndexedEXT = uintptr(getProcAddr("glEnableIndexedEXT"))
	gpEnableVertexArrayAttrib = uintptr(getProcAddr("glEnableVertexArrayAttrib"))
	gpEnableVertexArrayAttribEXT = uintptr(getProcAddr("glEnableVertexArrayAttribEXT"))
	gpEnableVertexArrayEXT = uintptr(getProcAddr("glEnableVertexArrayEXT"))
	gpEnableVertexAttribArray = uintptr(getProcAddr("glEnableVertexAttribArray"))
	gpEnablei = uintptr(getProcAddr("glEnablei"))
	gpEnd = uintptr(getProcAddr("glEnd"))
	gpEndConditionalRender = uintptr(getProcAddr("glEndConditionalRender"))
	gpEndConditionalRenderNV = uintptr(getProcAddr("glEndConditionalRenderNV"))
	gpEndList = uintptr(getProcAddr("glEndList"))
	gpEndPerfMonitorAMD = uintptr(getProcAddr("glEndPerfMonitorAMD"))
	gpEndPerfQueryINTEL = uintptr(getProcAddr("glEndPerfQueryINTEL"))
	gpEndQuery = uintptr(getProcAddr("glEndQuery"))
	gpEndQueryIndexed = uintptr(getProcAddr("glEndQueryIndexed"))
	gpEndTransformFeedback = uintptr(getProcAddr("glEndTransformFeedback"))
	gpEvalCoord1d = uintptr(getProcAddr("glEvalCoord1d"))
	gpEvalCoord1dv = uintptr(getProcAddr("glEvalCoord1dv"))
	gpEvalCoord1f = uintptr(getProcAddr("glEvalCoord1f"))
	gpEvalCoord1fv = uintptr(getProcAddr("glEvalCoord1fv"))
	gpEvalCoord2d = uintptr(getProcAddr("glEvalCoord2d"))
	gpEvalCoord2dv = uintptr(getProcAddr("glEvalCoord2dv"))
	gpEvalCoord2f = uintptr(getProcAddr("glEvalCoord2f"))
	gpEvalCoord2fv = uintptr(getProcAddr("glEvalCoord2fv"))
	gpEvalMesh1 = uintptr(getProcAddr("glEvalMesh1"))
	gpEvalMesh2 = uintptr(getProcAddr("glEvalMesh2"))
	gpEvalPoint1 = uintptr(getProcAddr("glEvalPoint1"))
	gpEvalPoint2 = uintptr(getProcAddr("glEvalPoint2"))
	gpEvaluateDepthValuesARB = uintptr(getProcAddr("glEvaluateDepthValuesARB"))
	gpFeedbackBuffer = uintptr(getProcAddr("glFeedbackBuffer"))
	gpFenceSync = uintptr(getProcAddr("glFenceSync"))
	gpFinish = uintptr(getProcAddr("glFinish"))
	gpFlush = uintptr(getProcAddr("glFlush"))
	gpFlushMappedBufferRange = uintptr(getProcAddr("glFlushMappedBufferRange"))
	gpFlushMappedNamedBufferRange = uintptr(getProcAddr("glFlushMappedNamedBufferRange"))
	gpFlushMappedNamedBufferRangeEXT = uintptr(getProcAddr("glFlushMappedNamedBufferRangeEXT"))
	gpFogCoordFormatNV = uintptr(getProcAddr("glFogCoordFormatNV"))
	gpFogCoordPointer = uintptr(getProcAddr("glFogCoordPointer"))
	gpFogCoordd = uintptr(getProcAddr("glFogCoordd"))
	gpFogCoorddv = uintptr(getProcAddr("glFogCoorddv"))
	gpFogCoordf = uintptr(getProcAddr("glFogCoordf"))
	gpFogCoordfv = uintptr(getProcAddr("glFogCoordfv"))
	gpFogf = uintptr(getProcAddr("glFogf"))
	gpFogfv = uintptr(getProcAddr("glFogfv"))
	gpFogi = uintptr(getProcAddr("glFogi"))
	gpFogiv = uintptr(getProcAddr("glFogiv"))
	gpFragmentCoverageColorNV = uintptr(getProcAddr("glFragmentCoverageColorNV"))
	gpFramebufferDrawBufferEXT = uintptr(getProcAddr("glFramebufferDrawBufferEXT"))
	gpFramebufferDrawBuffersEXT = uintptr(getProcAddr("glFramebufferDrawBuffersEXT"))
	gpFramebufferFetchBarrierEXT = uintptr(getProcAddr("glFramebufferFetchBarrierEXT"))
	gpFramebufferParameteri = uintptr(getProcAddr("glFramebufferParameteri"))
	gpFramebufferReadBufferEXT = uintptr(getProcAddr("glFramebufferReadBufferEXT"))
	gpFramebufferRenderbuffer = uintptr(getProcAddr("glFramebufferRenderbuffer"))
	gpFramebufferSampleLocationsfvARB = uintptr(getProcAddr("glFramebufferSampleLocationsfvARB"))
	gpFramebufferSampleLocationsfvNV = uintptr(getProcAddr("glFramebufferSampleLocationsfvNV"))
	gpFramebufferTexture = uintptr(getProcAddr("glFramebufferTexture"))
	gpFramebufferTexture1D = uintptr(getProcAddr("glFramebufferTexture1D"))
	gpFramebufferTexture2D = uintptr(getProcAddr("glFramebufferTexture2D"))
	gpFramebufferTexture3D = uintptr(getProcAddr("glFramebufferTexture3D"))
	gpFramebufferTextureARB = uintptr(getProcAddr("glFramebufferTextureARB"))
	gpFramebufferTextureFaceARB = uintptr(getProcAddr("glFramebufferTextureFaceARB"))
	gpFramebufferTextureLayer = uintptr(getProcAddr("glFramebufferTextureLayer"))
	gpFramebufferTextureLayerARB = uintptr(getProcAddr("glFramebufferTextureLayerARB"))
	gpFramebufferTextureMultiviewOVR = uintptr(getProcAddr("glFramebufferTextureMultiviewOVR"))
	gpFrontFace = uintptr(getProcAddr("glFrontFace"))
	gpFrustum = uintptr(getProcAddr("glFrustum"))
	gpGenBuffers = uintptr(getProcAddr("glGenBuffers"))
	gpGenFramebuffers = uintptr(getProcAddr("glGenFramebuffers"))
	gpGenLists = uintptr(getProcAddr("glGenLists"))
	gpGenPathsNV = uintptr(getProcAddr("glGenPathsNV"))
	gpGenPerfMonitorsAMD = uintptr(getProcAddr("glGenPerfMonitorsAMD"))
	gpGenProgramPipelines = uintptr(getProcAddr("glGenProgramPipelines"))
	gpGenProgramPipelinesEXT = uintptr(getProcAddr("glGenProgramPipelinesEXT"))
	gpGenQueries = uintptr(getProcAddr("glGenQueries"))
	gpGenRenderbuffers = uintptr(getProcAddr("glGenRenderbuffers"))
	gpGenSamplers = uintptr(getProcAddr("glGenSamplers"))
	gpGenTextures = uintptr(getProcAddr("glGenTextures"))
	gpGenTransformFeedbacks = uintptr(getProcAddr("glGenTransformFeedbacks"))
	gpGenVertexArrays = uintptr(getProcAddr("glGenVertexArrays"))
	gpGenerateMipmap = uintptr(getProcAddr("glGenerateMipmap"))
	gpGenerateMultiTexMipmapEXT = uintptr(getProcAddr("glGenerateMultiTexMipmapEXT"))
	gpGenerateTextureMipmap = uintptr(getProcAddr("glGenerateTextureMipmap"))
	gpGenerateTextureMipmapEXT = uintptr(getProcAddr("glGenerateTextureMipmapEXT"))
	gpGetActiveAtomicCounterBufferiv = uintptr(getProcAddr("glGetActiveAtomicCounterBufferiv"))
	gpGetActiveAttrib = uintptr(getProcAddr("glGetActiveAttrib"))
	gpGetActiveSubroutineName = uintptr(getProcAddr("glGetActiveSubroutineName"))
	gpGetActiveSubroutineUniformName = uintptr(getProcAddr("glGetActiveSubroutineUniformName"))
	gpGetActiveSubroutineUniformiv = uintptr(getProcAddr("glGetActiveSubroutineUniformiv"))
	gpGetActiveUniform = uintptr(getProcAddr("glGetActiveUniform"))
	gpGetActiveUniformBlockName = uintptr(getProcAddr("glGetActiveUniformBlockName"))
	gpGetActiveUniformBlockiv = uintptr(getProcAddr("glGetActiveUniformBlockiv"))
	gpGetActiveUniformName = uintptr(getProcAddr("glGetActiveUniformName"))
	gpGetActiveUniformsiv = uintptr(getProcAddr("glGetActiveUniformsiv"))
	gpGetAttachedShaders = uintptr(getProcAddr("glGetAttachedShaders"))
	gpGetAttribLocation = uintptr(getProcAddr("glGetAttribLocation"))
	gpGetBooleanIndexedvEXT = uintptr(getProcAddr("glGetBooleanIndexedvEXT"))
	gpGetBooleani_v = uintptr(getProcAddr("glGetBooleani_v"))
	gpGetBooleanv = uintptr(getProcAddr("glGetBooleanv"))
	gpGetBufferParameteri64v = uintptr(getProcAddr("glGetBufferParameteri64v"))
	gpGetBufferParameteriv = uintptr(getProcAddr("glGetBufferParameteriv"))
	gpGetBufferParameterui64vNV = uintptr(getProcAddr("glGetBufferParameterui64vNV"))
	gpGetBufferPointerv = uintptr(getProcAddr("glGetBufferPointerv"))
	gpGetBufferSubData = uintptr(getProcAddr("glGetBufferSubData"))
	gpGetClipPlane = uintptr(getProcAddr("glGetClipPlane"))
	gpGetCommandHeaderNV = uintptr(getProcAddr("glGetCommandHeaderNV"))
	gpGetCompressedMultiTexImageEXT = uintptr(getProcAddr("glGetCompressedMultiTexImageEXT"))
	gpGetCompressedTexImage = uintptr(getProcAddr("glGetCompressedTexImage"))
	gpGetCompressedTextureImage = uintptr(getProcAddr("glGetCompressedTextureImage"))
	gpGetCompressedTextureImageEXT = uintptr(getProcAddr("glGetCompressedTextureImageEXT"))
	gpGetCompressedTextureSubImage = uintptr(getProcAddr("glGetCompressedTextureSubImage"))
	gpGetCoverageModulationTableNV = uintptr(getProcAddr("glGetCoverageModulationTableNV"))
	gpGetDebugMessageLog = uintptr(getProcAddr("glGetDebugMessageLog"))
	gpGetDebugMessageLogARB = uintptr(getProcAddr("glGetDebugMessageLogARB"))
	gpGetDebugMessageLogKHR = uintptr(getProcAddr("glGetDebugMessageLogKHR"))
	gpGetDoubleIndexedvEXT = uintptr(getProcAddr("glGetDoubleIndexedvEXT"))
	gpGetDoublei_v = uintptr(getProcAddr("glGetDoublei_v"))
	gpGetDoublei_vEXT = uintptr(getProcAddr("glGetDoublei_vEXT"))
	gpGetDoublev = uintptr(getProcAddr("glGetDoublev"))
	gpGetError = uintptr(getProcAddr("glGetError"))
	gpGetFirstPerfQueryIdINTEL = uintptr(getProcAddr("glGetFirstPerfQueryIdINTEL"))
	gpGetFloatIndexedvEXT = uintptr(getProcAddr("glGetFloatIndexedvEXT"))
	gpGetFloati_v = uintptr(getProcAddr("glGetFloati_v"))
	gpGetFloati_vEXT = uintptr(getProcAddr("glGetFloati_vEXT"))
	gpGetFloatv = uintptr(getProcAddr("glGetFloatv"))
	gpGetFragDataIndex = uintptr(getProcAddr("glGetFragDataIndex"))
	gpGetFragDataLocation = uintptr(getProcAddr("glGetFragDataLocation"))
	gpGetFramebufferAttachmentParameteriv = uintptr(getProcAddr("glGetFramebufferAttachmentParameteriv"))
	gpGetFramebufferParameteriv = uintptr(getProcAddr("glGetFramebufferParameteriv"))
	gpGetFramebufferParameterivEXT = uintptr(getProcAddr("glGetFramebufferParameterivEXT"))
	gpGetGraphicsResetStatus = uintptr(getProcAddr("glGetGraphicsResetStatus"))
	gpGetGraphicsResetStatusARB = uintptr(getProcAddr("glGetGraphicsResetStatusARB"))
	gpGetGraphicsResetStatusKHR = uintptr(getProcAddr("glGetGraphicsResetStatusKHR"))
	gpGetImageHandleARB = uintptr(getProcAddr("glGetImageHandleARB"))
	gpGetImageHandleNV = uintptr(getProcAddr("glGetImageHandleNV"))
	gpGetInteger64i_v = uintptr(getProcAddr("glGetInteger64i_v"))
	gpGetInteger64v = uintptr(getProcAddr("glGetInteger64v"))
	gpGetIntegerIndexedvEXT = uintptr(getProcAddr("glGetIntegerIndexedvEXT"))
	gpGetIntegeri_v = uintptr(getProcAddr("glGetIntegeri_v"))
	gpGetIntegerui64i_vNV = uintptr(getProcAddr("glGetIntegerui64i_vNV"))
	gpGetIntegerui64vNV = uintptr(getProcAddr("glGetIntegerui64vNV"))
	gpGetIntegerv = uintptr(getProcAddr("glGetIntegerv"))
	gpGetInternalformatSampleivNV = uintptr(getProcAddr("glGetInternalformatSampleivNV"))
	gpGetInternalformati64v = uintptr(getProcAddr("glGetInternalformati64v"))
	gpGetInternalformativ = uintptr(getProcAddr("glGetInternalformativ"))
	gpGetLightfv = uintptr(getProcAddr("glGetLightfv"))
	gpGetLightiv = uintptr(getProcAddr("glGetLightiv"))
	gpGetMapdv = uintptr(getProcAddr("glGetMapdv"))
	gpGetMapfv = uintptr(getProcAddr("glGetMapfv"))
	gpGetMapiv = uintptr(getProcAddr("glGetMapiv"))
	gpGetMaterialfv = uintptr(getProcAddr("glGetMaterialfv"))
	gpGetMaterialiv = uintptr(getProcAddr("glGetMaterialiv"))
	gpGetMemoryObjectDetachedResourcesuivNV = uintptr(getProcAddr("glGetMemoryObjectDetachedResourcesuivNV"))
	gpGetMultiTexEnvfvEXT = uintptr(getProcAddr("glGetMultiTexEnvfvEXT"))
	gpGetMultiTexEnvivEXT = uintptr(getProcAddr("glGetMultiTexEnvivEXT"))
	gpGetMultiTexGendvEXT = uintptr(getProcAddr("glGetMultiTexGendvEXT"))
	gpGetMultiTexGenfvEXT = uintptr(getProcAddr("glGetMultiTexGenfvEXT"))
	gpGetMultiTexGenivEXT = uintptr(getProcAddr("glGetMultiTexGenivEXT"))
	gpGetMultiTexImageEXT = uintptr(getProcAddr("glGetMultiTexImageEXT"))
	gpGetMultiTexLevelParameterfvEXT = uintptr(getProcAddr("glGetMultiTexLevelParameterfvEXT"))
	gpGetMultiTexLevelParameterivEXT = uintptr(getProcAddr("glGetMultiTexLevelParameterivEXT"))
	gpGetMultiTexParameterIivEXT = uintptr(getProcAddr("glGetMultiTexParameterIivEXT"))
	gpGetMultiTexParameterIuivEXT = uintptr(getProcAddr("glGetMultiTexParameterIuivEXT"))
	gpGetMultiTexParameterfvEXT = uintptr(getProcAddr("glGetMultiTexParameterfvEXT"))
	gpGetMultiTexParameterivEXT = uintptr(getProcAddr("glGetMultiTexParameterivEXT"))
	gpGetMultisamplefv = uintptr(getProcAddr("glGetMultisamplefv"))
	gpGetNamedBufferParameteri64v = uintptr(getProcAddr("glGetNamedBufferParameteri64v"))
	gpGetNamedBufferParameteriv = uintptr(getProcAddr("glGetNamedBufferParameteriv"))
	gpGetNamedBufferParameterivEXT = uintptr(getProcAddr("glGetNamedBufferParameterivEXT"))
	gpGetNamedBufferParameterui64vNV = uintptr(getProcAddr("glGetNamedBufferParameterui64vNV"))
	gpGetNamedBufferPointerv = uintptr(getProcAddr("glGetNamedBufferPointerv"))
	gpGetNamedBufferPointervEXT = uintptr(getProcAddr("glGetNamedBufferPointervEXT"))
	gpGetNamedBufferSubData = uintptr(getProcAddr("glGetNamedBufferSubData"))
	gpGetNamedBufferSubDataEXT = uintptr(getProcAddr("glGetNamedBufferSubDataEXT"))
	gpGetNamedFramebufferAttachmentParameteriv = uintptr(getProcAddr("glGetNamedFramebufferAttachmentParameteriv"))
	gpGetNamedFramebufferAttachmentParameterivEXT = uintptr(getProcAddr("glGetNamedFramebufferAttachmentParameterivEXT"))
	gpGetNamedFramebufferParameteriv = uintptr(getProcAddr("glGetNamedFramebufferParameteriv"))
	gpGetNamedFramebufferParameterivEXT = uintptr(getProcAddr("glGetNamedFramebufferParameterivEXT"))
	gpGetNamedProgramLocalParameterIivEXT = uintptr(getProcAddr("glGetNamedProgramLocalParameterIivEXT"))
	gpGetNamedProgramLocalParameterIuivEXT = uintptr(getProcAddr("glGetNamedProgramLocalParameterIuivEXT"))
	gpGetNamedProgramLocalParameterdvEXT = uintptr(getProcAddr("glGetNamedProgramLocalParameterdvEXT"))
	gpGetNamedProgramLocalParameterfvEXT = uintptr(getProcAddr("glGetNamedProgramLocalParameterfvEXT"))
	gpGetNamedProgramStringEXT = uintptr(getProcAddr("glGetNamedProgramStringEXT"))
	gpGetNamedProgramivEXT = uintptr(getProcAddr("glGetNamedProgramivEXT"))
	gpGetNamedRenderbufferParameteriv = uintptr(getProcAddr("glGetNamedRenderbufferParameteriv"))
	gpGetNamedRenderbufferParameterivEXT = uintptr(getProcAddr("glGetNamedRenderbufferParameterivEXT"))
	gpGetNamedStringARB = uintptr(getProcAddr("glGetNamedStringARB"))
	gpGetNamedStringivARB = uintptr(getProcAddr("glGetNamedStringivARB"))
	gpGetNextPerfQueryIdINTEL = uintptr(getProcAddr("glGetNextPerfQueryIdINTEL"))
	gpGetObjectLabel = uintptr(getProcAddr("glGetObjectLabel"))
	gpGetObjectLabelEXT = uintptr(getProcAddr("glGetObjectLabelEXT"))
	gpGetObjectLabelKHR = uintptr(getProcAddr("glGetObjectLabelKHR"))
	gpGetObjectPtrLabel = uintptr(getProcAddr("glGetObjectPtrLabel"))
	gpGetObjectPtrLabelKHR = uintptr(getProcAddr("glGetObjectPtrLabelKHR"))
	gpGetPathCommandsNV = uintptr(getProcAddr("glGetPathCommandsNV"))
	gpGetPathCoordsNV = uintptr(getProcAddr("glGetPathCoordsNV"))
	gpGetPathDashArrayNV = uintptr(getProcAddr("glGetPathDashArrayNV"))
	gpGetPathLengthNV = uintptr(getProcAddr("glGetPathLengthNV"))
	gpGetPathMetricRangeNV = uintptr(getProcAddr("glGetPathMetricRangeNV"))
	gpGetPathMetricsNV = uintptr(getProcAddr("glGetPathMetricsNV"))
	gpGetPathParameterfvNV = uintptr(getProcAddr("glGetPathParameterfvNV"))
	gpGetPathParameterivNV = uintptr(getProcAddr("glGetPathParameterivNV"))
	gpGetPathSpacingNV = uintptr(getProcAddr("glGetPathSpacingNV"))
	gpGetPerfCounterInfoINTEL = uintptr(getProcAddr("glGetPerfCounterInfoINTEL"))
	gpGetPerfMonitorCounterDataAMD = uintptr(getProcAddr("glGetPerfMonitorCounterDataAMD"))
	gpGetPerfMonitorCounterInfoAMD = uintptr(getProcAddr("glGetPerfMonitorCounterInfoAMD"))
	gpGetPerfMonitorCounterStringAMD = uintptr(getProcAddr("glGetPerfMonitorCounterStringAMD"))
	gpGetPerfMonitorCountersAMD = uintptr(getProcAddr("glGetPerfMonitorCountersAMD"))
	gpGetPerfMonitorGroupStringAMD = uintptr(getProcAddr("glGetPerfMonitorGroupStringAMD"))
	gpGetPerfMonitorGroupsAMD = uintptr(getProcAddr("glGetPerfMonitorGroupsAMD"))
	gpGetPerfQueryDataINTEL = uintptr(getProcAddr("glGetPerfQueryDataINTEL"))
	gpGetPerfQueryIdByNameINTEL = uintptr(getProcAddr("glGetPerfQueryIdByNameINTEL"))
	gpGetPerfQueryInfoINTEL = uintptr(getProcAddr("glGetPerfQueryInfoINTEL"))
	gpGetPixelMapfv = uintptr(getProcAddr("glGetPixelMapfv"))
	gpGetPixelMapuiv = uintptr(getProcAddr("glGetPixelMapuiv"))
	gpGetPixelMapusv = uintptr(getProcAddr("glGetPixelMapusv"))
	gpGetPointerIndexedvEXT = uintptr(getProcAddr("glGetPointerIndexedvEXT"))
	gpGetPointeri_vEXT = uintptr(getProcAddr("glGetPointeri_vEXT"))
	gpGetPointerv = uintptr(getProcAddr("glGetPointerv"))
	gpGetPointervKHR = uintptr(getProcAddr("glGetPointervKHR"))
	gpGetPolygonStipple = uintptr(getProcAddr("glGetPolygonStipple"))
	gpGetProgramBinary = uintptr(getProcAddr("glGetProgramBinary"))
	gpGetProgramInfoLog = uintptr(getProcAddr("glGetProgramInfoLog"))
	gpGetProgramInterfaceiv = uintptr(getProcAddr("glGetProgramInterfaceiv"))
	gpGetProgramPipelineInfoLog = uintptr(getProcAddr("glGetProgramPipelineInfoLog"))
	gpGetProgramPipelineInfoLogEXT = uintptr(getProcAddr("glGetProgramPipelineInfoLogEXT"))
	gpGetProgramPipelineiv = uintptr(getProcAddr("glGetProgramPipelineiv"))
	gpGetProgramPipelineivEXT = uintptr(getProcAddr("glGetProgramPipelineivEXT"))
	gpGetProgramResourceIndex = uintptr(getProcAddr("glGetProgramResourceIndex"))
	gpGetProgramResourceLocation = uintptr(getProcAddr("glGetProgramResourceLocation"))
	gpGetProgramResourceLocationIndex = uintptr(getProcAddr("glGetProgramResourceLocationIndex"))
	gpGetProgramResourceName = uintptr(getProcAddr("glGetProgramResourceName"))
	gpGetProgramResourcefvNV = uintptr(getProcAddr("glGetProgramResourcefvNV"))
	gpGetProgramResourceiv = uintptr(getProcAddr("glGetProgramResourceiv"))
	gpGetProgramStageiv = uintptr(getProcAddr("glGetProgramStageiv"))
	gpGetProgramiv = uintptr(getProcAddr("glGetProgramiv"))
	gpGetQueryBufferObjecti64v = uintptr(getProcAddr("glGetQueryBufferObjecti64v"))
	gpGetQueryBufferObjectiv = uintptr(getProcAddr("glGetQueryBufferObjectiv"))
	gpGetQueryBufferObjectui64v = uintptr(getProcAddr("glGetQueryBufferObjectui64v"))
	gpGetQueryBufferObjectuiv = uintptr(getProcAddr("glGetQueryBufferObjectuiv"))
	gpGetQueryIndexediv = uintptr(getProcAddr("glGetQueryIndexediv"))
	gpGetQueryObjecti64v = uintptr(getProcAddr("glGetQueryObjecti64v"))
	gpGetQueryObjectiv = uintptr(getProcAddr("glGetQueryObjectiv"))
	gpGetQueryObjectui64v = uintptr(getProcAddr("glGetQueryObjectui64v"))
	gpGetQueryObjectuiv = uintptr(getProcAddr("glGetQueryObjectuiv"))
	gpGetQueryiv = uintptr(getProcAddr("glGetQueryiv"))
	gpGetRenderbufferParameteriv = uintptr(getProcAddr("glGetRenderbufferParameteriv"))
	gpGetSamplerParameterIiv = uintptr(getProcAddr("glGetSamplerParameterIiv"))
	gpGetSamplerParameterIuiv = uintptr(getProcAddr("glGetSamplerParameterIuiv"))
	gpGetSamplerParameterfv = uintptr(getProcAddr("glGetSamplerParameterfv"))
	gpGetSamplerParameteriv = uintptr(getProcAddr("glGetSamplerParameteriv"))
	gpGetShaderInfoLog = uintptr(getProcAddr("glGetShaderInfoLog"))
	gpGetShaderPrecisionFormat = uintptr(getProcAddr("glGetShaderPrecisionFormat"))
	gpGetShaderSource = uintptr(getProcAddr("glGetShaderSource"))
	gpGetShaderiv = uintptr(getProcAddr("glGetShaderiv"))
	gpGetShadingRateImagePaletteNV = uintptr(getProcAddr("glGetShadingRateImagePaletteNV"))
	gpGetShadingRateSampleLocationivNV = uintptr(getProcAddr("glGetShadingRateSampleLocationivNV"))
	gpGetStageIndexNV = uintptr(getProcAddr("glGetStageIndexNV"))
	gpGetString = uintptr(getProcAddr("glGetString"))
	gpGetStringi = uintptr(getProcAddr("glGetStringi"))
	gpGetSubroutineIndex = uintptr(getProcAddr("glGetSubroutineIndex"))
	gpGetSubroutineUniformLocation = uintptr(getProcAddr("glGetSubroutineUniformLocation"))
	gpGetSynciv = uintptr(getProcAddr("glGetSynciv"))
	gpGetTexEnvfv = uintptr(getProcAddr("glGetTexEnvfv"))
	gpGetTexEnviv = uintptr(getProcAddr("glGetTexEnviv"))
	gpGetTexGendv = uintptr(getProcAddr("glGetTexGendv"))
	gpGetTexGenfv = uintptr(getProcAddr("glGetTexGenfv"))
	gpGetTexGeniv = uintptr(getProcAddr("glGetTexGeniv"))
	gpGetTexImage = uintptr(getProcAddr("glGetTexImage"))
	gpGetTexLevelParameterfv = uintptr(getProcAddr("glGetTexLevelParameterfv"))
	gpGetTexLevelParameteriv = uintptr(getProcAddr("glGetTexLevelParameteriv"))
	gpGetTexParameterIiv = uintptr(getProcAddr("glGetTexParameterIiv"))
	gpGetTexParameterIuiv = uintptr(getProcAddr("glGetTexParameterIuiv"))
	gpGetTexParameterfv = uintptr(getProcAddr("glGetTexParameterfv"))
	gpGetTexParameteriv = uintptr(getProcAddr("glGetTexParameteriv"))
	gpGetTextureHandleARB = uintptr(getProcAddr("glGetTextureHandleARB"))
	gpGetTextureHandleNV = uintptr(getProcAddr("glGetTextureHandleNV"))
	gpGetTextureImage = uintptr(getProcAddr("glGetTextureImage"))
	gpGetTextureImageEXT = uintptr(getProcAddr("glGetTextureImageEXT"))
	gpGetTextureLevelParameterfv = uintptr(getProcAddr("glGetTextureLevelParameterfv"))
	gpGetTextureLevelParameterfvEXT = uintptr(getProcAddr("glGetTextureLevelParameterfvEXT"))
	gpGetTextureLevelParameteriv = uintptr(getProcAddr("glGetTextureLevelParameteriv"))
	gpGetTextureLevelParameterivEXT = uintptr(getProcAddr("glGetTextureLevelParameterivEXT"))
	gpGetTextureParameterIiv = uintptr(getProcAddr("glGetTextureParameterIiv"))
	gpGetTextureParameterIivEXT = uintptr(getProcAddr("glGetTextureParameterIivEXT"))
	gpGetTextureParameterIuiv = uintptr(getProcAddr("glGetTextureParameterIuiv"))
	gpGetTextureParameterIuivEXT = uintptr(getProcAddr("glGetTextureParameterIuivEXT"))
	gpGetTextureParameterfv = uintptr(getProcAddr("glGetTextureParameterfv"))
	gpGetTextureParameterfvEXT = uintptr(getProcAddr("glGetTextureParameterfvEXT"))
	gpGetTextureParameteriv = uintptr(getProcAddr("glGetTextureParameteriv"))
	gpGetTextureParameterivEXT = uintptr(getProcAddr("glGetTextureParameterivEXT"))
	gpGetTextureSamplerHandleARB = uintptr(getProcAddr("glGetTextureSamplerHandleARB"))
	gpGetTextureSamplerHandleNV = uintptr(getProcAddr("glGetTextureSamplerHandleNV"))
	gpGetTextureSubImage = uintptr(getProcAddr("glGetTextureSubImage"))
	gpGetTransformFeedbackVarying = uintptr(getProcAddr("glGetTransformFeedbackVarying"))
	gpGetTransformFeedbacki64_v = uintptr(getProcAddr("glGetTransformFeedbacki64_v"))
	gpGetTransformFeedbacki_v = uintptr(getProcAddr("glGetTransformFeedbacki_v"))
	gpGetTransformFeedbackiv = uintptr(getProcAddr("glGetTransformFeedbackiv"))
	gpGetUniformBlockIndex = uintptr(getProcAddr("glGetUniformBlockIndex"))
	gpGetUniformIndices = uintptr(getProcAddr("glGetUniformIndices"))
	gpGetUniformLocation = uintptr(getProcAddr("glGetUniformLocation"))
	gpGetUniformSubroutineuiv = uintptr(getProcAddr("glGetUniformSubroutineuiv"))
	gpGetUniformdv = uintptr(getProcAddr("glGetUniformdv"))
	gpGetUniformfv = uintptr(getProcAddr("glGetUniformfv"))
	gpGetUniformi64vARB = uintptr(getProcAddr("glGetUniformi64vARB"))
	gpGetUniformi64vNV = uintptr(getProcAddr("glGetUniformi64vNV"))
	gpGetUniformiv = uintptr(getProcAddr("glGetUniformiv"))
	gpGetUniformui64vARB = uintptr(getProcAddr("glGetUniformui64vARB"))
	gpGetUniformui64vNV = uintptr(getProcAddr("glGetUniformui64vNV"))
	gpGetUniformuiv = uintptr(getProcAddr("glGetUniformuiv"))
	gpGetVertexArrayIndexed64iv = uintptr(getProcAddr("glGetVertexArrayIndexed64iv"))
	gpGetVertexArrayIndexediv = uintptr(getProcAddr("glGetVertexArrayIndexediv"))
	gpGetVertexArrayIntegeri_vEXT = uintptr(getProcAddr("glGetVertexArrayIntegeri_vEXT"))
	gpGetVertexArrayIntegervEXT = uintptr(getProcAddr("glGetVertexArrayIntegervEXT"))
	gpGetVertexArrayPointeri_vEXT = uintptr(getProcAddr("glGetVertexArrayPointeri_vEXT"))
	gpGetVertexArrayPointervEXT = uintptr(getProcAddr("glGetVertexArrayPointervEXT"))
	gpGetVertexArrayiv = uintptr(getProcAddr("glGetVertexArrayiv"))
	gpGetVertexAttribIiv = uintptr(getProcAddr("glGetVertexAttribIiv"))
	gpGetVertexAttribIuiv = uintptr(getProcAddr("glGetVertexAttribIuiv"))
	gpGetVertexAttribLdv = uintptr(getProcAddr("glGetVertexAttribLdv"))
	gpGetVertexAttribLi64vNV = uintptr(getProcAddr("glGetVertexAttribLi64vNV"))
	gpGetVertexAttribLui64vARB = uintptr(getProcAddr("glGetVertexAttribLui64vARB"))
	gpGetVertexAttribLui64vNV = uintptr(getProcAddr("glGetVertexAttribLui64vNV"))
	gpGetVertexAttribPointerv = uintptr(getProcAddr("glGetVertexAttribPointerv"))
	gpGetVertexAttribdv = uintptr(getProcAddr("glGetVertexAttribdv"))
	gpGetVertexAttribfv = uintptr(getProcAddr("glGetVertexAttribfv"))
	gpGetVertexAttribiv = uintptr(getProcAddr("glGetVertexAttribiv"))
	gpGetVkProcAddrNV = uintptr(getProcAddr("glGetVkProcAddrNV"))
	gpGetnCompressedTexImage = uintptr(getProcAddr("glGetnCompressedTexImage"))
	gpGetnCompressedTexImageARB = uintptr(getProcAddr("glGetnCompressedTexImageARB"))
	gpGetnTexImage = uintptr(getProcAddr("glGetnTexImage"))
	gpGetnTexImageARB = uintptr(getProcAddr("glGetnTexImageARB"))
	gpGetnUniformdv = uintptr(getProcAddr("glGetnUniformdv"))
	gpGetnUniformdvARB = uintptr(getProcAddr("glGetnUniformdvARB"))
	gpGetnUniformfv = uintptr(getProcAddr("glGetnUniformfv"))
	gpGetnUniformfvARB = uintptr(getProcAddr("glGetnUniformfvARB"))
	gpGetnUniformfvKHR = uintptr(getProcAddr("glGetnUniformfvKHR"))
	gpGetnUniformi64vARB = uintptr(getProcAddr("glGetnUniformi64vARB"))
	gpGetnUniformiv = uintptr(getProcAddr("glGetnUniformiv"))
	gpGetnUniformivARB = uintptr(getProcAddr("glGetnUniformivARB"))
	gpGetnUniformivKHR = uintptr(getProcAddr("glGetnUniformivKHR"))
	gpGetnUniformui64vARB = uintptr(getProcAddr("glGetnUniformui64vARB"))
	gpGetnUniformuiv = uintptr(getProcAddr("glGetnUniformuiv"))
	gpGetnUniformuivARB = uintptr(getProcAddr("glGetnUniformuivARB"))
	gpGetnUniformuivKHR = uintptr(getProcAddr("glGetnUniformuivKHR"))
	gpHint = uintptr(getProcAddr("glHint"))
	gpIndexFormatNV = uintptr(getProcAddr("glIndexFormatNV"))
	gpIndexMask = uintptr(getProcAddr("glIndexMask"))
	gpIndexPointer = uintptr(getProcAddr("glIndexPointer"))
	gpIndexd = uintptr(getProcAddr("glIndexd"))
	gpIndexdv = uintptr(getProcAddr("glIndexdv"))
	gpIndexf = uintptr(getProcAddr("glIndexf"))
	gpIndexfv = uintptr(getProcAddr("glIndexfv"))
	gpIndexi = uintptr(getProcAddr("glIndexi"))
	gpIndexiv = uintptr(getProcAddr("glIndexiv"))
	gpIndexs = uintptr(getProcAddr("glIndexs"))
	gpIndexsv = uintptr(getProcAddr("glIndexsv"))
	gpIndexub = uintptr(getProcAddr("glIndexub"))
	gpIndexubv = uintptr(getProcAddr("glIndexubv"))
	gpInitNames = uintptr(getProcAddr("glInitNames"))
	gpInsertEventMarkerEXT = uintptr(getProcAddr("glInsertEventMarkerEXT"))
	gpInterleavedArrays = uintptr(getProcAddr("glInterleavedArrays"))
	gpInterpolatePathsNV = uintptr(getProcAddr("glInterpolatePathsNV"))
	gpInvalidateBufferData = uintptr(getProcAddr("glInvalidateBufferData"))
	gpInvalidateBufferSubData = uintptr(getProcAddr("glInvalidateBufferSubData"))
	gpInvalidateFramebuffer = uintptr(getProcAddr("glInvalidateFramebuffer"))
	gpInvalidateNamedFramebufferData = uintptr(getProcAddr("glInvalidateNamedFramebufferData"))
	gpInvalidateNamedFramebufferSubData = uintptr(getProcAddr("glInvalidateNamedFramebufferSubData"))
	gpInvalidateSubFramebuffer = uintptr(getProcAddr("glInvalidateSubFramebuffer"))
	gpInvalidateTexImage = uintptr(getProcAddr("glInvalidateTexImage"))
	gpInvalidateTexSubImage = uintptr(getProcAddr("glInvalidateTexSubImage"))
	gpIsBuffer = uintptr(getProcAddr("glIsBuffer"))
	gpIsBufferResidentNV = uintptr(getProcAddr("glIsBufferResidentNV"))
	gpIsCommandListNV = uintptr(getProcAddr("glIsCommandListNV"))
	gpIsEnabled = uintptr(getProcAddr("glIsEnabled"))
	gpIsEnabledIndexedEXT = uintptr(getProcAddr("glIsEnabledIndexedEXT"))
	gpIsEnabledi = uintptr(getProcAddr("glIsEnabledi"))
	gpIsFramebuffer = uintptr(getProcAddr("glIsFramebuffer"))
	gpIsImageHandleResidentARB = uintptr(getProcAddr("glIsImageHandleResidentARB"))
	gpIsImageHandleResidentNV = uintptr(getProcAddr("glIsImageHandleResidentNV"))
	gpIsList = uintptr(getProcAddr("glIsList"))
	gpIsNamedBufferResidentNV = uintptr(getProcAddr("glIsNamedBufferResidentNV"))
	gpIsNamedStringARB = uintptr(getProcAddr("glIsNamedStringARB"))
	gpIsPathNV = uintptr(getProcAddr("glIsPathNV"))
	gpIsPointInFillPathNV = uintptr(getProcAddr("glIsPointInFillPathNV"))
	gpIsPointInStrokePathNV = uintptr(getProcAddr("glIsPointInStrokePathNV"))
	gpIsProgram = uintptr(getProcAddr("glIsProgram"))
	gpIsProgramPipeline = uintptr(getProcAddr("glIsProgramPipeline"))
	gpIsProgramPipelineEXT = uintptr(getProcAddr("glIsProgramPipelineEXT"))
	gpIsQuery = uintptr(getProcAddr("glIsQuery"))
	gpIsRenderbuffer = uintptr(getProcAddr("glIsRenderbuffer"))
	gpIsSampler = uintptr(getProcAddr("glIsSampler"))
	gpIsShader = uintptr(getProcAddr("glIsShader"))
	gpIsStateNV = uintptr(getProcAddr("glIsStateNV"))
	gpIsSync = uintptr(getProcAddr("glIsSync"))
	gpIsTexture = uintptr(getProcAddr("glIsTexture"))
	gpIsTextureHandleResidentARB = uintptr(getProcAddr("glIsTextureHandleResidentARB"))
	gpIsTextureHandleResidentNV = uintptr(getProcAddr("glIsTextureHandleResidentNV"))
	gpIsTransformFeedback = uintptr(getProcAddr("glIsTransformFeedback"))
	gpIsVertexArray = uintptr(getProcAddr("glIsVertexArray"))
	gpLabelObjectEXT = uintptr(getProcAddr("glLabelObjectEXT"))
	gpLightModelf = uintptr(getProcAddr("glLightModelf"))
	gpLightModelfv = uintptr(getProcAddr("glLightModelfv"))
	gpLightModeli = uintptr(getProcAddr("glLightModeli"))
	gpLightModeliv = uintptr(getProcAddr("glLightModeliv"))
	gpLightf = uintptr(getProcAddr("glLightf"))
	gpLightfv = uintptr(getProcAddr("glLightfv"))
	gpLighti = uintptr(getProcAddr("glLighti"))
	gpLightiv = uintptr(getProcAddr("glLightiv"))
	gpLineStipple = uintptr(getProcAddr("glLineStipple"))
	gpLineWidth = uintptr(getProcAddr("glLineWidth"))
	gpLinkProgram = uintptr(getProcAddr("glLinkProgram"))
	gpListBase = uintptr(getProcAddr("glListBase"))
	gpListDrawCommandsStatesClientNV = uintptr(getProcAddr("glListDrawCommandsStatesClientNV"))
	gpLoadIdentity = uintptr(getProcAddr("glLoadIdentity"))
	gpLoadMatrixd = uintptr(getProcAddr("glLoadMatrixd"))
	gpLoadMatrixf = uintptr(getProcAddr("glLoadMatrixf"))
	gpLoadName = uintptr(getProcAddr("glLoadName"))
	gpLoadTransposeMatrixd = uintptr(getProcAddr("glLoadTransposeMatrixd"))
	gpLoadTransposeMatrixf = uintptr(getProcAddr("glLoadTransposeMatrixf"))
	gpLogicOp = uintptr(getProcAddr("glLogicOp"))
	gpMakeBufferNonResidentNV = uintptr(getProcAddr("glMakeBufferNonResidentNV"))
	gpMakeBufferResidentNV = uintptr(getProcAddr("glMakeBufferResidentNV"))
	gpMakeImageHandleNonResidentARB = uintptr(getProcAddr("glMakeImageHandleNonResidentARB"))
	gpMakeImageHandleNonResidentNV = uintptr(getProcAddr("glMakeImageHandleNonResidentNV"))
	gpMakeImageHandleResidentARB = uintptr(getProcAddr("glMakeImageHandleResidentARB"))
	gpMakeImageHandleResidentNV = uintptr(getProcAddr("glMakeImageHandleResidentNV"))
	gpMakeNamedBufferNonResidentNV = uintptr(getProcAddr("glMakeNamedBufferNonResidentNV"))
	gpMakeNamedBufferResidentNV = uintptr(getProcAddr("glMakeNamedBufferResidentNV"))
	gpMakeTextureHandleNonResidentARB = uintptr(getProcAddr("glMakeTextureHandleNonResidentARB"))
	gpMakeTextureHandleNonResidentNV = uintptr(getProcAddr("glMakeTextureHandleNonResidentNV"))
	gpMakeTextureHandleResidentARB = uintptr(getProcAddr("glMakeTextureHandleResidentARB"))
	gpMakeTextureHandleResidentNV = uintptr(getProcAddr("glMakeTextureHandleResidentNV"))
	gpMap1d = uintptr(getProcAddr("glMap1d"))
	gpMap1f = uintptr(getProcAddr("glMap1f"))
	gpMap2d = uintptr(getProcAddr("glMap2d"))
	gpMap2f = uintptr(getProcAddr("glMap2f"))
	gpMapBuffer = uintptr(getProcAddr("glMapBuffer"))
	gpMapBufferRange = uintptr(getProcAddr("glMapBufferRange"))
	gpMapGrid1d = uintptr(getProcAddr("glMapGrid1d"))
	gpMapGrid1f = uintptr(getProcAddr("glMapGrid1f"))
	gpMapGrid2d = uintptr(getProcAddr("glMapGrid2d"))
	gpMapGrid2f = uintptr(getProcAddr("glMapGrid2f"))
	gpMapNamedBuffer = uintptr(getProcAddr("glMapNamedBuffer"))
	gpMapNamedBufferEXT = uintptr(getProcAddr("glMapNamedBufferEXT"))
	gpMapNamedBufferRange = uintptr(getProcAddr("glMapNamedBufferRange"))
	gpMapNamedBufferRangeEXT = uintptr(getProcAddr("glMapNamedBufferRangeEXT"))
	gpMaterialf = uintptr(getProcAddr("glMaterialf"))
	gpMaterialfv = uintptr(getProcAddr("glMaterialfv"))
	gpMateriali = uintptr(getProcAddr("glMateriali"))
	gpMaterialiv = uintptr(getProcAddr("glMaterialiv"))
	gpMatrixFrustumEXT = uintptr(getProcAddr("glMatrixFrustumEXT"))
	gpMatrixLoad3x2fNV = uintptr(getProcAddr("glMatrixLoad3x2fNV"))
	gpMatrixLoad3x3fNV = uintptr(getProcAddr("glMatrixLoad3x3fNV"))
	gpMatrixLoadIdentityEXT = uintptr(getProcAddr("glMatrixLoadIdentityEXT"))
	gpMatrixLoadTranspose3x3fNV = uintptr(getProcAddr("glMatrixLoadTranspose3x3fNV"))
	gpMatrixLoadTransposedEXT = uintptr(getProcAddr("glMatrixLoadTransposedEXT"))
	gpMatrixLoadTransposefEXT = uintptr(getProcAddr("glMatrixLoadTransposefEXT"))
	gpMatrixLoaddEXT = uintptr(getProcAddr("glMatrixLoaddEXT"))
	gpMatrixLoadfEXT = uintptr(getProcAddr("glMatrixLoadfEXT"))
	gpMatrixMode = uintptr(getProcAddr("glMatrixMode"))
	gpMatrixMult3x2fNV = uintptr(getProcAddr("glMatrixMult3x2fNV"))
	gpMatrixMult3x3fNV = uintptr(getProcAddr("glMatrixMult3x3fNV"))
	gpMatrixMultTranspose3x3fNV = uintptr(getProcAddr("glMatrixMultTranspose3x3fNV"))
	gpMatrixMultTransposedEXT = uintptr(getProcAddr("glMatrixMultTransposedEXT"))
	gpMatrixMultTransposefEXT = uintptr(getProcAddr("glMatrixMultTransposefEXT"))
	gpMatrixMultdEXT = uintptr(getProcAddr("glMatrixMultdEXT"))
	gpMatrixMultfEXT = uintptr(getProcAddr("glMatrixMultfEXT"))
	gpMatrixOrthoEXT = uintptr(getProcAddr("glMatrixOrthoEXT"))
	gpMatrixPopEXT = uintptr(getProcAddr("glMatrixPopEXT"))
	gpMatrixPushEXT = uintptr(getProcAddr("glMatrixPushEXT"))
	gpMatrixRotatedEXT = uintptr(getProcAddr("glMatrixRotatedEXT"))
	gpMatrixRotatefEXT = uintptr(getProcAddr("glMatrixRotatefEXT"))
	gpMatrixScaledEXT = uintptr(getProcAddr("glMatrixScaledEXT"))
	gpMatrixScalefEXT = uintptr(getProcAddr("glMatrixScalefEXT"))
	gpMatrixTranslatedEXT = uintptr(getProcAddr("glMatrixTranslatedEXT"))
	gpMatrixTranslatefEXT = uintptr(getProcAddr("glMatrixTranslatefEXT"))
	gpMaxShaderCompilerThreadsARB = uintptr(getProcAddr("glMaxShaderCompilerThreadsARB"))
	gpMaxShaderCompilerThreadsKHR = uintptr(getProcAddr("glMaxShaderCompilerThreadsKHR"))
	gpMemoryBarrier = uintptr(getProcAddr("glMemoryBarrier"))
	gpMemoryBarrierByRegion = uintptr(getProcAddr("glMemoryBarrierByRegion"))
	gpMinSampleShading = uintptr(getProcAddr("glMinSampleShading"))
	gpMinSampleShadingARB = uintptr(getProcAddr("glMinSampleShadingARB"))
	gpMultMatrixd = uintptr(getProcAddr("glMultMatrixd"))
	gpMultMatrixf = uintptr(getProcAddr("glMultMatrixf"))
	gpMultTransposeMatrixd = uintptr(getProcAddr("glMultTransposeMatrixd"))
	gpMultTransposeMatrixf = uintptr(getProcAddr("glMultTransposeMatrixf"))
	gpMultiDrawArrays = uintptr(getProcAddr("glMultiDrawArrays"))
	gpMultiDrawArraysIndirect = uintptr(getProcAddr("glMultiDrawArraysIndirect"))
	gpMultiDrawArraysIndirectBindlessCountNV = uintptr(getProcAddr("glMultiDrawArraysIndirectBindlessCountNV"))
	gpMultiDrawArraysIndirectBindlessNV = uintptr(getProcAddr("glMultiDrawArraysIndirectBindlessNV"))
	gpMultiDrawArraysIndirectCount = uintptr(getProcAddr("glMultiDrawArraysIndirectCount"))
	gpMultiDrawArraysIndirectCountARB = uintptr(getProcAddr("glMultiDrawArraysIndirectCountARB"))
	gpMultiDrawElements = uintptr(getProcAddr("glMultiDrawElements"))
	gpMultiDrawElementsBaseVertex = uintptr(getProcAddr("glMultiDrawElementsBaseVertex"))
	gpMultiDrawElementsIndirect = uintptr(getProcAddr("glMultiDrawElementsIndirect"))
	gpMultiDrawElementsIndirectBindlessCountNV = uintptr(getProcAddr("glMultiDrawElementsIndirectBindlessCountNV"))
	gpMultiDrawElementsIndirectBindlessNV = uintptr(getProcAddr("glMultiDrawElementsIndirectBindlessNV"))
	gpMultiDrawElementsIndirectCount = uintptr(getProcAddr("glMultiDrawElementsIndirectCount"))
	gpMultiDrawElementsIndirectCountARB = uintptr(getProcAddr("glMultiDrawElementsIndirectCountARB"))
	gpMultiDrawMeshTasksIndirectCountNV = uintptr(getProcAddr("glMultiDrawMeshTasksIndirectCountNV"))
	gpMultiDrawMeshTasksIndirectNV = uintptr(getProcAddr("glMultiDrawMeshTasksIndirectNV"))
	gpMultiTexBufferEXT = uintptr(getProcAddr("glMultiTexBufferEXT"))
	gpMultiTexCoord1d = uintptr(getProcAddr("glMultiTexCoord1d"))
	gpMultiTexCoord1dv = uintptr(getProcAddr("glMultiTexCoord1dv"))
	gpMultiTexCoord1f = uintptr(getProcAddr("glMultiTexCoord1f"))
	gpMultiTexCoord1fv = uintptr(getProcAddr("glMultiTexCoord1fv"))
	gpMultiTexCoord1i = uintptr(getProcAddr("glMultiTexCoord1i"))
	gpMultiTexCoord1iv = uintptr(getProcAddr("glMultiTexCoord1iv"))
	gpMultiTexCoord1s = uintptr(getProcAddr("glMultiTexCoord1s"))
	gpMultiTexCoord1sv = uintptr(getProcAddr("glMultiTexCoord1sv"))
	gpMultiTexCoord2d = uintptr(getProcAddr("glMultiTexCoord2d"))
	gpMultiTexCoord2dv = uintptr(getProcAddr("glMultiTexCoord2dv"))
	gpMultiTexCoord2f = uintptr(getProcAddr("glMultiTexCoord2f"))
	gpMultiTexCoord2fv = uintptr(getProcAddr("glMultiTexCoord2fv"))
	gpMultiTexCoord2i = uintptr(getProcAddr("glMultiTexCoord2i"))
	gpMultiTexCoord2iv = uintptr(getProcAddr("glMultiTexCoord2iv"))
	gpMultiTexCoord2s = uintptr(getProcAddr("glMultiTexCoord2s"))
	gpMultiTexCoord2sv = uintptr(getProcAddr("glMultiTexCoord2sv"))
	gpMultiTexCoord3d = uintptr(getProcAddr("glMultiTexCoord3d"))
	gpMultiTexCoord3dv = uintptr(getProcAddr("glMultiTexCoord3dv"))
	gpMultiTexCoord3f = uintptr(getProcAddr("glMultiTexCoord3f"))
	gpMultiTexCoord3fv = uintptr(getProcAddr("glMultiTexCoord3fv"))
	gpMultiTexCoord3i = uintptr(getProcAddr("glMultiTexCoord3i"))
	gpMultiTexCoord3iv = uintptr(getProcAddr("glMultiTexCoord3iv"))
	gpMultiTexCoord3s = uintptr(getProcAddr("glMultiTexCoord3s"))
	gpMultiTexCoord3sv = uintptr(getProcAddr("glMultiTexCoord3sv"))
	gpMultiTexCoord4d = uintptr(getProcAddr("glMultiTexCoord4d"))
	gpMultiTexCoord4dv = uintptr(getProcAddr("glMultiTexCoord4dv"))
	gpMultiTexCoord4f = uintptr(getProcAddr("glMultiTexCoord4f"))
	gpMultiTexCoord4fv = uintptr(getProcAddr("glMultiTexCoord4fv"))
	gpMultiTexCoord4i = uintptr(getProcAddr("glMultiTexCoord4i"))
	gpMultiTexCoord4iv = uintptr(getProcAddr("glMultiTexCoord4iv"))
	gpMultiTexCoord4s = uintptr(getProcAddr("glMultiTexCoord4s"))
	gpMultiTexCoord4sv = uintptr(getProcAddr("glMultiTexCoord4sv"))
	gpMultiTexCoordPointerEXT = uintptr(getProcAddr("glMultiTexCoordPointerEXT"))
	gpMultiTexEnvfEXT = uintptr(getProcAddr("glMultiTexEnvfEXT"))
	gpMultiTexEnvfvEXT = uintptr(getProcAddr("glMultiTexEnvfvEXT"))
	gpMultiTexEnviEXT = uintptr(getProcAddr("glMultiTexEnviEXT"))
	gpMultiTexEnvivEXT = uintptr(getProcAddr("glMultiTexEnvivEXT"))
	gpMultiTexGendEXT = uintptr(getProcAddr("glMultiTexGendEXT"))
	gpMultiTexGendvEXT = uintptr(getProcAddr("glMultiTexGendvEXT"))
	gpMultiTexGenfEXT = uintptr(getProcAddr("glMultiTexGenfEXT"))
	gpMultiTexGenfvEXT = uintptr(getProcAddr("glMultiTexGenfvEXT"))
	gpMultiTexGeniEXT = uintptr(getProcAddr("glMultiTexGeniEXT"))
	gpMultiTexGenivEXT = uintptr(getProcAddr("glMultiTexGenivEXT"))
	gpMultiTexImage1DEXT = uintptr(getProcAddr("glMultiTexImage1DEXT"))
	gpMultiTexImage2DEXT = uintptr(getProcAddr("glMultiTexImage2DEXT"))
	gpMultiTexImage3DEXT = uintptr(getProcAddr("glMultiTexImage3DEXT"))
	gpMultiTexParameterIivEXT = uintptr(getProcAddr("glMultiTexParameterIivEXT"))
	gpMultiTexParameterIuivEXT = uintptr(getProcAddr("glMultiTexParameterIuivEXT"))
	gpMultiTexParameterfEXT = uintptr(getProcAddr("glMultiTexParameterfEXT"))
	gpMultiTexParameterfvEXT = uintptr(getProcAddr("glMultiTexParameterfvEXT"))
	gpMultiTexParameteriEXT = uintptr(getProcAddr("glMultiTexParameteriEXT"))
	gpMultiTexParameterivEXT = uintptr(getProcAddr("glMultiTexParameterivEXT"))
	gpMultiTexRenderbufferEXT = uintptr(getProcAddr("glMultiTexRenderbufferEXT"))
	gpMultiTexSubImage1DEXT = uintptr(getProcAddr("glMultiTexSubImage1DEXT"))
	gpMultiTexSubImage2DEXT = uintptr(getProcAddr("glMultiTexSubImage2DEXT"))
	gpMultiTexSubImage3DEXT = uintptr(getProcAddr("glMultiTexSubImage3DEXT"))
	gpNamedBufferAttachMemoryNV = uintptr(getProcAddr("glNamedBufferAttachMemoryNV"))
	gpNamedBufferData = uintptr(getProcAddr("glNamedBufferData"))
	gpNamedBufferDataEXT = uintptr(getProcAddr("glNamedBufferDataEXT"))
	gpNamedBufferPageCommitmentARB = uintptr(getProcAddr("glNamedBufferPageCommitmentARB"))
	gpNamedBufferPageCommitmentEXT = uintptr(getProcAddr("glNamedBufferPageCommitmentEXT"))
	gpNamedBufferStorage = uintptr(getProcAddr("glNamedBufferStorage"))
	gpNamedBufferStorageEXT = uintptr(getProcAddr("glNamedBufferStorageEXT"))
	gpNamedBufferSubData = uintptr(getProcAddr("glNamedBufferSubData"))
	gpNamedBufferSubDataEXT = uintptr(getProcAddr("glNamedBufferSubDataEXT"))
	gpNamedCopyBufferSubDataEXT = uintptr(getProcAddr("glNamedCopyBufferSubDataEXT"))
	gpNamedFramebufferDrawBuffer = uintptr(getProcAddr("glNamedFramebufferDrawBuffer"))
	gpNamedFramebufferDrawBuffers = uintptr(getProcAddr("glNamedFramebufferDrawBuffers"))
	gpNamedFramebufferParameteri = uintptr(getProcAddr("glNamedFramebufferParameteri"))
	gpNamedFramebufferParameteriEXT = uintptr(getProcAddr("glNamedFramebufferParameteriEXT"))
	gpNamedFramebufferReadBuffer = uintptr(getProcAddr("glNamedFramebufferReadBuffer"))
	gpNamedFramebufferRenderbuffer = uintptr(getProcAddr("glNamedFramebufferRenderbuffer"))
	gpNamedFramebufferRenderbufferEXT = uintptr(getProcAddr("glNamedFramebufferRenderbufferEXT"))
	gpNamedFramebufferSampleLocationsfvARB = uintptr(getProcAddr("glNamedFramebufferSampleLocationsfvARB"))
	gpNamedFramebufferSampleLocationsfvNV = uintptr(getProcAddr("glNamedFramebufferSampleLocationsfvNV"))
	gpNamedFramebufferTexture = uintptr(getProcAddr("glNamedFramebufferTexture"))
	gpNamedFramebufferTexture1DEXT = uintptr(getProcAddr("glNamedFramebufferTexture1DEXT"))
	gpNamedFramebufferTexture2DEXT = uintptr(getProcAddr("glNamedFramebufferTexture2DEXT"))
	gpNamedFramebufferTexture3DEXT = uintptr(getProcAddr("glNamedFramebufferTexture3DEXT"))
	gpNamedFramebufferTextureEXT = uintptr(getProcAddr("glNamedFramebufferTextureEXT"))
	gpNamedFramebufferTextureFaceEXT = uintptr(getProcAddr("glNamedFramebufferTextureFaceEXT"))
	gpNamedFramebufferTextureLayer = uintptr(getProcAddr("glNamedFramebufferTextureLayer"))
	gpNamedFramebufferTextureLayerEXT = uintptr(getProcAddr("glNamedFramebufferTextureLayerEXT"))
	gpNamedProgramLocalParameter4dEXT = uintptr(getProcAddr("glNamedProgramLocalParameter4dEXT"))
	gpNamedProgramLocalParameter4dvEXT = uintptr(getProcAddr("glNamedProgramLocalParameter4dvEXT"))
	gpNamedProgramLocalParameter4fEXT = uintptr(getProcAddr("glNamedProgramLocalParameter4fEXT"))
	gpNamedProgramLocalParameter4fvEXT = uintptr(getProcAddr("glNamedProgramLocalParameter4fvEXT"))
	gpNamedProgramLocalParameterI4iEXT = uintptr(getProcAddr("glNamedProgramLocalParameterI4iEXT"))
	gpNamedProgramLocalParameterI4ivEXT = uintptr(getProcAddr("glNamedProgramLocalParameterI4ivEXT"))
	gpNamedProgramLocalParameterI4uiEXT = uintptr(getProcAddr("glNamedProgramLocalParameterI4uiEXT"))
	gpNamedProgramLocalParameterI4uivEXT = uintptr(getProcAddr("glNamedProgramLocalParameterI4uivEXT"))
	gpNamedProgramLocalParameters4fvEXT = uintptr(getProcAddr("glNamedProgramLocalParameters4fvEXT"))
	gpNamedProgramLocalParametersI4ivEXT = uintptr(getProcAddr("glNamedProgramLocalParametersI4ivEXT"))
	gpNamedProgramLocalParametersI4uivEXT = uintptr(getProcAddr("glNamedProgramLocalParametersI4uivEXT"))
	gpNamedProgramStringEXT = uintptr(getProcAddr("glNamedProgramStringEXT"))
	gpNamedRenderbufferStorage = uintptr(getProcAddr("glNamedRenderbufferStorage"))
	gpNamedRenderbufferStorageEXT = uintptr(getProcAddr("glNamedRenderbufferStorageEXT"))
	gpNamedRenderbufferStorageMultisample = uintptr(getProcAddr("glNamedRenderbufferStorageMultisample"))
	gpNamedRenderbufferStorageMultisampleAdvancedAMD = uintptr(getProcAddr("glNamedRenderbufferStorageMultisampleAdvancedAMD"))
	gpNamedRenderbufferStorageMultisampleCoverageEXT = uintptr(getProcAddr("glNamedRenderbufferStorageMultisampleCoverageEXT"))
	gpNamedRenderbufferStorageMultisampleEXT = uintptr(getProcAddr("glNamedRenderbufferStorageMultisampleEXT"))
	gpNamedStringARB = uintptr(getProcAddr("glNamedStringARB"))
	gpNewList = uintptr(getProcAddr("glNewList"))
	gpNormal3b = uintptr(getProcAddr("glNormal3b"))
	gpNormal3bv = uintptr(getProcAddr("glNormal3bv"))
	gpNormal3d = uintptr(getProcAddr("glNormal3d"))
	gpNormal3dv = uintptr(getProcAddr("glNormal3dv"))
	gpNormal3f = uintptr(getProcAddr("glNormal3f"))
	gpNormal3fv = uintptr(getProcAddr("glNormal3fv"))
	gpNormal3i = uintptr(getProcAddr("glNormal3i"))
	gpNormal3iv = uintptr(getProcAddr("glNormal3iv"))
	gpNormal3s = uintptr(getProcAddr("glNormal3s"))
	gpNormal3sv = uintptr(getProcAddr("glNormal3sv"))
	gpNormalFormatNV = uintptr(getProcAddr("glNormalFormatNV"))
	gpNormalPointer = uintptr(getProcAddr("glNormalPointer"))
	gpObjectLabel = uintptr(getProcAddr("glObjectLabel"))
	gpObjectLabelKHR = uintptr(getProcAddr("glObjectLabelKHR"))
	gpObjectPtrLabel = uintptr(getProcAddr("glObjectPtrLabel"))
	gpObjectPtrLabelKHR = uintptr(getProcAddr("glObjectPtrLabelKHR"))
	gpOrtho = uintptr(getProcAddr("glOrtho"))
	gpPassThrough = uintptr(getProcAddr("glPassThrough"))
	gpPatchParameterfv = uintptr(getProcAddr("glPatchParameterfv"))
	gpPatchParameteri = uintptr(getProcAddr("glPatchParameteri"))
	gpPathCommandsNV = uintptr(getProcAddr("glPathCommandsNV"))
	gpPathCoordsNV = uintptr(getProcAddr("glPathCoordsNV"))
	gpPathCoverDepthFuncNV = uintptr(getProcAddr("glPathCoverDepthFuncNV"))
	gpPathDashArrayNV = uintptr(getProcAddr("glPathDashArrayNV"))
	gpPathGlyphIndexArrayNV = uintptr(getProcAddr("glPathGlyphIndexArrayNV"))
	gpPathGlyphIndexRangeNV = uintptr(getProcAddr("glPathGlyphIndexRangeNV"))
	gpPathGlyphRangeNV = uintptr(getProcAddr("glPathGlyphRangeNV"))
	gpPathGlyphsNV = uintptr(getProcAddr("glPathGlyphsNV"))
	gpPathMemoryGlyphIndexArrayNV = uintptr(getProcAddr("glPathMemoryGlyphIndexArrayNV"))
	gpPathParameterfNV = uintptr(getProcAddr("glPathParameterfNV"))
	gpPathParameterfvNV = uintptr(getProcAddr("glPathParameterfvNV"))
	gpPathParameteriNV = uintptr(getProcAddr("glPathParameteriNV"))
	gpPathParameterivNV = uintptr(getProcAddr("glPathParameterivNV"))
	gpPathStencilDepthOffsetNV = uintptr(getProcAddr("glPathStencilDepthOffsetNV"))
	gpPathStencilFuncNV = uintptr(getProcAddr("glPathStencilFuncNV"))
	gpPathStringNV = uintptr(getProcAddr("glPathStringNV"))
	gpPathSubCommandsNV = uintptr(getProcAddr("glPathSubCommandsNV"))
	gpPathSubCoordsNV = uintptr(getProcAddr("glPathSubCoordsNV"))
	gpPauseTransformFeedback = uintptr(getProcAddr("glPauseTransformFeedback"))
	gpPixelMapfv = uintptr(getProcAddr("glPixelMapfv"))
	gpPixelMapuiv = uintptr(getProcAddr("glPixelMapuiv"))
	gpPixelMapusv = uintptr(getProcAddr("glPixelMapusv"))
	gpPixelStoref = uintptr(getProcAddr("glPixelStoref"))
	gpPixelStorei = uintptr(getProcAddr("glPixelStorei"))
	gpPixelTransferf = uintptr(getProcAddr("glPixelTransferf"))
	gpPixelTransferi = uintptr(getProcAddr("glPixelTransferi"))
	gpPixelZoom = uintptr(getProcAddr("glPixelZoom"))
	gpPointAlongPathNV = uintptr(getProcAddr("glPointAlongPathNV"))
	gpPointParameterf = uintptr(getProcAddr("glPointParameterf"))
	gpPointParameterfv = uintptr(getProcAddr("glPointParameterfv"))
	gpPointParameteri = uintptr(getProcAddr("glPointParameteri"))
	gpPointParameteriv = uintptr(getProcAddr("glPointParameteriv"))
	gpPointSize = uintptr(getProcAddr("glPointSize"))
	gpPolygonMode = uintptr(getProcAddr("glPolygonMode"))
	gpPolygonOffset = uintptr(getProcAddr("glPolygonOffset"))
	gpPolygonOffsetClamp = uintptr(getProcAddr("glPolygonOffsetClamp"))
	gpPolygonOffsetClampEXT = uintptr(getProcAddr("glPolygonOffsetClampEXT"))
	gpPolygonStipple = uintptr(getProcAddr("glPolygonStipple"))
	gpPopAttrib = uintptr(getProcAddr("glPopAttrib"))
	gpPopClientAttrib = uintptr(getProcAddr("glPopClientAttrib"))
	gpPopDebugGroup = uintptr(getProcAddr("glPopDebugGroup"))
	gpPopDebugGroupKHR = uintptr(getProcAddr("glPopDebugGroupKHR"))
	gpPopGroupMarkerEXT = uintptr(getProcAddr("glPopGroupMarkerEXT"))
	gpPopMatrix = uintptr(getProcAddr("glPopMatrix"))
	gpPopName = uintptr(getProcAddr("glPopName"))
	gpPrimitiveBoundingBoxARB = uintptr(getProcAddr("glPrimitiveBoundingBoxARB"))
	gpPrimitiveRestartIndex = uintptr(getProcAddr("glPrimitiveRestartIndex"))
	gpPrioritizeTextures = uintptr(getProcAddr("glPrioritizeTextures"))
	gpProgramBinary = uintptr(getProcAddr("glProgramBinary"))
	gpProgramParameteri = uintptr(getProcAddr("glProgramParameteri"))
	gpProgramParameteriARB = uintptr(getProcAddr("glProgramParameteriARB"))
	gpProgramParameteriEXT = uintptr(getProcAddr("glProgramParameteriEXT"))
	gpProgramPathFragmentInputGenNV = uintptr(getProcAddr("glProgramPathFragmentInputGenNV"))
	gpProgramUniform1d = uintptr(getProcAddr("glProgramUniform1d"))
	gpProgramUniform1dEXT = uintptr(getProcAddr("glProgramUniform1dEXT"))
	gpProgramUniform1dv = uintptr(getProcAddr("glProgramUniform1dv"))
	gpProgramUniform1dvEXT = uintptr(getProcAddr("glProgramUniform1dvEXT"))
	gpProgramUniform1f = uintptr(getProcAddr("glProgramUniform1f"))
	gpProgramUniform1fEXT = uintptr(getProcAddr("glProgramUniform1fEXT"))
	gpProgramUniform1fv = uintptr(getProcAddr("glProgramUniform1fv"))
	gpProgramUniform1fvEXT = uintptr(getProcAddr("glProgramUniform1fvEXT"))
	gpProgramUniform1i = uintptr(getProcAddr("glProgramUniform1i"))
	gpProgramUniform1i64ARB = uintptr(getProcAddr("glProgramUniform1i64ARB"))
	gpProgramUniform1i64NV = uintptr(getProcAddr("glProgramUniform1i64NV"))
	gpProgramUniform1i64vARB = uintptr(getProcAddr("glProgramUniform1i64vARB"))
	gpProgramUniform1i64vNV = uintptr(getProcAddr("glProgramUniform1i64vNV"))
	gpProgramUniform1iEXT = uintptr(getProcAddr("glProgramUniform1iEXT"))
	gpProgramUniform1iv = uintptr(getProcAddr("glProgramUniform1iv"))
	gpProgramUniform1ivEXT = uintptr(getProcAddr("glProgramUniform1ivEXT"))
	gpProgramUniform1ui = uintptr(getProcAddr("glProgramUniform1ui"))
	gpProgramUniform1ui64ARB = uintptr(getProcAddr("glProgramUniform1ui64ARB"))
	gpProgramUniform1ui64NV = uintptr(getProcAddr("glProgramUniform1ui64NV"))
	gpProgramUniform1ui64vARB = uintptr(getProcAddr("glProgramUniform1ui64vARB"))
	gpProgramUniform1ui64vNV = uintptr(getProcAddr("glProgramUniform1ui64vNV"))
	gpProgramUniform1uiEXT = uintptr(getProcAddr("glProgramUniform1uiEXT"))
	gpProgramUniform1uiv = uintptr(getProcAddr("glProgramUniform1uiv"))
	gpProgramUniform1uivEXT = uintptr(getProcAddr("glProgramUniform1uivEXT"))
	gpProgramUniform2d = uintptr(getProcAddr("glProgramUniform2d"))
	gpProgramUniform2dEXT = uintptr(getProcAddr("glProgramUniform2dEXT"))
	gpProgramUniform2dv = uintptr(getProcAddr("glProgramUniform2dv"))
	gpProgramUniform2dvEXT = uintptr(getProcAddr("glProgramUniform2dvEXT"))
	gpProgramUniform2f = uintptr(getProcAddr("glProgramUniform2f"))
	gpProgramUniform2fEXT = uintptr(getProcAddr("glProgramUniform2fEXT"))
	gpProgramUniform2fv = uintptr(getProcAddr("glProgramUniform2fv"))
	gpProgramUniform2fvEXT = uintptr(getProcAddr("glProgramUniform2fvEXT"))
	gpProgramUniform2i = uintptr(getProcAddr("glProgramUniform2i"))
	gpProgramUniform2i64ARB = uintptr(getProcAddr("glProgramUniform2i64ARB"))
	gpProgramUniform2i64NV = uintptr(getProcAddr("glProgramUniform2i64NV"))
	gpProgramUniform2i64vARB = uintptr(getProcAddr("glProgramUniform2i64vARB"))
	gpProgramUniform2i64vNV = uintptr(getProcAddr("glProgramUniform2i64vNV"))
	gpProgramUniform2iEXT = uintptr(getProcAddr("glProgramUniform2iEXT"))
	gpProgramUniform2iv = uintptr(getProcAddr("glProgramUniform2iv"))
	gpProgramUniform2ivEXT = uintptr(getProcAddr("glProgramUniform2ivEXT"))
	gpProgramUniform2ui = uintptr(getProcAddr("glProgramUniform2ui"))
	gpProgramUniform2ui64ARB = uintptr(getProcAddr("glProgramUniform2ui64ARB"))
	gpProgramUniform2ui64NV = uintptr(getProcAddr("glProgramUniform2ui64NV"))
	gpProgramUniform2ui64vARB = uintptr(getProcAddr("glProgramUniform2ui64vARB"))
	gpProgramUniform2ui64vNV = uintptr(getProcAddr("glProgramUniform2ui64vNV"))
	gpProgramUniform2uiEXT = uintptr(getProcAddr("glProgramUniform2uiEXT"))
	gpProgramUniform2uiv = uintptr(getProcAddr("glProgramUniform2uiv"))
	gpProgramUniform2uivEXT = uintptr(getProcAddr("glProgramUniform2uivEXT"))
	gpProgramUniform3d = uintptr(getProcAddr("glProgramUniform3d"))
	gpProgramUniform3dEXT = uintptr(getProcAddr("glProgramUniform3dEXT"))
	gpProgramUniform3dv = uintptr(getProcAddr("glProgramUniform3dv"))
	gpProgramUniform3dvEXT = uintptr(getProcAddr("glProgramUniform3dvEXT"))
	gpProgramUniform3f = uintptr(getProcAddr("glProgramUniform3f"))
	gpProgramUniform3fEXT = uintptr(getProcAddr("glProgramUniform3fEXT"))
	gpProgramUniform3fv = uintptr(getProcAddr("glProgramUniform3fv"))
	gpProgramUniform3fvEXT = uintptr(getProcAddr("glProgramUniform3fvEXT"))
	gpProgramUniform3i = uintptr(getProcAddr("glProgramUniform3i"))
	gpProgramUniform3i64ARB = uintptr(getProcAddr("glProgramUniform3i64ARB"))
	gpProgramUniform3i64NV = uintptr(getProcAddr("glProgramUniform3i64NV"))
	gpProgramUniform3i64vARB = uintptr(getProcAddr("glProgramUniform3i64vARB"))
	gpProgramUniform3i64vNV = uintptr(getProcAddr("glProgramUniform3i64vNV"))
	gpProgramUniform3iEXT = uintptr(getProcAddr("glProgramUniform3iEXT"))
	gpProgramUniform3iv = uintptr(getProcAddr("glProgramUniform3iv"))
	gpProgramUniform3ivEXT = uintptr(getProcAddr("glProgramUniform3ivEXT"))
	gpProgramUniform3ui = uintptr(getProcAddr("glProgramUniform3ui"))
	gpProgramUniform3ui64ARB = uintptr(getProcAddr("glProgramUniform3ui64ARB"))
	gpProgramUniform3ui64NV = uintptr(getProcAddr("glProgramUniform3ui64NV"))
	gpProgramUniform3ui64vARB = uintptr(getProcAddr("glProgramUniform3ui64vARB"))
	gpProgramUniform3ui64vNV = uintptr(getProcAddr("glProgramUniform3ui64vNV"))
	gpProgramUniform3uiEXT = uintptr(getProcAddr("glProgramUniform3uiEXT"))
	gpProgramUniform3uiv = uintptr(getProcAddr("glProgramUniform3uiv"))
	gpProgramUniform3uivEXT = uintptr(getProcAddr("glProgramUniform3uivEXT"))
	gpProgramUniform4d = uintptr(getProcAddr("glProgramUniform4d"))
	gpProgramUniform4dEXT = uintptr(getProcAddr("glProgramUniform4dEXT"))
	gpProgramUniform4dv = uintptr(getProcAddr("glProgramUniform4dv"))
	gpProgramUniform4dvEXT = uintptr(getProcAddr("glProgramUniform4dvEXT"))
	gpProgramUniform4f = uintptr(getProcAddr("glProgramUniform4f"))
	gpProgramUniform4fEXT = uintptr(getProcAddr("glProgramUniform4fEXT"))
	gpProgramUniform4fv = uintptr(getProcAddr("glProgramUniform4fv"))
	gpProgramUniform4fvEXT = uintptr(getProcAddr("glProgramUniform4fvEXT"))
	gpProgramUniform4i = uintptr(getProcAddr("glProgramUniform4i"))
	gpProgramUniform4i64ARB = uintptr(getProcAddr("glProgramUniform4i64ARB"))
	gpProgramUniform4i64NV = uintptr(getProcAddr("glProgramUniform4i64NV"))
	gpProgramUniform4i64vARB = uintptr(getProcAddr("glProgramUniform4i64vARB"))
	gpProgramUniform4i64vNV = uintptr(getProcAddr("glProgramUniform4i64vNV"))
	gpProgramUniform4iEXT = uintptr(getProcAddr("glProgramUniform4iEXT"))
	gpProgramUniform4iv = uintptr(getProcAddr("glProgramUniform4iv"))
	gpProgramUniform4ivEXT = uintptr(getProcAddr("glProgramUniform4ivEXT"))
	gpProgramUniform4ui = uintptr(getProcAddr("glProgramUniform4ui"))
	gpProgramUniform4ui64ARB = uintptr(getProcAddr("glProgramUniform4ui64ARB"))
	gpProgramUniform4ui64NV = uintptr(getProcAddr("glProgramUniform4ui64NV"))
	gpProgramUniform4ui64vARB = uintptr(getProcAddr("glProgramUniform4ui64vARB"))
	gpProgramUniform4ui64vNV = uintptr(getProcAddr("glProgramUniform4ui64vNV"))
	gpProgramUniform4uiEXT = uintptr(getProcAddr("glProgramUniform4uiEXT"))
	gpProgramUniform4uiv = uintptr(getProcAddr("glProgramUniform4uiv"))
	gpProgramUniform4uivEXT = uintptr(getProcAddr("glProgramUniform4uivEXT"))
	gpProgramUniformHandleui64ARB = uintptr(getProcAddr("glProgramUniformHandleui64ARB"))
	gpProgramUniformHandleui64NV = uintptr(getProcAddr("glProgramUniformHandleui64NV"))
	gpProgramUniformHandleui64vARB = uintptr(getProcAddr("glProgramUniformHandleui64vARB"))
	gpProgramUniformHandleui64vNV = uintptr(getProcAddr("glProgramUniformHandleui64vNV"))
	gpProgramUniformMatrix2dv = uintptr(getProcAddr("glProgramUniformMatrix2dv"))
	gpProgramUniformMatrix2dvEXT = uintptr(getProcAddr("glProgramUniformMatrix2dvEXT"))
	gpProgramUniformMatrix2fv = uintptr(getProcAddr("glProgramUniformMatrix2fv"))
	gpProgramUniformMatrix2fvEXT = uintptr(getProcAddr("glProgramUniformMatrix2fvEXT"))
	gpProgramUniformMatrix2x3dv = uintptr(getProcAddr("glProgramUniformMatrix2x3dv"))
	gpProgramUniformMatrix2x3dvEXT = uintptr(getProcAddr("glProgramUniformMatrix2x3dvEXT"))
	gpProgramUniformMatrix2x3fv = uintptr(getProcAddr("glProgramUniformMatrix2x3fv"))
	gpProgramUniformMatrix2x3fvEXT = uintptr(getProcAddr("glProgramUniformMatrix2x3fvEXT"))
	gpProgramUniformMatrix2x4dv = uintptr(getProcAddr("glProgramUniformMatrix2x4dv"))
	gpProgramUniformMatrix2x4dvEXT = uintptr(getProcAddr("glProgramUniformMatrix2x4dvEXT"))
	gpProgramUniformMatrix2x4fv = uintptr(getProcAddr("glProgramUniformMatrix2x4fv"))
	gpProgramUniformMatrix2x4fvEXT = uintptr(getProcAddr("glProgramUniformMatrix2x4fvEXT"))
	gpProgramUniformMatrix3dv = uintptr(getProcAddr("glProgramUniformMatrix3dv"))
	gpProgramUniformMatrix3dvEXT = uintptr(getProcAddr("glProgramUniformMatrix3dvEXT"))
	gpProgramUniformMatrix3fv = uintptr(getProcAddr("glProgramUniformMatrix3fv"))
	gpProgramUniformMatrix3fvEXT = uintptr(getProcAddr("glProgramUniformMatrix3fvEXT"))
	gpProgramUniformMatrix3x2dv = uintptr(getProcAddr("glProgramUniformMatrix3x2dv"))
	gpProgramUniformMatrix3x2dvEXT = uintptr(getProcAddr("glProgramUniformMatrix3x2dvEXT"))
	gpProgramUniformMatrix3x2fv = uintptr(getProcAddr("glProgramUniformMatrix3x2fv"))
	gpProgramUniformMatrix3x2fvEXT = uintptr(getProcAddr("glProgramUniformMatrix3x2fvEXT"))
	gpProgramUniformMatrix3x4dv = uintptr(getProcAddr("glProgramUniformMatrix3x4dv"))
	gpProgramUniformMatrix3x4dvEXT = uintptr(getProcAddr("glProgramUniformMatrix3x4dvEXT"))
	gpProgramUniformMatrix3x4fv = uintptr(getProcAddr("glProgramUniformMatrix3x4fv"))
	gpProgramUniformMatrix3x4fvEXT = uintptr(getProcAddr("glProgramUniformMatrix3x4fvEXT"))
	gpProgramUniformMatrix4dv = uintptr(getProcAddr("glProgramUniformMatrix4dv"))
	gpProgramUniformMatrix4dvEXT = uintptr(getProcAddr("glProgramUniformMatrix4dvEXT"))
	gpProgramUniformMatrix4fv = uintptr(getProcAddr("glProgramUniformMatrix4fv"))
	gpProgramUniformMatrix4fvEXT = uintptr(getProcAddr("glProgramUniformMatrix4fvEXT"))
	gpProgramUniformMatrix4x2dv = uintptr(getProcAddr("glProgramUniformMatrix4x2dv"))
	gpProgramUniformMatrix4x2dvEXT = uintptr(getProcAddr("glProgramUniformMatrix4x2dvEXT"))
	gpProgramUniformMatrix4x2fv = uintptr(getProcAddr("glProgramUniformMatrix4x2fv"))
	gpProgramUniformMatrix4x2fvEXT = uintptr(getProcAddr("glProgramUniformMatrix4x2fvEXT"))
	gpProgramUniformMatrix4x3dv = uintptr(getProcAddr("glProgramUniformMatrix4x3dv"))
	gpProgramUniformMatrix4x3dvEXT = uintptr(getProcAddr("glProgramUniformMatrix4x3dvEXT"))
	gpProgramUniformMatrix4x3fv = uintptr(getProcAddr("glProgramUniformMatrix4x3fv"))
	gpProgramUniformMatrix4x3fvEXT = uintptr(getProcAddr("glProgramUniformMatrix4x3fvEXT"))
	gpProgramUniformui64NV = uintptr(getProcAddr("glProgramUniformui64NV"))
	gpProgramUniformui64vNV = uintptr(getProcAddr("glProgramUniformui64vNV"))
	gpProvokingVertex = uintptr(getProcAddr("glProvokingVertex"))
	gpPushAttrib = uintptr(getProcAddr("glPushAttrib"))
	gpPushClientAttrib = uintptr(getProcAddr("glPushClientAttrib"))
	gpPushClientAttribDefaultEXT = uintptr(getProcAddr("glPushClientAttribDefaultEXT"))
	gpPushDebugGroup = uintptr(getProcAddr("glPushDebugGroup"))
	gpPushDebugGroupKHR = uintptr(getProcAddr("glPushDebugGroupKHR"))
	gpPushGroupMarkerEXT = uintptr(getProcAddr("glPushGroupMarkerEXT"))
	gpPushMatrix = uintptr(getProcAddr("glPushMatrix"))
	gpPushName = uintptr(getProcAddr("glPushName"))
	gpQueryCounter = uintptr(getProcAddr("glQueryCounter"))
	gpRasterPos2d = uintptr(getProcAddr("glRasterPos2d"))
	gpRasterPos2dv = uintptr(getProcAddr("glRasterPos2dv"))
	gpRasterPos2f = uintptr(getProcAddr("glRasterPos2f"))
	gpRasterPos2fv = uintptr(getProcAddr("glRasterPos2fv"))
	gpRasterPos2i = uintptr(getProcAddr("glRasterPos2i"))
	gpRasterPos2iv = uintptr(getProcAddr("glRasterPos2iv"))
	gpRasterPos2s = uintptr(getProcAddr("glRasterPos2s"))
	gpRasterPos2sv = uintptr(getProcAddr("glRasterPos2sv"))
	gpRasterPos3d = uintptr(getProcAddr("glRasterPos3d"))
	gpRasterPos3dv = uintptr(getProcAddr("glRasterPos3dv"))
	gpRasterPos3f = uintptr(getProcAddr("glRasterPos3f"))
	gpRasterPos3fv = uintptr(getProcAddr("glRasterPos3fv"))
	gpRasterPos3i = uintptr(getProcAddr("glRasterPos3i"))
	gpRasterPos3iv = uintptr(getProcAddr("glRasterPos3iv"))
	gpRasterPos3s = uintptr(getProcAddr("glRasterPos3s"))
	gpRasterPos3sv = uintptr(getProcAddr("glRasterPos3sv"))
	gpRasterPos4d = uintptr(getProcAddr("glRasterPos4d"))
	gpRasterPos4dv = uintptr(getProcAddr("glRasterPos4dv"))
	gpRasterPos4f = uintptr(getProcAddr("glRasterPos4f"))
	gpRasterPos4fv = uintptr(getProcAddr("glRasterPos4fv"))
	gpRasterPos4i = uintptr(getProcAddr("glRasterPos4i"))
	gpRasterPos4iv = uintptr(getProcAddr("glRasterPos4iv"))
	gpRasterPos4s = uintptr(getProcAddr("glRasterPos4s"))
	gpRasterPos4sv = uintptr(getProcAddr("glRasterPos4sv"))
	gpRasterSamplesEXT = uintptr(getProcAddr("glRasterSamplesEXT"))
	gpReadBuffer = uintptr(getProcAddr("glReadBuffer"))
	gpReadPixels = uintptr(getProcAddr("glReadPixels"))
	gpReadnPixels = uintptr(getProcAddr("glReadnPixels"))
	gpReadnPixelsARB = uintptr(getProcAddr("glReadnPixelsARB"))
	gpReadnPixelsKHR = uintptr(getProcAddr("glReadnPixelsKHR"))
	gpRectd = uintptr(getProcAddr("glRectd"))
	gpRectdv = uintptr(getProcAddr("glRectdv"))
	gpRectf = uintptr(getProcAddr("glRectf"))
	gpRectfv = uintptr(getProcAddr("glRectfv"))
	gpRecti = uintptr(getProcAddr("glRecti"))
	gpRectiv = uintptr(getProcAddr("glRectiv"))
	gpRects = uintptr(getProcAddr("glRects"))
	gpRectsv = uintptr(getProcAddr("glRectsv"))
	gpReleaseShaderCompiler = uintptr(getProcAddr("glReleaseShaderCompiler"))
	gpRenderMode = uintptr(getProcAddr("glRenderMode"))
	gpRenderbufferStorage = uintptr(getProcAddr("glRenderbufferStorage"))
	gpRenderbufferStorageMultisample = uintptr(getProcAddr("glRenderbufferStorageMultisample"))
	gpRenderbufferStorageMultisampleAdvancedAMD = uintptr(getProcAddr("glRenderbufferStorageMultisampleAdvancedAMD"))
	gpRenderbufferStorageMultisampleCoverageNV = uintptr(getProcAddr("glRenderbufferStorageMultisampleCoverageNV"))
	gpResetMemoryObjectParameterNV = uintptr(getProcAddr("glResetMemoryObjectParameterNV"))
	gpResolveDepthValuesNV = uintptr(getProcAddr("glResolveDepthValuesNV"))
	gpResumeTransformFeedback = uintptr(getProcAddr("glResumeTransformFeedback"))
	gpRotated = uintptr(getProcAddr("glRotated"))
	gpRotatef = uintptr(getProcAddr("glRotatef"))
	gpSampleCoverage = uintptr(getProcAddr("glSampleCoverage"))
	gpSampleMaski = uintptr(getProcAddr("glSampleMaski"))
	gpSamplerParameterIiv = uintptr(getProcAddr("glSamplerParameterIiv"))
	gpSamplerParameterIuiv = uintptr(getProcAddr("glSamplerParameterIuiv"))
	gpSamplerParameterf = uintptr(getProcAddr("glSamplerParameterf"))
	gpSamplerParameterfv = uintptr(getProcAddr("glSamplerParameterfv"))
	gpSamplerParameteri = uintptr(getProcAddr("glSamplerParameteri"))
	gpSamplerParameteriv = uintptr(getProcAddr("glSamplerParameteriv"))
	gpScaled = uintptr(getProcAddr("glScaled"))
	gpScalef = uintptr(getProcAddr("glScalef"))
	gpScissor = uintptr(getProcAddr("glScissor"))
	gpScissorArrayv = uintptr(getProcAddr("glScissorArrayv"))
	gpScissorExclusiveArrayvNV = uintptr(getProcAddr("glScissorExclusiveArrayvNV"))
	gpScissorExclusiveNV = uintptr(getProcAddr("glScissorExclusiveNV"))
	gpScissorIndexed = uintptr(getProcAddr("glScissorIndexed"))
	gpScissorIndexedv = uintptr(getProcAddr("glScissorIndexedv"))
	gpSecondaryColor3b = uintptr(getProcAddr("glSecondaryColor3b"))
	gpSecondaryColor3bv = uintptr(getProcAddr("glSecondaryColor3bv"))
	gpSecondaryColor3d = uintptr(getProcAddr("glSecondaryColor3d"))
	gpSecondaryColor3dv = uintptr(getProcAddr("glSecondaryColor3dv"))
	gpSecondaryColor3f = uintptr(getProcAddr("glSecondaryColor3f"))
	gpSecondaryColor3fv = uintptr(getProcAddr("glSecondaryColor3fv"))
	gpSecondaryColor3i = uintptr(getProcAddr("glSecondaryColor3i"))
	gpSecondaryColor3iv = uintptr(getProcAddr("glSecondaryColor3iv"))
	gpSecondaryColor3s = uintptr(getProcAddr("glSecondaryColor3s"))
	gpSecondaryColor3sv = uintptr(getProcAddr("glSecondaryColor3sv"))
	gpSecondaryColor3ub = uintptr(getProcAddr("glSecondaryColor3ub"))
	gpSecondaryColor3ubv = uintptr(getProcAddr("glSecondaryColor3ubv"))
	gpSecondaryColor3ui = uintptr(getProcAddr("glSecondaryColor3ui"))
	gpSecondaryColor3uiv = uintptr(getProcAddr("glSecondaryColor3uiv"))
	gpSecondaryColor3us = uintptr(getProcAddr("glSecondaryColor3us"))
	gpSecondaryColor3usv = uintptr(getProcAddr("glSecondaryColor3usv"))
	gpSecondaryColorFormatNV = uintptr(getProcAddr("glSecondaryColorFormatNV"))
	gpSecondaryColorPointer = uintptr(getProcAddr("glSecondaryColorPointer"))
	gpSelectBuffer = uintptr(getProcAddr("glSelectBuffer"))
	gpSelectPerfMonitorCountersAMD = uintptr(getProcAddr("glSelectPerfMonitorCountersAMD"))
	gpShadeModel = uintptr(getProcAddr("glShadeModel"))
	gpShaderBinary = uintptr(getProcAddr("glShaderBinary"))
	gpShaderSource = uintptr(getProcAddr("glShaderSource"))
	gpShaderStorageBlockBinding = uintptr(getProcAddr("glShaderStorageBlockBinding"))
	gpShadingRateImageBarrierNV = uintptr(getProcAddr("glShadingRateImageBarrierNV"))
	gpShadingRateImagePaletteNV = uintptr(getProcAddr("glShadingRateImagePaletteNV"))
	gpShadingRateSampleOrderCustomNV = uintptr(getProcAddr("glShadingRateSampleOrderCustomNV"))
	gpShadingRateSampleOrderNV = uintptr(getProcAddr("glShadingRateSampleOrderNV"))
	gpSignalVkFenceNV = uintptr(getProcAddr("glSignalVkFenceNV"))
	gpSignalVkSemaphoreNV = uintptr(getProcAddr("glSignalVkSemaphoreNV"))
	gpSpecializeShader = uintptr(getProcAddr("glSpecializeShader"))
	gpSpecializeShaderARB = uintptr(getProcAddr("glSpecializeShaderARB"))
	gpStateCaptureNV = uintptr(getProcAddr("glStateCaptureNV"))
	gpStencilFillPathInstancedNV = uintptr(getProcAddr("glStencilFillPathInstancedNV"))
	gpStencilFillPathNV = uintptr(getProcAddr("glStencilFillPathNV"))
	gpStencilFunc = uintptr(getProcAddr("glStencilFunc"))
	gpStencilFuncSeparate = uintptr(getProcAddr("glStencilFuncSeparate"))
	gpStencilMask = uintptr(getProcAddr("glStencilMask"))
	gpStencilMaskSeparate = uintptr(getProcAddr("glStencilMaskSeparate"))
	gpStencilOp = uintptr(getProcAddr("glStencilOp"))
	gpStencilOpSeparate = uintptr(getProcAddr("glStencilOpSeparate"))
	gpStencilStrokePathInstancedNV = uintptr(getProcAddr("glStencilStrokePathInstancedNV"))
	gpStencilStrokePathNV = uintptr(getProcAddr("glStencilStrokePathNV"))
	gpStencilThenCoverFillPathInstancedNV = uintptr(getProcAddr("glStencilThenCoverFillPathInstancedNV"))
	gpStencilThenCoverFillPathNV = uintptr(getProcAddr("glStencilThenCoverFillPathNV"))
	gpStencilThenCoverStrokePathInstancedNV = uintptr(getProcAddr("glStencilThenCoverStrokePathInstancedNV"))
	gpStencilThenCoverStrokePathNV = uintptr(getProcAddr("glStencilThenCoverStrokePathNV"))
	gpSubpixelPrecisionBiasNV = uintptr(getProcAddr("glSubpixelPrecisionBiasNV"))
	gpTexAttachMemoryNV = uintptr(getProcAddr("glTexAttachMemoryNV"))
	gpTexBuffer = uintptr(getProcAddr("glTexBuffer"))
	gpTexBufferARB = uintptr(getProcAddr("glTexBufferARB"))
	gpTexBufferRange = uintptr(getProcAddr("glTexBufferRange"))
	gpTexCoord1d = uintptr(getProcAddr("glTexCoord1d"))
	gpTexCoord1dv = uintptr(getProcAddr("glTexCoord1dv"))
	gpTexCoord1f = uintptr(getProcAddr("glTexCoord1f"))
	gpTexCoord1fv = uintptr(getProcAddr("glTexCoord1fv"))
	gpTexCoord1i = uintptr(getProcAddr("glTexCoord1i"))
	gpTexCoord1iv = uintptr(getProcAddr("glTexCoord1iv"))
	gpTexCoord1s = uintptr(getProcAddr("glTexCoord1s"))
	gpTexCoord1sv = uintptr(getProcAddr("glTexCoord1sv"))
	gpTexCoord2d = uintptr(getProcAddr("glTexCoord2d"))
	gpTexCoord2dv = uintptr(getProcAddr("glTexCoord2dv"))
	gpTexCoord2f = uintptr(getProcAddr("glTexCoord2f"))
	gpTexCoord2fv = uintptr(getProcAddr("glTexCoord2fv"))
	gpTexCoord2i = uintptr(getProcAddr("glTexCoord2i"))
	gpTexCoord2iv = uintptr(getProcAddr("glTexCoord2iv"))
	gpTexCoord2s = uintptr(getProcAddr("glTexCoord2s"))
	gpTexCoord2sv = uintptr(getProcAddr("glTexCoord2sv"))
	gpTexCoord3d = uintptr(getProcAddr("glTexCoord3d"))
	gpTexCoord3dv = uintptr(getProcAddr("glTexCoord3dv"))
	gpTexCoord3f = uintptr(getProcAddr("glTexCoord3f"))
	gpTexCoord3fv = uintptr(getProcAddr("glTexCoord3fv"))
	gpTexCoord3i = uintptr(getProcAddr("glTexCoord3i"))
	gpTexCoord3iv = uintptr(getProcAddr("glTexCoord3iv"))
	gpTexCoord3s = uintptr(getProcAddr("glTexCoord3s"))
	gpTexCoord3sv = uintptr(getProcAddr("glTexCoord3sv"))
	gpTexCoord4d = uintptr(getProcAddr("glTexCoord4d"))
	gpTexCoord4dv = uintptr(getProcAddr("glTexCoord4dv"))
	gpTexCoord4f = uintptr(getProcAddr("glTexCoord4f"))
	gpTexCoord4fv = uintptr(getProcAddr("glTexCoord4fv"))
	gpTexCoord4i = uintptr(getProcAddr("glTexCoord4i"))
	gpTexCoord4iv = uintptr(getProcAddr("glTexCoord4iv"))
	gpTexCoord4s = uintptr(getProcAddr("glTexCoord4s"))
	gpTexCoord4sv = uintptr(getProcAddr("glTexCoord4sv"))
	gpTexCoordFormatNV = uintptr(getProcAddr("glTexCoordFormatNV"))
	gpTexCoordPointer = uintptr(getProcAddr("glTexCoordPointer"))
	gpTexEnvf = uintptr(getProcAddr("glTexEnvf"))
	gpTexEnvfv = uintptr(getProcAddr("glTexEnvfv"))
	gpTexEnvi = uintptr(getProcAddr("glTexEnvi"))
	gpTexEnviv = uintptr(getProcAddr("glTexEnviv"))
	gpTexGend = uintptr(getProcAddr("glTexGend"))
	gpTexGendv = uintptr(getProcAddr("glTexGendv"))
	gpTexGenf = uintptr(getProcAddr("glTexGenf"))
	gpTexGenfv = uintptr(getProcAddr("glTexGenfv"))
	gpTexGeni = uintptr(getProcAddr("glTexGeni"))
	gpTexGeniv = uintptr(getProcAddr("glTexGeniv"))
	gpTexImage1D = uintptr(getProcAddr("glTexImage1D"))
	gpTexImage2D = uintptr(getProcAddr("glTexImage2D"))
	gpTexImage2DMultisample = uintptr(getProcAddr("glTexImage2DMultisample"))
	gpTexImage3D = uintptr(getProcAddr("glTexImage3D"))
	gpTexImage3DMultisample = uintptr(getProcAddr("glTexImage3DMultisample"))
	gpTexPageCommitmentARB = uintptr(getProcAddr("glTexPageCommitmentARB"))
	gpTexParameterIiv = uintptr(getProcAddr("glTexParameterIiv"))
	gpTexParameterIuiv = uintptr(getProcAddr("glTexParameterIuiv"))
	gpTexParameterf = uintptr(getProcAddr("glTexParameterf"))
	gpTexParameterfv = uintptr(getProcAddr("glTexParameterfv"))
	gpTexParameteri = uintptr(getProcAddr("glTexParameteri"))
	gpTexParameteriv = uintptr(getProcAddr("glTexParameteriv"))
	gpTexStorage1D = uintptr(getProcAddr("glTexStorage1D"))
	gpTexStorage2D = uintptr(getProcAddr("glTexStorage2D"))
	gpTexStorage2DMultisample = uintptr(getProcAddr("glTexStorage2DMultisample"))
	gpTexStorage3D = uintptr(getProcAddr("glTexStorage3D"))
	gpTexStorage3DMultisample = uintptr(getProcAddr("glTexStorage3DMultisample"))
	gpTexSubImage1D = uintptr(getProcAddr("glTexSubImage1D"))
	gpTexSubImage2D = uintptr(getProcAddr("glTexSubImage2D"))
	gpTexSubImage3D = uintptr(getProcAddr("glTexSubImage3D"))
	gpTextureAttachMemoryNV = uintptr(getProcAddr("glTextureAttachMemoryNV"))
	gpTextureBarrier = uintptr(getProcAddr("glTextureBarrier"))
	gpTextureBarrierNV = uintptr(getProcAddr("glTextureBarrierNV"))
	gpTextureBuffer = uintptr(getProcAddr("glTextureBuffer"))
	gpTextureBufferEXT = uintptr(getProcAddr("glTextureBufferEXT"))
	gpTextureBufferRange = uintptr(getProcAddr("glTextureBufferRange"))
	gpTextureBufferRangeEXT = uintptr(getProcAddr("glTextureBufferRangeEXT"))
	gpTextureImage1DEXT = uintptr(getProcAddr("glTextureImage1DEXT"))
	gpTextureImage2DEXT = uintptr(getProcAddr("glTextureImage2DEXT"))
	gpTextureImage3DEXT = uintptr(getProcAddr("glTextureImage3DEXT"))
	gpTexturePageCommitmentEXT = uintptr(getProcAddr("glTexturePageCommitmentEXT"))
	gpTextureParameterIiv = uintptr(getProcAddr("glTextureParameterIiv"))
	gpTextureParameterIivEXT = uintptr(getProcAddr("glTextureParameterIivEXT"))
	gpTextureParameterIuiv = uintptr(getProcAddr("glTextureParameterIuiv"))
	gpTextureParameterIuivEXT = uintptr(getProcAddr("glTextureParameterIuivEXT"))
	gpTextureParameterf = uintptr(getProcAddr("glTextureParameterf"))
	gpTextureParameterfEXT = uintptr(getProcAddr("glTextureParameterfEXT"))
	gpTextureParameterfv = uintptr(getProcAddr("glTextureParameterfv"))
	gpTextureParameterfvEXT = uintptr(getProcAddr("glTextureParameterfvEXT"))
	gpTextureParameteri = uintptr(getProcAddr("glTextureParameteri"))
	gpTextureParameteriEXT = uintptr(getProcAddr("glTextureParameteriEXT"))
	gpTextureParameteriv = uintptr(getProcAddr("glTextureParameteriv"))
	gpTextureParameterivEXT = uintptr(getProcAddr("glTextureParameterivEXT"))
	gpTextureRenderbufferEXT = uintptr(getProcAddr("glTextureRenderbufferEXT"))
	gpTextureStorage1D = uintptr(getProcAddr("glTextureStorage1D"))
	gpTextureStorage1DEXT = uintptr(getProcAddr("glTextureStorage1DEXT"))
	gpTextureStorage2D = uintptr(getProcAddr("glTextureStorage2D"))
	gpTextureStorage2DEXT = uintptr(getProcAddr("glTextureStorage2DEXT"))
	gpTextureStorage2DMultisample = uintptr(getProcAddr("glTextureStorage2DMultisample"))
	gpTextureStorage2DMultisampleEXT = uintptr(getProcAddr("glTextureStorage2DMultisampleEXT"))
	gpTextureStorage3D = uintptr(getProcAddr("glTextureStorage3D"))
	gpTextureStorage3DEXT = uintptr(getProcAddr("glTextureStorage3DEXT"))
	gpTextureStorage3DMultisample = uintptr(getProcAddr("glTextureStorage3DMultisample"))
	gpTextureStorage3DMultisampleEXT = uintptr(getProcAddr("glTextureStorage3DMultisampleEXT"))
	gpTextureSubImage1D = uintptr(getProcAddr("glTextureSubImage1D"))
	gpTextureSubImage1DEXT = uintptr(getProcAddr("glTextureSubImage1DEXT"))
	gpTextureSubImage2D = uintptr(getProcAddr("glTextureSubImage2D"))
	gpTextureSubImage2DEXT = uintptr(getProcAddr("glTextureSubImage2DEXT"))
	gpTextureSubImage3D = uintptr(getProcAddr("glTextureSubImage3D"))
	gpTextureSubImage3DEXT = uintptr(getProcAddr("glTextureSubImage3DEXT"))
	gpTextureView = uintptr(getProcAddr("glTextureView"))
	gpTransformFeedbackBufferBase = uintptr(getProcAddr("glTransformFeedbackBufferBase"))
	gpTransformFeedbackBufferRange = uintptr(getProcAddr("glTransformFeedbackBufferRange"))
	gpTransformFeedbackVaryings = uintptr(getProcAddr("glTransformFeedbackVaryings"))
	gpTransformPathNV = uintptr(getProcAddr("glTransformPathNV"))
	gpTranslated = uintptr(getProcAddr("glTranslated"))
	gpTranslatef = uintptr(getProcAddr("glTranslatef"))
	gpUniform1d = uintptr(getProcAddr("glUniform1d"))
	gpUniform1dv = uintptr(getProcAddr("glUniform1dv"))
	gpUniform1f = uintptr(getProcAddr("glUniform1f"))
	gpUniform1fv = uintptr(getProcAddr("glUniform1fv"))
	gpUniform1i = uintptr(getProcAddr("glUniform1i"))
	gpUniform1i64ARB = uintptr(getProcAddr("glUniform1i64ARB"))
	gpUniform1i64NV = uintptr(getProcAddr("glUniform1i64NV"))
	gpUniform1i64vARB = uintptr(getProcAddr("glUniform1i64vARB"))
	gpUniform1i64vNV = uintptr(getProcAddr("glUniform1i64vNV"))
	gpUniform1iv = uintptr(getProcAddr("glUniform1iv"))
	gpUniform1ui = uintptr(getProcAddr("glUniform1ui"))
	gpUniform1ui64ARB = uintptr(getProcAddr("glUniform1ui64ARB"))
	gpUniform1ui64NV = uintptr(getProcAddr("glUniform1ui64NV"))
	gpUniform1ui64vARB = uintptr(getProcAddr("glUniform1ui64vARB"))
	gpUniform1ui64vNV = uintptr(getProcAddr("glUniform1ui64vNV"))
	gpUniform1uiv = uintptr(getProcAddr("glUniform1uiv"))
	gpUniform2d = uintptr(getProcAddr("glUniform2d"))
	gpUniform2dv = uintptr(getProcAddr("glUniform2dv"))
	gpUniform2f = uintptr(getProcAddr("glUniform2f"))
	gpUniform2fv = uintptr(getProcAddr("glUniform2fv"))
	gpUniform2i = uintptr(getProcAddr("glUniform2i"))
	gpUniform2i64ARB = uintptr(getProcAddr("glUniform2i64ARB"))
	gpUniform2i64NV = uintptr(getProcAddr("glUniform2i64NV"))
	gpUniform2i64vARB = uintptr(getProcAddr("glUniform2i64vARB"))
	gpUniform2i64vNV = uintptr(getProcAddr("glUniform2i64vNV"))
	gpUniform2iv = uintptr(getProcAddr("glUniform2iv"))
	gpUniform2ui = uintptr(getProcAddr("glUniform2ui"))
	gpUniform2ui64ARB = uintptr(getProcAddr("glUniform2ui64ARB"))
	gpUniform2ui64NV = uintptr(getProcAddr("glUniform2ui64NV"))
	gpUniform2ui64vARB = uintptr(getProcAddr("glUniform2ui64vARB"))
	gpUniform2ui64vNV = uintptr(getProcAddr("glUniform2ui64vNV"))
	gpUniform2uiv = uintptr(getProcAddr("glUniform2uiv"))
	gpUniform3d = uintptr(getProcAddr("glUniform3d"))
	gpUniform3dv = uintptr(getProcAddr("glUniform3dv"))
	gpUniform3f = uintptr(getProcAddr("glUniform3f"))
	gpUniform3fv = uintptr(getProcAddr("glUniform3fv"))
	gpUniform3i = uintptr(getProcAddr("glUniform3i"))
	gpUniform3i64ARB = uintptr(getProcAddr("glUniform3i64ARB"))
	gpUniform3i64NV = uintptr(getProcAddr("glUniform3i64NV"))
	gpUniform3i64vARB = uintptr(getProcAddr("glUniform3i64vARB"))
	gpUniform3i64vNV = uintptr(getProcAddr("glUniform3i64vNV"))
	gpUniform3iv = uintptr(getProcAddr("glUniform3iv"))
	gpUniform3ui = uintptr(getProcAddr("glUniform3ui"))
	gpUniform3ui64ARB = uintptr(getProcAddr("glUniform3ui64ARB"))
	gpUniform3ui64NV = uintptr(getProcAddr("glUniform3ui64NV"))
	gpUniform3ui64vARB = uintptr(getProcAddr("glUniform3ui64vARB"))
	gpUniform3ui64vNV = uintptr(getProcAddr("glUniform3ui64vNV"))
	gpUniform3uiv = uintptr(getProcAddr("glUniform3uiv"))
	gpUniform4d = uintptr(getProcAddr("glUniform4d"))
	gpUniform4dv = uintptr(getProcAddr("glUniform4dv"))
	gpUniform4f = uintptr(getProcAddr("glUniform4f"))
	gpUniform4fv = uintptr(getProcAddr("glUniform4fv"))
	gpUniform4i = uintptr(getProcAddr("glUniform4i"))
	gpUniform4i64ARB = uintptr(getProcAddr("glUniform4i64ARB"))
	gpUniform4i64NV = uintptr(getProcAddr("glUniform4i64NV"))
	gpUniform4i64vARB = uintptr(getProcAddr("glUniform4i64vARB"))
	gpUniform4i64vNV = uintptr(getProcAddr("glUniform4i64vNV"))
	gpUniform4iv = uintptr(getProcAddr("glUniform4iv"))
	gpUniform4ui = uintptr(getProcAddr("glUniform4ui"))
	gpUniform4ui64ARB = uintptr(getProcAddr("glUniform4ui64ARB"))
	gpUniform4ui64NV = uintptr(getProcAddr("glUniform4ui64NV"))
	gpUniform4ui64vARB = uintptr(getProcAddr("glUniform4ui64vARB"))
	gpUniform4ui64vNV = uintptr(getProcAddr("glUniform4ui64vNV"))
	gpUniform4uiv = uintptr(getProcAddr("glUniform4uiv"))
	gpUniformBlockBinding = uintptr(getProcAddr("glUniformBlockBinding"))
	gpUniformHandleui64ARB = uintptr(getProcAddr("glUniformHandleui64ARB"))
	gpUniformHandleui64NV = uintptr(getProcAddr("glUniformHandleui64NV"))
	gpUniformHandleui64vARB = uintptr(getProcAddr("glUniformHandleui64vARB"))
	gpUniformHandleui64vNV = uintptr(getProcAddr("glUniformHandleui64vNV"))
	gpUniformMatrix2dv = uintptr(getProcAddr("glUniformMatrix2dv"))
	gpUniformMatrix2fv = uintptr(getProcAddr("glUniformMatrix2fv"))
	gpUniformMatrix2x3dv = uintptr(getProcAddr("glUniformMatrix2x3dv"))
	gpUniformMatrix2x3fv = uintptr(getProcAddr("glUniformMatrix2x3fv"))
	gpUniformMatrix2x4dv = uintptr(getProcAddr("glUniformMatrix2x4dv"))
	gpUniformMatrix2x4fv = uintptr(getProcAddr("glUniformMatrix2x4fv"))
	gpUniformMatrix3dv = uintptr(getProcAddr("glUniformMatrix3dv"))
	gpUniformMatrix3fv = uintptr(getProcAddr("glUniformMatrix3fv"))
	gpUniformMatrix3x2dv = uintptr(getProcAddr("glUniformMatrix3x2dv"))
	gpUniformMatrix3x2fv = uintptr(getProcAddr("glUniformMatrix3x2fv"))
	gpUniformMatrix3x4dv = uintptr(getProcAddr("glUniformMatrix3x4dv"))
	gpUniformMatrix3x4fv = uintptr(getProcAddr("glUniformMatrix3x4fv"))
	gpUniformMatrix4dv = uintptr(getProcAddr("glUniformMatrix4dv"))
	gpUniformMatrix4fv = uintptr(getProcAddr("glUniformMatrix4fv"))
	gpUniformMatrix4x2dv = uintptr(getProcAddr("glUniformMatrix4x2dv"))
	gpUniformMatrix4x2fv = uintptr(getProcAddr("glUniformMatrix4x2fv"))
	gpUniformMatrix4x3dv = uintptr(getProcAddr("glUniformMatrix4x3dv"))
	gpUniformMatrix4x3fv = uintptr(getProcAddr("glUniformMatrix4x3fv"))
	gpUniformSubroutinesuiv = uintptr(getProcAddr("glUniformSubroutinesuiv"))
	gpUniformui64NV = uintptr(getProcAddr("glUniformui64NV"))
	gpUniformui64vNV = uintptr(getProcAddr("glUniformui64vNV"))
	gpUnmapBuffer = uintptr(getProcAddr("glUnmapBuffer"))
	gpUnmapNamedBuffer = uintptr(getProcAddr("glUnmapNamedBuffer"))
	gpUnmapNamedBufferEXT = uintptr(getProcAddr("glUnmapNamedBufferEXT"))
	gpUseProgram = uintptr(getProcAddr("glUseProgram"))
	gpUseProgramStages = uintptr(getProcAddr("glUseProgramStages"))
	gpUseProgramStagesEXT = uintptr(getProcAddr("glUseProgramStagesEXT"))
	gpUseShaderProgramEXT = uintptr(getProcAddr("glUseShaderProgramEXT"))
	gpValidateProgram = uintptr(getProcAddr("glValidateProgram"))
	gpValidateProgramPipeline = uintptr(getProcAddr("glValidateProgramPipeline"))
	gpValidateProgramPipelineEXT = uintptr(getProcAddr("glValidateProgramPipelineEXT"))
	gpVertex2d = uintptr(getProcAddr("glVertex2d"))
	gpVertex2dv = uintptr(getProcAddr("glVertex2dv"))
	gpVertex2f = uintptr(getProcAddr("glVertex2f"))
	gpVertex2fv = uintptr(getProcAddr("glVertex2fv"))
	gpVertex2i = uintptr(getProcAddr("glVertex2i"))
	gpVertex2iv = uintptr(getProcAddr("glVertex2iv"))
	gpVertex2s = uintptr(getProcAddr("glVertex2s"))
	gpVertex2sv = uintptr(getProcAddr("glVertex2sv"))
	gpVertex3d = uintptr(getProcAddr("glVertex3d"))
	gpVertex3dv = uintptr(getProcAddr("glVertex3dv"))
	gpVertex3f = uintptr(getProcAddr("glVertex3f"))
	gpVertex3fv = uintptr(getProcAddr("glVertex3fv"))
	gpVertex3i = uintptr(getProcAddr("glVertex3i"))
	gpVertex3iv = uintptr(getProcAddr("glVertex3iv"))
	gpVertex3s = uintptr(getProcAddr("glVertex3s"))
	gpVertex3sv = uintptr(getProcAddr("glVertex3sv"))
	gpVertex4d = uintptr(getProcAddr("glVertex4d"))
	gpVertex4dv = uintptr(getProcAddr("glVertex4dv"))
	gpVertex4f = uintptr(getProcAddr("glVertex4f"))
	gpVertex4fv = uintptr(getProcAddr("glVertex4fv"))
	gpVertex4i = uintptr(getProcAddr("glVertex4i"))
	gpVertex4iv = uintptr(getProcAddr("glVertex4iv"))
	gpVertex4s = uintptr(getProcAddr("glVertex4s"))
	gpVertex4sv = uintptr(getProcAddr("glVertex4sv"))
	gpVertexArrayAttribBinding = uintptr(getProcAddr("glVertexArrayAttribBinding"))
	gpVertexArrayAttribFormat = uintptr(getProcAddr("glVertexArrayAttribFormat"))
	gpVertexArrayAttribIFormat = uintptr(getProcAddr("glVertexArrayAttribIFormat"))
	gpVertexArrayAttribLFormat = uintptr(getProcAddr("glVertexArrayAttribLFormat"))
	gpVertexArrayBindVertexBufferEXT = uintptr(getProcAddr("glVertexArrayBindVertexBufferEXT"))
	gpVertexArrayBindingDivisor = uintptr(getProcAddr("glVertexArrayBindingDivisor"))
	gpVertexArrayColorOffsetEXT = uintptr(getProcAddr("glVertexArrayColorOffsetEXT"))
	gpVertexArrayEdgeFlagOffsetEXT = uintptr(getProcAddr("glVertexArrayEdgeFlagOffsetEXT"))
	gpVertexArrayElementBuffer = uintptr(getProcAddr("glVertexArrayElementBuffer"))
	gpVertexArrayFogCoordOffsetEXT = uintptr(getProcAddr("glVertexArrayFogCoordOffsetEXT"))
	gpVertexArrayIndexOffsetEXT = uintptr(getProcAddr("glVertexArrayIndexOffsetEXT"))
	gpVertexArrayMultiTexCoordOffsetEXT = uintptr(getProcAddr("glVertexArrayMultiTexCoordOffsetEXT"))
	gpVertexArrayNormalOffsetEXT = uintptr(getProcAddr("glVertexArrayNormalOffsetEXT"))
	gpVertexArraySecondaryColorOffsetEXT = uintptr(getProcAddr("glVertexArraySecondaryColorOffsetEXT"))
	gpVertexArrayTexCoordOffsetEXT = uintptr(getProcAddr("glVertexArrayTexCoordOffsetEXT"))
	gpVertexArrayVertexAttribBindingEXT = uintptr(getProcAddr("glVertexArrayVertexAttribBindingEXT"))
	gpVertexArrayVertexAttribDivisorEXT = uintptr(getProcAddr("glVertexArrayVertexAttribDivisorEXT"))
	gpVertexArrayVertexAttribFormatEXT = uintptr(getProcAddr("glVertexArrayVertexAttribFormatEXT"))
	gpVertexArrayVertexAttribIFormatEXT = uintptr(getProcAddr("glVertexArrayVertexAttribIFormatEXT"))
	gpVertexArrayVertexAttribIOffsetEXT = uintptr(getProcAddr("glVertexArrayVertexAttribIOffsetEXT"))
	gpVertexArrayVertexAttribLFormatEXT = uintptr(getProcAddr("glVertexArrayVertexAttribLFormatEXT"))
	gpVertexArrayVertexAttribLOffsetEXT = uintptr(getProcAddr("glVertexArrayVertexAttribLOffsetEXT"))
	gpVertexArrayVertexAttribOffsetEXT = uintptr(getProcAddr("glVertexArrayVertexAttribOffsetEXT"))
	gpVertexArrayVertexBindingDivisorEXT = uintptr(getProcAddr("glVertexArrayVertexBindingDivisorEXT"))
	gpVertexArrayVertexBuffer = uintptr(getProcAddr("glVertexArrayVertexBuffer"))
	gpVertexArrayVertexBuffers = uintptr(getProcAddr("glVertexArrayVertexBuffers"))
	gpVertexArrayVertexOffsetEXT = uintptr(getProcAddr("glVertexArrayVertexOffsetEXT"))
	gpVertexAttrib1d = uintptr(getProcAddr("glVertexAttrib1d"))
	gpVertexAttrib1dv = uintptr(getProcAddr("glVertexAttrib1dv"))
	gpVertexAttrib1f = uintptr(getProcAddr("glVertexAttrib1f"))
	gpVertexAttrib1fv = uintptr(getProcAddr("glVertexAttrib1fv"))
	gpVertexAttrib1s = uintptr(getProcAddr("glVertexAttrib1s"))
	gpVertexAttrib1sv = uintptr(getProcAddr("glVertexAttrib1sv"))
	gpVertexAttrib2d = uintptr(getProcAddr("glVertexAttrib2d"))
	gpVertexAttrib2dv = uintptr(getProcAddr("glVertexAttrib2dv"))
	gpVertexAttrib2f = uintptr(getProcAddr("glVertexAttrib2f"))
	gpVertexAttrib2fv = uintptr(getProcAddr("glVertexAttrib2fv"))
	gpVertexAttrib2s = uintptr(getProcAddr("glVertexAttrib2s"))
	gpVertexAttrib2sv = uintptr(getProcAddr("glVertexAttrib2sv"))
	gpVertexAttrib3d = uintptr(getProcAddr("glVertexAttrib3d"))
	gpVertexAttrib3dv = uintptr(getProcAddr("glVertexAttrib3dv"))
	gpVertexAttrib3f = uintptr(getProcAddr("glVertexAttrib3f"))
	gpVertexAttrib3fv = uintptr(getProcAddr("glVertexAttrib3fv"))
	gpVertexAttrib3s = uintptr(getProcAddr("glVertexAttrib3s"))
	gpVertexAttrib3sv = uintptr(getProcAddr("glVertexAttrib3sv"))
	gpVertexAttrib4Nbv = uintptr(getProcAddr("glVertexAttrib4Nbv"))
	gpVertexAttrib4Niv = uintptr(getProcAddr("glVertexAttrib4Niv"))
	gpVertexAttrib4Nsv = uintptr(getProcAddr("glVertexAttrib4Nsv"))
	gpVertexAttrib4Nub = uintptr(getProcAddr("glVertexAttrib4Nub"))
	gpVertexAttrib4Nubv = uintptr(getProcAddr("glVertexAttrib4Nubv"))
	gpVertexAttrib4Nuiv = uintptr(getProcAddr("glVertexAttrib4Nuiv"))
	gpVertexAttrib4Nusv = uintptr(getProcAddr("glVertexAttrib4Nusv"))
	gpVertexAttrib4bv = uintptr(getProcAddr("glVertexAttrib4bv"))
	gpVertexAttrib4d = uintptr(getProcAddr("glVertexAttrib4d"))
	gpVertexAttrib4dv = uintptr(getProcAddr("glVertexAttrib4dv"))
	gpVertexAttrib4f = uintptr(getProcAddr("glVertexAttrib4f"))
	gpVertexAttrib4fv = uintptr(getProcAddr("glVertexAttrib4fv"))
	gpVertexAttrib4iv = uintptr(getProcAddr("glVertexAttrib4iv"))
	gpVertexAttrib4s = uintptr(getProcAddr("glVertexAttrib4s"))
	gpVertexAttrib4sv = uintptr(getProcAddr("glVertexAttrib4sv"))
	gpVertexAttrib4ubv = uintptr(getProcAddr("glVertexAttrib4ubv"))
	gpVertexAttrib4uiv = uintptr(getProcAddr("glVertexAttrib4uiv"))
	gpVertexAttrib4usv = uintptr(getProcAddr("glVertexAttrib4usv"))
	gpVertexAttribBinding = uintptr(getProcAddr("glVertexAttribBinding"))
	gpVertexAttribDivisor = uintptr(getProcAddr("glVertexAttribDivisor"))
	gpVertexAttribDivisorARB = uintptr(getProcAddr("glVertexAttribDivisorARB"))
	gpVertexAttribFormat = uintptr(getProcAddr("glVertexAttribFormat"))
	gpVertexAttribFormatNV = uintptr(getProcAddr("glVertexAttribFormatNV"))
	gpVertexAttribI1i = uintptr(getProcAddr("glVertexAttribI1i"))
	gpVertexAttribI1iv = uintptr(getProcAddr("glVertexAttribI1iv"))
	gpVertexAttribI1ui = uintptr(getProcAddr("glVertexAttribI1ui"))
	gpVertexAttribI1uiv = uintptr(getProcAddr("glVertexAttribI1uiv"))
	gpVertexAttribI2i = uintptr(getProcAddr("glVertexAttribI2i"))
	gpVertexAttribI2iv = uintptr(getProcAddr("glVertexAttribI2iv"))
	gpVertexAttribI2ui = uintptr(getProcAddr("glVertexAttribI2ui"))
	gpVertexAttribI2uiv = uintptr(getProcAddr("glVertexAttribI2uiv"))
	gpVertexAttribI3i = uintptr(getProcAddr("glVertexAttribI3i"))
	gpVertexAttribI3iv = uintptr(getProcAddr("glVertexAttribI3iv"))
	gpVertexAttribI3ui = uintptr(getProcAddr("glVertexAttribI3ui"))
	gpVertexAttribI3uiv = uintptr(getProcAddr("glVertexAttribI3uiv"))
	gpVertexAttribI4bv = uintptr(getProcAddr("glVertexAttribI4bv"))
	gpVertexAttribI4i = uintptr(getProcAddr("glVertexAttribI4i"))
	gpVertexAttribI4iv = uintptr(getProcAddr("glVertexAttribI4iv"))
	gpVertexAttribI4sv = uintptr(getProcAddr("glVertexAttribI4sv"))
	gpVertexAttribI4ubv = uintptr(getProcAddr("glVertexAttribI4ubv"))
	gpVertexAttribI4ui = uintptr(getProcAddr("glVertexAttribI4ui"))
	gpVertexAttribI4uiv = uintptr(getProcAddr("glVertexAttribI4uiv"))
	gpVertexAttribI4usv = uintptr(getProcAddr("glVertexAttribI4usv"))
	gpVertexAttribIFormat = uintptr(getProcAddr("glVertexAttribIFormat"))
	gpVertexAttribIFormatNV = uintptr(getProcAddr("glVertexAttribIFormatNV"))
	gpVertexAttribIPointer = uintptr(getProcAddr("glVertexAttribIPointer"))
	gpVertexAttribL1d = uintptr(getProcAddr("glVertexAttribL1d"))
	gpVertexAttribL1dv = uintptr(getProcAddr("glVertexAttribL1dv"))
	gpVertexAttribL1i64NV = uintptr(getProcAddr("glVertexAttribL1i64NV"))
	gpVertexAttribL1i64vNV = uintptr(getProcAddr("glVertexAttribL1i64vNV"))
	gpVertexAttribL1ui64ARB = uintptr(getProcAddr("glVertexAttribL1ui64ARB"))
	gpVertexAttribL1ui64NV = uintptr(getProcAddr("glVertexAttribL1ui64NV"))
	gpVertexAttribL1ui64vARB = uintptr(getProcAddr("glVertexAttribL1ui64vARB"))
	gpVertexAttribL1ui64vNV = uintptr(getProcAddr("glVertexAttribL1ui64vNV"))
	gpVertexAttribL2d = uintptr(getProcAddr("glVertexAttribL2d"))
	gpVertexAttribL2dv = uintptr(getProcAddr("glVertexAttribL2dv"))
	gpVertexAttribL2i64NV = uintptr(getProcAddr("glVertexAttribL2i64NV"))
	gpVertexAttribL2i64vNV = uintptr(getProcAddr("glVertexAttribL2i64vNV"))
	gpVertexAttribL2ui64NV = uintptr(getProcAddr("glVertexAttribL2ui64NV"))
	gpVertexAttribL2ui64vNV = uintptr(getProcAddr("glVertexAttribL2ui64vNV"))
	gpVertexAttribL3d = uintptr(getProcAddr("glVertexAttribL3d"))
	gpVertexAttribL3dv = uintptr(getProcAddr("glVertexAttribL3dv"))
	gpVertexAttribL3i64NV = uintptr(getProcAddr("glVertexAttribL3i64NV"))
	gpVertexAttribL3i64vNV = uintptr(getProcAddr("glVertexAttribL3i64vNV"))
	gpVertexAttribL3ui64NV = uintptr(getProcAddr("glVertexAttribL3ui64NV"))
	gpVertexAttribL3ui64vNV = uintptr(getProcAddr("glVertexAttribL3ui64vNV"))
	gpVertexAttribL4d = uintptr(getProcAddr("glVertexAttribL4d"))
	gpVertexAttribL4dv = uintptr(getProcAddr("glVertexAttribL4dv"))
	gpVertexAttribL4i64NV = uintptr(getProcAddr("glVertexAttribL4i64NV"))
	gpVertexAttribL4i64vNV = uintptr(getProcAddr("glVertexAttribL4i64vNV"))
	gpVertexAttribL4ui64NV = uintptr(getProcAddr("glVertexAttribL4ui64NV"))
	gpVertexAttribL4ui64vNV = uintptr(getProcAddr("glVertexAttribL4ui64vNV"))
	gpVertexAttribLFormat = uintptr(getProcAddr("glVertexAttribLFormat"))
	gpVertexAttribLFormatNV = uintptr(getProcAddr("glVertexAttribLFormatNV"))
	gpVertexAttribLPointer = uintptr(getProcAddr("glVertexAttribLPointer"))
	gpVertexAttribP1ui = uintptr(getProcAddr("glVertexAttribP1ui"))
	gpVertexAttribP1uiv = uintptr(getProcAddr("glVertexAttribP1uiv"))
	gpVertexAttribP2ui = uintptr(getProcAddr("glVertexAttribP2ui"))
	gpVertexAttribP2uiv = uintptr(getProcAddr("glVertexAttribP2uiv"))
	gpVertexAttribP3ui = uintptr(getProcAddr("glVertexAttribP3ui"))
	gpVertexAttribP3uiv = uintptr(getProcAddr("glVertexAttribP3uiv"))
	gpVertexAttribP4ui = uintptr(getProcAddr("glVertexAttribP4ui"))
	gpVertexAttribP4uiv = uintptr(getProcAddr("glVertexAttribP4uiv"))
	gpVertexAttribPointer = uintptr(getProcAddr("glVertexAttribPointer"))
	gpVertexBindingDivisor = uintptr(getProcAddr("glVertexBindingDivisor"))
	gpVertexFormatNV = uintptr(getProcAddr("glVertexFormatNV"))
	gpVertexPointer = uintptr(getProcAddr("glVertexPointer"))
	gpViewport = uintptr(getProcAddr("glViewport"))
	gpViewportArrayv = uintptr(getProcAddr("glViewportArrayv"))
	gpViewportIndexedf = uintptr(getProcAddr("glViewportIndexedf"))
	gpViewportIndexedfv = uintptr(getProcAddr("glViewportIndexedfv"))
	gpViewportPositionWScaleNV = uintptr(getProcAddr("glViewportPositionWScaleNV"))
	gpViewportSwizzleNV = uintptr(getProcAddr("glViewportSwizzleNV"))
	gpWaitSync = uintptr(getProcAddr("glWaitSync"))
	gpWaitVkSemaphoreNV = uintptr(getProcAddr("glWaitVkSemaphoreNV"))
	gpWeightPathsNV = uintptr(getProcAddr("glWeightPathsNV"))
	gpWindowPos2d = uintptr(getProcAddr("glWindowPos2d"))
	gpWindowPos2dv = uintptr(getProcAddr("glWindowPos2dv"))
	gpWindowPos2f = uintptr(getProcAddr("glWindowPos2f"))
	gpWindowPos2fv = uintptr(getProcAddr("glWindowPos2fv"))
	gpWindowPos2i = uintptr(getProcAddr("glWindowPos2i"))
	gpWindowPos2iv = uintptr(getProcAddr("glWindowPos2iv"))
	gpWindowPos2s = uintptr(getProcAddr("glWindowPos2s"))
	gpWindowPos2sv = uintptr(getProcAddr("glWindowPos2sv"))
	gpWindowPos3d = uintptr(getProcAddr("glWindowPos3d"))
	gpWindowPos3dv = uintptr(getProcAddr("glWindowPos3dv"))
	gpWindowPos3f = uintptr(getProcAddr("glWindowPos3f"))
	gpWindowPos3fv = uintptr(getProcAddr("glWindowPos3fv"))
	gpWindowPos3i = uintptr(getProcAddr("glWindowPos3i"))
	gpWindowPos3iv = uintptr(getProcAddr("glWindowPos3iv"))
	gpWindowPos3s = uintptr(getProcAddr("glWindowPos3s"))
	gpWindowPos3sv = uintptr(getProcAddr("glWindowPos3sv"))
	gpWindowRectanglesEXT = uintptr(getProcAddr("glWindowRectanglesEXT"))
	return nil
}
